/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package manager.educationManager;

import com.sun.webui.jsf.model.Option;
import entity.educationEntity.EducationPostPaymentApproveEntity;
import entity.educationEntity.EducationPostPaymentRequestEntity;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.faces.model.SelectItem;
import javax.swing.JOptionPane;
import manager.authorizationManager.AuthorizationManager.RequestHistoryModel;
import manager.globalUseManager.ErrorLogWriter;
import oracle.jdbc.rowset.OracleCachedRowSet;

/**
 *
 * @author mekete
 */
public class EducationPostPaymentRequestManager {

    String userName;
    String loggedInEmployeeId;
    EducationPaymentModel educationPaymentModel = new EducationPaymentModel();
    EducationPostPaymentRequestEntity EducationPostPaymentRequestEntity = new EducationPostPaymentRequestEntity();
    EducationPostPaymentApproveEntity educationPostPaymentApproveEntity = new EducationPostPaymentApproveEntity();

    public ArrayList<SelectItem> getPendingRequests() {
        ArrayList<SelectItem> requestLists = new ArrayList<SelectItem>();
        try {
            ResultSet _rs = EducationPostPaymentRequestEntity.selectPendingEducationPaymentRequests(userName);
            while (_rs.next()) {
                SelectItem currentRequest = new SelectItem(_rs.getString("EDUC_POS_PAYMENT_REQ_ID") + "--" + _rs.getString("EDUCATION_REQUEST_ID") + "--" + _rs.getString("REQUESTER_ID") + "--" + _rs.getString("REQUEST_STATUS"), _rs.getString("REQUESTER_ID") + " ON " + _rs.getString("APPLIED_DATE"));
                requestLists.add(currentRequest);
            }
            _rs.close();
            return requestLists;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return null;
        }
    }

    public ArrayList<SelectItem> getPendingpOSRequests() {
        ArrayList<SelectItem> requestLists = new ArrayList<SelectItem>();
        try {
            ResultSet _rs = EducationPostPaymentRequestEntity.selectPendingEducationpOSPaymentRequests(userName);
            while (_rs.next()) {
                SelectItem currentRequest = new SelectItem(_rs.getString("EDUC_POS_PAYMENT_REQ_ID") + "--" + _rs.getString("EDUCATION_REQUEST_ID") + "--" + _rs.getString("REQUESTER_ID") + "--" + _rs.getString("REQUEST_STATUS") + "--" + _rs.getString("APPLIED_DATE"), _rs.getString("REQUESTER_ID") + " ON " + _rs.getString("APPLIED_DATE"));
                requestLists.add(currentRequest);
            }
            _rs.close();
            return requestLists;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return null;
        }
    }

    public ArrayList<SelectItem> getMyRequestsHistory() {
        ArrayList<SelectItem> requestLists = new ArrayList<SelectItem>();
        try {
            ResultSet _rs = EducationPostPaymentRequestEntity.selectEducationPaymentRequestHistory(userName);
            while (_rs.next()) {
                SelectItem currentRequest = new SelectItem(_rs.getString("EDUC_PAYMENT_REQUEST_ID") + "--" + _rs.getString("EDUCATION_REQUEST_ID") + "--" + _rs.getString("REQUESTER_ID") + "--" + _rs.getString("REQUEST_STATUS"), _rs.getString("REQUESTER_ID") + " ON " + _rs.getString("APPLIED_DATE"));
                requestLists.add(currentRequest);
            }
            _rs.close();
            return requestLists;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return null;
        }
    }

    public ArrayList<SelectItem> getMyPossRequestsHistory() {
        ArrayList<SelectItem> requestLists = new ArrayList<SelectItem>();
        try {
            ResultSet _rs = EducationPostPaymentRequestEntity.selectEducationPosPaymentRequestHistory(userName);
            while (_rs.next()) {
                SelectItem currentRequest = new SelectItem(_rs.getString("EDUC_POS_PAYMENT_REQ_ID") + "--" + _rs.getString("EDUCATION_REQUEST_ID") + "--" + _rs.getString("REQUESTER_ID") + "--" + _rs.getString("REQUEST_STATUS") + "--" + _rs.getString("APPLIED_DATE"), _rs.getString("REQUESTER_ID") + " ON " + _rs.getString("APPLIED_DATE"));
                requestLists.add(currentRequest);
            }
            _rs.close();
            return requestLists;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return null;
        }
    }

    public EducationPaymentModel getEducationPaymentRequest(int requestId) {
        educationPaymentModel = new EducationPaymentModel();
        try {
            ResultSet _rs = EducationPostPaymentRequestEntity.selectEducationPaymentRequest(requestId);
            if (_rs.next()) {

                educationPaymentModel.setEducationRequestId(requestId);
                educationPaymentModel.setPaymentPreOrPost(_rs.getString("PAYMENT_PRE_OR_POST"));
                educationPaymentModel.setAcademicYear(_rs.getString("ACADEMIC_YEAR"));
                educationPaymentModel.setSemesterOrTerm(_rs.getString("SEMESTER_OR_TERM"));
                educationPaymentModel.setAppliedDate(_rs.getString("APPLIED_DATE"));
                educationPaymentModel.setIssueDate(_rs.getString("ISSUE_DATE"));
                educationPaymentModel.setRemark(_rs.getString("REMARK"));
                educationPaymentModel.setDocumentReferenceNumber(_rs.getString("DOC_REFERENCE_NUMBER"));
                educationPaymentModel.setReceiptNumber(_rs.getString("RECEIPT_NUMBER"));
                educationPaymentModel.setTotalCost(_rs.getDouble("TOTAL_COST"));
                educationPaymentModel.setCumlativeGPA(_rs.getInt("CGPA"));
                educationPaymentModel.setUserName(_rs.getString("USER_NAME"));
                educationPaymentModel.setTimeStamp(_rs.getString("TIME_STAMP"));
                educationPaymentModel.setRequestStatus(_rs.getString("REQUEST_STATUS"));


            } else {
                educationPaymentModel.setEducationRequestId(-1);
            }
            _rs.close();
            return educationPaymentModel;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return null;
        }
    }

    public EducationPaymentModel getEducationpOSPaymentRequest(int requestId) {
        educationPaymentModel = new EducationPaymentModel();
        try {
            ResultSet _rs = EducationPostPaymentRequestEntity.selectEducationpOSPaymentRequest(requestId);
            if (_rs.next()) {

                educationPaymentModel.setEducationRequestId(requestId);
                educationPaymentModel.setPaymentPreOrPost(_rs.getString("PAYMENT_PRE_OR_POST"));
                educationPaymentModel.setAcademicYear(_rs.getString("ACADEMIC_YEAR"));
                educationPaymentModel.setSemesterOrTerm(_rs.getString("SEMESTER_OR_TERM"));
                educationPaymentModel.setAppliedDate(_rs.getString("APPLIED_DATE"));
                educationPaymentModel.setIssueDate(_rs.getString("ISSUE_DATE"));
                educationPaymentModel.setRemark(_rs.getString("REMARK"));
                educationPaymentModel.setDocumentReferenceNumber(_rs.getString("DOC_REFERENCE_NUMBER"));
                educationPaymentModel.setReceiptNumber(_rs.getString("RECEIPT_NUMBER"));
                educationPaymentModel.setTotalCost(_rs.getDouble("TOTAL_COST"));
                educationPaymentModel.setCumlativeGPA(_rs.getInt("CGPA"));
                educationPaymentModel.setUserName(_rs.getString("USER_NAME"));
                educationPaymentModel.setTimeStamp(_rs.getString("TIME_STAMP"));
                educationPaymentModel.setRequestStatus(_rs.getString("REQUEST_STATUS"));


            } else {
                educationPaymentModel.setEducationRequestId(-1);
            }
            _rs.close();
            return educationPaymentModel;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return null;
        }
    }

    public EducationPaymentModel getEducationpOSResultRequest(int requestId, String appliedDate) {
        educationPaymentModel = new EducationPaymentModel();
        try {
            ResultSet _rs = EducationPostPaymentRequestEntity.selectEducationpOSResultRequest(requestId, appliedDate);
            if (_rs.next()) {

                educationPaymentModel.setEducationRequestId(requestId);
                educationPaymentModel.setResultBasic(_rs.getString("PASS_FAIL"));
                educationPaymentModel.setScore(_rs.getDouble("RESULT"));
            //educationPaymentModel.setSemesterOrTerm(_rs.getString("SEMESTER_OR_TERM"));

            } else {
                educationPaymentModel.setEducationRequestId(-1);
            }
            _rs.close();
            return educationPaymentModel;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return null;
        }
    }

    public HashMap readEducationInfo(String employeeId) {
        try {
            return EducationPostPaymentRequestEntity.readEducationInfo(employeeId);
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public boolean saveEducationAdinstratice(ArrayList<EducationPaymentModel> educationPaymentModel, String date) {
        ArrayList<EducationPaymentModel> Insereted = new ArrayList<EducationPaymentModel>();
        String timeStamp = new Timestamp((new Date()).getTime()).toString();
        //educationPaymentModel = new EducationPaymentModel(requesterId, unitCost, quantity, totalCost, adminstrativeCostType);
        try {
            for (EducationPaymentModel educationPaymentModell : educationPaymentModel) {

                Insereted.add(educationPaymentModell);
            }
            EducationPostPaymentRequestEntity.insertEducationAdminstrat(Insereted, date);
            return true;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return false;
        }
    }

    public boolean UpdateEducationAdinstratice(ArrayList<EducationPaymentModel> educationPaymentModel, int adminId) {
        ArrayList<EducationPaymentModel> Insereted = new ArrayList<EducationPaymentModel>();
        //educationPaymentModel = new EducationPaymentModel(requesterId, unitCost, quantity, totalCost, adminstrativeCostType);
        try {
            for (EducationPaymentModel educationPaymentModell : educationPaymentModel) {

                Insereted.add(educationPaymentModell);
            }
            EducationPostPaymentRequestEntity.UpdteEducationAdminstrat(Insereted, adminId);
            return true;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return false;
        }
    }

    public boolean saveCourseTaking(ArrayList<EducationPaymentModel> courseTakingList, String date) {
        ArrayList<EducationPaymentModel> Insereted = new ArrayList<EducationPaymentModel>();
        ArrayList<EducationPaymentModel> toBeUpdated = new ArrayList<EducationPaymentModel>();
        ArrayList<EducationPaymentModel> toBeDeleted = new ArrayList<EducationPaymentModel>();
        //educationPaymentModel = new EducationPaymentModel(requesterId, unitCost, quantity, totalCost, adminstrativeCostType);

        try {
            for (EducationPaymentModel currentCommittee : courseTakingList) {

                if (currentCommittee.getDatabaseStatus().equalsIgnoreCase("New")) {
                    Insereted.add(currentCommittee);
                } else if (currentCommittee.getDatabaseStatus().equalsIgnoreCase("Edited")) {
                    toBeUpdated.add(currentCommittee);
                } else if (currentCommittee.getDatabaseStatus().equalsIgnoreCase("Deleted")) {
                    toBeDeleted.add(currentCommittee);
                }
            }
            EducationPostPaymentRequestEntity.insertCourseTakingList(Insereted, date);
            EducationPostPaymentRequestEntity.UpadetCoursePostTakingList(toBeUpdated);
            // EducationPostPaymentRequestEntity.deleteCoursePosRequest(toBeDeleted);
            return true;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return false;
        }
    }

    public boolean UpdaeteCourseTaking(ArrayList<EducationPaymentModel> courseTakingList, int courseID) {
        ArrayList<EducationPaymentModel> Insereted = new ArrayList<EducationPaymentModel>();
        //educationPaymentModel = new EducationPaymentModel(requesterId, unitCost, quantity, totalCost, adminstrativeCostType);
        try {
            for (EducationPaymentModel educationCourse : courseTakingList) {

                Insereted.add(educationCourse);
            }
            EducationPostPaymentRequestEntity.UpadetCourseTakingList(Insereted, courseID);
            return true;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return false;
        }
    }

    public boolean saveEducationRequest(String requesterID,
            int educationRequestId, String paymentPreOrPost, String academicYear, String semesterOrTerm, String appliedDate, String issueDate, String remark, String documentReferenceNumber, String receiptNumber, String requestStatus, double totalCost) {
        String timeStamp = new Timestamp((new Date()).getTime()).toString();

        educationPaymentModel = new EducationPaymentModel(requesterID, educationRequestId, paymentPreOrPost, academicYear, semesterOrTerm, appliedDate, issueDate, remark, documentReferenceNumber, receiptNumber, EducationPostPaymentApproveManager.INITIAL_STATE_EDUCATION_POST_PAYMENT, timeStamp, userName, totalCost);

        try {
            EducationPostPaymentRequestEntity.insertEducationPaymentRequest(educationPaymentModel);
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return false;
        }
        return true;
    }

    public boolean saveEducationPosRequest(String requesterID,
            int educationRequestId, String paymentPreOrPost, String academicYear, String semesterOrTerm, String appliedDate, String issueDate, String remark, String documentReferenceNumber, String receiptNumber, String requestStatus, double totalCost) {
        String timeStamp = new Timestamp((new Date()).getTime()).toString();

        educationPaymentModel = new EducationPaymentModel(requesterID, educationRequestId, paymentPreOrPost, academicYear, semesterOrTerm, appliedDate, issueDate, remark, documentReferenceNumber, receiptNumber, EducationPostPaymentApproveManager.INITIAL_STATE_EDUCATION_POST_PAYMENT, timeStamp, userName, totalCost);

        try {
            EducationPostPaymentRequestEntity.insertEducationPaymentRequest(educationPaymentModel);
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return false;
        }
        return true;
    }

    public boolean updateEducationRequest(int educationPaymentRequestId, int educationRequestId, String paymentPreOrPost, String academicYear, String semesterOrTerm, String appliedDate, String issueDate, String remark, String documentReferenceNumber, String receiptNumber, double totalCost, String requestStatus) {
        String timeStamp = new Timestamp((new Date()).getTime()).toString();
        educationPaymentModel = new EducationPaymentModel(educationPaymentRequestId, educationRequestId, paymentPreOrPost, academicYear, semesterOrTerm, appliedDate, issueDate, remark, documentReferenceNumber, receiptNumber, totalCost, EducationPostPaymentApproveManager.INITIAL_STATE_EDUCATION_POST_PAYMENT, timeStamp, userName);
        try {
            EducationPostPaymentRequestEntity.updateEducationPaymentRequest(educationPaymentModel);
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return false;
        }
        return true;
    }

    public boolean updateEducationPosRequest(int educationPaymentRequestId, int educationRequestId, String paymentPreOrPost, String academicYear, String semesterOrTerm, String appliedDate, String issueDate, String remark, String documentReferenceNumber, String receiptNumber, double totalCost, float cGPA, String requestStatus) {
        String timeStamp = new Timestamp((new Date()).getTime()).toString();
        educationPaymentModel = new EducationPaymentModel(educationPaymentRequestId, educationRequestId, paymentPreOrPost, academicYear, semesterOrTerm, appliedDate, issueDate, remark, documentReferenceNumber, receiptNumber, totalCost, cGPA, EducationPostPaymentApproveManager.INITIAL_STATE_EDUCATION_POST_PAYMENT, timeStamp, userName);
        try {
            EducationPostPaymentRequestEntity.updateEducationPaymentRequest(educationPaymentModel);
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return false;
        }
        return true;
    }

    public boolean updateAdminsrequest(String requesterId, double unitCost, double totalCost, String adminstrativeCostType, int educReqID) {
        String timeStamp = new Timestamp((new Date()).getTime()).toString();
        educationPaymentModel = new EducationPaymentModel(requesterId, unitCost, totalCost, adminstrativeCostType, educReqID);
        try {
            EducationPostPaymentRequestEntity.updateEducationAdminstrativecost(educationPaymentModel);
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return false;
        }
        return true;
    }

    public boolean deleteEducationRequest(int educationRequestId) {
        try {
            EducationPostPaymentRequestEntity.deleteEducationPaymentRequest(educationRequestId);
            return true;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return false;
        }
    }

    public boolean deleteAdminstrativeCostRequest(int educationRequestId) {
        try {
            EducationPostPaymentRequestEntity.deleteAdminstrativeCostRequest(educationRequestId);
            return true;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return false;
        }
    }

    public boolean deleteCourseRequest(int educationRequestId) {
        try {
            EducationPostPaymentRequestEntity.deleteCourseRequest(educationRequestId);
            return true;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return false;
        }
    }

    public String getLoggedInEmployeeId() {
        return loggedInEmployeeId;
    }

    public void setLoggedInEmployeeId(String loggedInEmployeeId) {
        this.loggedInEmployeeId = loggedInEmployeeId;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public ArrayList<SelectItem> getAdminstrativeCost() {
        ArrayList<SelectItem> requestLists = new ArrayList<SelectItem>();
        try {
            ResultSet _rs = EducationPostPaymentRequestEntity.selectAdminstrativeCost();

            while (_rs.next()) {
                SelectItem currentRequest = new SelectItem(_rs.getString("ADMINSTRATIVE_COST_ID") + "-" + _rs.getString("ADMINSTRATIVE_COST_TYPE"), _rs.getString("ADMINSTRATIVE_COST_TYPE"));
                requestLists.add(currentRequest);
            }
            requestLists.add(0, new Option(null, "Select Adminstrative Cost Type"));
            _rs.close();

            return requestLists;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return null;
        }
    }

    public ArrayList<SelectItem> getprogramName(String categoryID) {
        ArrayList<SelectItem> programtLists = new ArrayList<SelectItem>();
        try {
            ResultSet _rs = EducationPostPaymentRequestEntity.selectProgramName(categoryID);

            while (_rs.next()) {
                SelectItem currentRequest = new SelectItem(_rs.getString("EDU_TYPE_NAME"));
                programtLists.add(currentRequest);
            }
            programtLists.add(0, new Option(null, "--Select Progarme Name--"));
            _rs.close();

            return programtLists;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return null;
        }
    }

    public HashMap readEmployeeCourseInfo(String employeeId, String courseCode) {
        try {
            return EducationPostPaymentRequestEntity.readEmployeeCourseInfo(employeeId, courseCode);
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public ArrayList<HashMap> getTableInfo(int reqestID, String date) {
        try {
            ArrayList<HashMap> IntSuccLists = new ArrayList<HashMap>();
            OracleCachedRowSet ocrs = EducationPostPaymentRequestEntity.readAllTableInfo(reqestID, date);
            while (ocrs.next()) {
                HashMap resultInfo = new HashMap();
                resultInfo.put("AMINSTRATIVE_COST_TYPE", ocrs.getString("AMINSTRATIVE_COST_TYPE"));
                resultInfo.put("UNIT_COST", ocrs.getString("UNIT_COST"));
                // resultInfo.put("QUANTITY", ocrs.getString("QUANTITY"));
                resultInfo.put("TOTAL_COST", ocrs.getString("TOTAL_COST"));
                resultInfo.put("REQUESTER_ID", ocrs.getString("REQUESTER_ID"));
                resultInfo.put("ID", ocrs.getString("ID"));
                resultInfo.put("APPROVEDORNOT", ocrs.getString("APPROVEDORNOT"));
//                resultInfo.put("CGPA", ocrs.getString("CGPA"));
                IntSuccLists.add(resultInfo);
            }
            return IntSuccLists;
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        } finally {
            try {
            } catch (Exception ex) {
            }
        }
    }

    public ArrayList<HashMap> getCourseInfo(int reqestID, String date) {
        try {
            ArrayList<HashMap> IntSuccLists = new ArrayList<HashMap>();
            OracleCachedRowSet ocrs = EducationPostPaymentRequestEntity.readAllCourse(reqestID, date);
            while (ocrs.next()) {
                HashMap resultInfo = new HashMap();
//                resultInfo.put("AMINSTRATIVE_COST_TYPE", ocrs.getString("AMINSTRATIVE_COST_TYPE"));
                resultInfo.put("ID", ocrs.getString("ID"));
                resultInfo.put("EDUC_REQ_ID", ocrs.getString("EDUC_REQ_ID"));
                resultInfo.put("REQUESTER_ID", ocrs.getString("REQUESTER_ID"));
                resultInfo.put("COURSE_CODE", ocrs.getString("COURSE_CODE"));
                resultInfo.put("SEMISTER", ocrs.getString("SEMISTER"));
                resultInfo.put("CREDIT_HOUR", ocrs.getString("CREDIT_HOUR"));
                resultInfo.put("CGPA", ocrs.getString("CGPA"));
                resultInfo.put("GRADE_PT", ocrs.getString("GRADE_PT"));
                resultInfo.put("ACADAMIC_YEAR", ocrs.getString("ACADAMIC_YEAR"));
                IntSuccLists.add(resultInfo);
            }
            return IntSuccLists;
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        } finally {
            try {
            } catch (Exception ex) {
            }
        }
    }

    public ArrayList<HashMap> getCoursePosInfo(String acadamicYear, String semister, String requesterId) {
        try {
            ArrayList<HashMap> IntSuccLists = new ArrayList<HashMap>();
            OracleCachedRowSet ocrs = EducationPostPaymentRequestEntity.readAllCoursePos(acadamicYear, semister, requesterId);
            while (ocrs.next()) {
                HashMap resultInfo = new HashMap();

                resultInfo.put("ID", ocrs.getString("ID"));
                resultInfo.put("EDUC_REQ_ID", ocrs.getString("EDUC_REQ_ID"));
                resultInfo.put("REQUESTER_ID", ocrs.getString("REQUESTER_ID"));
                resultInfo.put("COURSE_CODE", ocrs.getString("COURSE_CODE"));
                resultInfo.put("SEMISTER", ocrs.getString("SEMISTER"));
                resultInfo.put("CREDIT_HOUR", ocrs.getString("CREDIT_HOUR"));
                resultInfo.put("ACADAMIC_YEAR", ocrs.getString("ACADAMIC_YEAR"));
                resultInfo.put("CGPA", ocrs.getString("CGPA"));
                resultInfo.put("GRADE_PT", ocrs.getString("GRADE_PT"));
                //resultInfo.put("STATUS", ocrs.getString("STATUS"));
                IntSuccLists.add(resultInfo);
            }
            return IntSuccLists;
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        } finally {
            try {
            } catch (Exception ex) {
            }
        }
    }

    public ArrayList<HashMap> getAllActiveCommittees(String acadamicYaer, String semister, String requesterId) {
        ArrayList<HashMap> committeeList = new ArrayList<HashMap>();
        try {
            ResultSet _rs = EducationPostPaymentRequestEntity.readAllCoursePos(acadamicYaer, semister, requesterId);
            while (_rs.next()) {
                HashMap resultInfo = new HashMap();

                resultInfo.put("ID", _rs.getString("ID"));
                resultInfo.put("EDUC_REQ_ID", _rs.getString("EDUC_REQ_ID"));
                resultInfo.put("REQUESTER_ID", _rs.getString("REQUESTER_ID"));
                resultInfo.put("COURSE_CODE", _rs.getString("COURSE_CODE"));
                resultInfo.put("SEMISTER", _rs.getString("SEMISTER"));
                resultInfo.put("CREDIT_HOUR", _rs.getString("CREDIT_HOUR"));
                resultInfo.put("ACADAMIC_YEAR", _rs.getString("ACADAMIC_YEAR"));
                resultInfo.put("CGPA", _rs.getString("CGPA"));
                resultInfo.put("GRADE_PT", _rs.getString("GRADE_PT"));
                resultInfo.put("INSTITUTION_NAME", _rs.getString("INSTITUTION_NAME"));
                committeeList.add(resultInfo);
//                EducationPaymentModel currentCommittee = new EducationPaymentModel();
//                currentCommittee.setCourseId(_rs.getInt("ID"));//
//                currentCommittee.setEducationRequestId(_rs.getInt("EDUC_REQ_ID"));
//                currentCommittee.setRequesterId(_rs.getString("REQUESTER_ID"));//
//                currentCommittee.setCourseCode(_rs.getString("COURSE_CODE"));//
//                currentCommittee.setSemesterOrTerm(_rs.getString("SEMISTER"));//
//                currentCommittee.setCreditHr(_rs.getString("CREDIT_HOUR"));//
//                currentCommittee.setAcademicYear(_rs.getString("ACADAMIC_YEAR"));//
//                currentCommittee.setCumlativeGPA(_rs.getFloat("CGPA"));//
//                currentCommittee.setGradept(_rs.getString("GRADE_PT"));//
//                currentCommittee.setDatabaseStatus("Old");  //
//                committeeList.add(currentCommittee);
            }
            _rs.close();
            return committeeList;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return null;
        }
    }

    public ArrayList<RequestHistoryModel> getRequestHistory(int requestId) {
        try {
            ResultSet _rs = (ResultSet) educationPostPaymentApproveEntity.selectProcessedOverTimeRequest(requestId);
            ArrayList<RequestHistoryModel> requestHistoryList = new ArrayList<RequestHistoryModel>();
            int counter = 0;
            while (_rs.next()) {
                counter++;
                String deciderEmployeeId = _rs.getString("PROCESSED_BY");
                String recorderEmployeeId = _rs.getString("RECORDED_BY_ID");
                String deciderFullName = _rs.getString("FIRST_NAME") + " " + _rs.getString("MIDDLE_NAME") + " " + _rs.getString("LAST_NAME");
                if (!deciderEmployeeId.equals(recorderEmployeeId)) {//
                    deciderFullName = deciderFullName + " (Rec. by " + recorderEmployeeId + ")";
                }
                String timeStamp = _rs.getString("TIME_STAMP").substring(0, 10);
                String commentGiven = _rs.getString("COMMENT_GIVEN") == null ? "No comment given." : _rs.getString("COMMENT_GIVEN");

                String givenDecision = _rs.getString("PERMISSION_NAME");
                requestHistoryList.add(new RequestHistoryModel(counter, deciderEmployeeId, deciderFullName, givenDecision, timeStamp, commentGiven));
            }
            return requestHistoryList;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return null;
        }

    }

    public ArrayList<SelectItem> getResultType() {
        ArrayList<SelectItem> committeeTypes = new ArrayList<SelectItem>();
        try {
            committeeTypes.add(new SelectItem(null, "Select"));
            committeeTypes.add(new SelectItem("PASS", "PASS"));
            committeeTypes.add(new SelectItem("FAIL", "FAIL"));
            return committeeTypes;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return null;
        }
    }

    public boolean saveCourseTakingBasicLevl(String requesterId, int eduReqId, String grade, String resultBasic, double score, String applideDte) {
        //ArrayList<EducationPaymentModel> Insereted = new ArrayList<EducationPaymentModel>();
        educationPaymentModel = new EducationPaymentModel(requesterId, eduReqId, grade, resultBasic, score, applideDte);
        try {

            EducationPostPaymentRequestEntity.insertBasic(educationPaymentModel);
            return true;
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
            return false;
        }
    }

    public ArrayList<HashMap> checkPrePaid(String acadamicYear, String semister, String requesterId) {
        try {
            ArrayList<HashMap> IntSuccLists = new ArrayList<HashMap>();
            OracleCachedRowSet ocrs = EducationPostPaymentRequestEntity.checkPrePaid(acadamicYear, semister, requesterId);
            while (ocrs.next()) {
                HashMap resultInfo = new HashMap();

                resultInfo.put("ACADEMIC_YEAR", ocrs.getString("ACADEMIC_YEAR"));
                resultInfo.put("SEMESTER_OR_TERM", ocrs.getString("SEMESTER_OR_TERM"));
                resultInfo.put("REQUESTER_ID", ocrs.getString("REQUESTER_ID"));
//                resultInfo.put("COURSE_CODE", ocrs.getString("COURSE_CODE"));
//                resultInfo.put("SEMISTER", ocrs.getString("SEMISTER"));
//                resultInfo.put("CREDIT_HOUR", ocrs.getString("CREDIT_HOUR"));
//                resultInfo.put("ACADAMIC_YEAR", ocrs.getString("ACADAMIC_YEAR"));
//                resultInfo.put("CGPA", ocrs.getString("CGPA"));
//                resultInfo.put("GRADE_PT", ocrs.getString("GRADE_PT"));
                //resultInfo.put("STATUS", ocrs.getString("STATUS"));
                IntSuccLists.add(resultInfo);
            }
            return IntSuccLists;
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        } finally {
            try {
            } catch (Exception ex) {
            }
        }
    }

    public ArrayList<HashMap> checkPostPaid(String acadamicYear, String semister, String requesterId) {
        try {
            ArrayList<HashMap> IntSuccLists = new ArrayList<HashMap>();
            OracleCachedRowSet ocrs = EducationPostPaymentRequestEntity.checkPostPaid(acadamicYear, semister, requesterId);
            while (ocrs.next()) {
                HashMap resultInfo = new HashMap();

                resultInfo.put("ACADEMIC_YEAR", ocrs.getString("ACADEMIC_YEAR"));
                resultInfo.put("SEMESTER_OR_TERM", ocrs.getString("SEMESTER_OR_TERM"));
                resultInfo.put("REQUESTER_ID", ocrs.getString("REQUESTER_ID"));
//                resultInfo.put("COURSE_CODE", ocrs.getString("COURSE_CODE"));
//                resultInfo.put("SEMISTER", ocrs.getString("SEMISTER"));
//                resultInfo.put("CREDIT_HOUR", ocrs.getString("CREDIT_HOUR"));
//                resultInfo.put("ACADAMIC_YEAR", ocrs.getString("ACADAMIC_YEAR"));
//                resultInfo.put("CGPA", ocrs.getString("CGPA"));
//                resultInfo.put("GRADE_PT", ocrs.getString("GRADE_PT"));
                //resultInfo.put("STATUS", ocrs.getString("STATUS"));
                IntSuccLists.add(resultInfo);
            }
            return IntSuccLists;
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        } finally {
            try {
            } catch (Exception ex) {
            }
        }
    }

    public String checkPrePaidReceipt(String requesterId) {
        try {
            String IntSuccLists = null;
            OracleCachedRowSet ocrs = EducationPostPaymentRequestEntity.checkPrePaidReceipt(requesterId);
            while (ocrs.next()) {
                String resultInfo;

                IntSuccLists = ocrs.getString("RECEIPT_NUMBER");

            }
            return IntSuccLists;
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        } finally {
            try {
            } catch (Exception ex) {
            }
        }
    }

    public String checkPrePaid(int requestId) {
        try {
            String IntSuccLists = null;
            OracleCachedRowSet ocrs = EducationPostPaymentRequestEntity.checkPrePaid(requestId);
            while (ocrs.next()) {
                String resultInfo;

                IntSuccLists = ocrs.getString("REQUESTER_ID");
                JOptionPane.showMessageDialog(null, IntSuccLists);
//               
            }
            return IntSuccLists;
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        } finally {
            try {
            } catch (Exception ex) {
            }
        }
    }

    public String checkEnrolled(String requesterId, String programName) {
        try {
            String enrolledOrNot = null;
//            ArrayList<HashMap> IntSuccLists = new ArrayList<HashMap>();
            OracleCachedRowSet ocrs = EducationPostPaymentRequestEntity.checkEnrolled(requesterId, programName);
            while (ocrs.next()) {
//                HashMap resultInfo = new HashMap();
                enrolledOrNot = ocrs.getString("EDUCATIONAL_STATUS");
//                resultInfo.put("EDUCATIONAL_STATUS", ocrs.getString("EDUCATIONAL_STATUS"));
//                resultInfo.put("COURSE_CODE", ocrs.getString("COURSE_CODE"));
//                resultInfo.put("SEMISTER", ocrs.getString("SEMISTER"));
//                resultInfo.put("CREDIT_HOUR", ocrs.getString("CREDIT_HOUR"));
//                resultInfo.put("ACADAMIC_YEAR", ocrs.getString("ACADAMIC_YEAR"));
//                resultInfo.put("CGPA", ocrs.getString("CGPA"));
//                resultInfo.put("GRADE_PT", ocrs.getString("GRADE_PT"));
            //resultInfo.put("STATUS", ocrs.getString("STATUS"));
//                IntSuccLists.add(resultInfo);
            }
            return enrolledOrNot;
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        } finally {
            try {
            } catch (Exception ex) {
            }
        }
    }
}
