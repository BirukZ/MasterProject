/*
 * Page1.java
 *
 * Created on Feb 26, 2010, 7:48:31 AM
 * Copyright DavePro
 */
package fphrms.DocumentRequest;

import com.icesoft.faces.component.dragdrop.DragEvent;
import com.icesoft.faces.component.ext.HtmlCommandButton;
import com.icesoft.faces.component.ext.HtmlCommandLink;
import com.icesoft.faces.component.ext.HtmlDataTable;
import com.icesoft.faces.component.ext.HtmlInputText;
import com.icesoft.faces.component.ext.HtmlInputTextarea;
import com.icesoft.faces.component.ext.HtmlOutputLabel;
import com.icesoft.faces.component.ext.HtmlPanelGroup;
import com.icesoft.faces.component.ext.HtmlSelectOneMenu;
import com.icesoft.faces.component.ext.HtmlSelectOneRadio;
import com.icesoft.faces.component.jsfcl.data.BorderLayoutBean;
import com.icesoft.faces.component.jsfcl.data.DefaultSelectedData;
import com.icesoft.faces.component.jsfcl.data.DefaultSelectionItems;
import com.icesoft.faces.component.panellayout.PanelLayout;
import com.icesoft.faces.component.panelpopup.PanelPopup;
import com.icesoft.faces.context.effects.JavascriptContext;
import com.sun.rave.web.ui.appbase.AbstractPageBean;
import com.sun.webui.jsf.model.Option;
import fphrms.ApplicationBean1;
import fphrms.CustomValidations;
import fphrms.RequestBean1;
import fphrms.SessionBean1;
import javax.faces.FacesException;
import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;
import java.util.ArrayList;
import java.util.HashMap;
import javax.faces.context.FacesContext;
import manager.authorizationManager.AuthorizationManager.RequestHistoryModel;
import manager.documentRequestManager.DocumentApproveManager;
//import manager.documentRequestManager.DocumentApproveManager.EmployeeExperienceHistroyModel;
import manager.documentRequestManager.DocumentRequestManager;
import manager.documentRequestManager.DocumentRequestManager.DocumentRequestModel;
import manager.employeeManager.EmployeeManage;

/**
 * <p>Page bean that corresponds to a similarly named JSP page.  This
 * class contains component definitions (and initialization code) for
 * all components that you have defined on this page, as well as
 * lifecycle methods and event handlers where you may add behavior
 * to respond to incoming events.</p>
 */
public class DocumentApprovePage extends AbstractPageBean {

    EmployeeManage employeeManager = new EmployeeManage();
    DocumentApproveManager documentApproveManager = new DocumentApproveManager();
    DocumentRequestManager documentRequestManager = new DocumentRequestManager();
    ArrayList<RequestHistoryModel> decisionsMadeOnRequest = new ArrayList<RequestHistoryModel>();
   // private ArrayList<EmployeeExperienceHistroyModel> empExperienceModel = new ArrayList<EmployeeExperienceHistroyModel>();
    private ArrayList<Option> documentReturns = documentRequestManager.getDocumentReturn();
    ArrayList<Option> requestListsToBeApproved = new ArrayList<Option>();
    ArrayList<Option> requestListsHistory = new ArrayList<Option>();
    ArrayList<Option> availableDecisionsToMakeList = new ArrayList<Option>();
    private DefaultSelectedData selectedRequestByEmployee = new DefaultSelectedData();
    private DefaultSelectedData selectedRequestFromApprovableList = new DefaultSelectedData();
    private DefaultSelectedData selectedRequestFromHistoryList = new DefaultSelectedData();
    private DefaultSelectedData selectedObjectOneMenuDecisionType = new DefaultSelectedData();
    String loggedInEmployeeId;
    String userName;
    int documentRequestId;//   DOCUMENT_REQUEST_ID
    String requesterId;//REQUESTER_ID
    String documentCatagory;//DOCUMENT_CATAGORY
    String description;//DESCRIPTION
    String reason;//REASON
    String appliedDate;//APPLIED_DATE
    String issueDate;//ISSUE_DATE
    String docReferenceNumber;//DOC_REFERENCE_NUMBER
    String status;//STATUS

    // <editor-fold defaultstate="collapsed" desc="Local Variables">
    private int __placeholder;

    /**
     * <p>Automatically managed component initialization.  <strong>WARNING:</strong>
     * This method is automatically generated, so any user-specified code inserted
     * here is subject to being replaced.</p>
     */
    private void _init() throws Exception {
        loggedInEmployeeId = getSessionBean1().getEmployeeId();
        userName = getSessionBean1().getUserName();
        documentApproveManager.setUserName(userName);
        populateApproverTextComponents(loggedInEmployeeId);
        requestListsToBeApproved = documentApproveManager.getRequestsToBeProcessed();
        requestListsHistory = documentApproveManager.getProcessedRequestsHistory();
    }
    private BorderLayoutBean panelBorder1Bean = new BorderLayoutBean();

    public BorderLayoutBean getPanelBorder1Bean() {
        return panelBorder1Bean;
    }

    public void setPanelBorder1Bean(BorderLayoutBean blb) {
        this.panelBorder1Bean = blb;
    }
    private HtmlInputText txtDeciderFullName = new HtmlInputText();

    public HtmlInputText getTxtDeciderFullName() {
        return txtDeciderFullName;
    }

    public void setTxtDeciderFullName(HtmlInputText hit) {
        this.txtDeciderFullName = hit;
    }
    private HtmlInputText txtDeciderPosition = new HtmlInputText();

    public HtmlInputText getTxtDeciderPosition() {
        return txtDeciderPosition;
    }

    public void setTxtDeciderPosition(HtmlInputText hit) {
        this.txtDeciderPosition = hit;
    }

    public ArrayList<RequestHistoryModel> getDecisionsMadeOnRequest() {
        return decisionsMadeOnRequest;
    }

    public void setDecisionsMadeOnRequest(ArrayList<RequestHistoryModel> decisionsMadeOnRequest) {
        this.decisionsMadeOnRequest = decisionsMadeOnRequest;
    }

    public EmployeeManage getEmployeeManager() {
        return employeeManager;
    }

    public void setEmployeeManager(EmployeeManage employeeManager) {
        this.employeeManager = employeeManager;
    }

    public ArrayList<Option> getRequestListsHistory() {
        return requestListsHistory;
    }

    public void setRequestListsHistory(ArrayList<Option> requestListsHistory) {
        this.requestListsHistory = requestListsHistory;
    }

    public ArrayList<Option> getRequestListsToBeApproved() {
        return requestListsToBeApproved;
    }

    public void setRequestListsToBeApproved(ArrayList<Option> requestListsToBeApproved) {
        this.requestListsToBeApproved = requestListsToBeApproved;
    }

    public DefaultSelectedData getSelectedRequestByEmployee() {
        return selectedRequestByEmployee;
    }

    public void setSelectedRequestByEmployee(DefaultSelectedData selectedRequestByEmployee) {
        this.selectedRequestByEmployee = selectedRequestByEmployee;
    }

    public DefaultSelectedData getSelectedRequestFromHistoryList() {
        return selectedRequestFromHistoryList;
    }

    public void setSelectedRequestFromHistoryList(DefaultSelectedData selectedRequestFromHistoryList) {
        this.selectedRequestFromHistoryList = selectedRequestFromHistoryList;
    }

    public DefaultSelectedData getSelectedRequestFromApprovableList() {
        return selectedRequestFromApprovableList;
    }

    public void setSelectedRequestFromApprovableList(DefaultSelectedData selectedRequestFromApprovableList) {
        this.selectedRequestFromApprovableList = selectedRequestFromApprovableList;
    }

    public int get__placeholder() {
        return __placeholder;
    }

    public void set__placeholder(int __placeholder) {
        this.__placeholder = __placeholder;
    }

    public ArrayList<Option> getAvailableDecisionsToMakeList() {
        return availableDecisionsToMakeList;
    }

    public void setAvailableDecisionsToMakeList(ArrayList<Option> availableDecisionsToMakeList) {
        this.availableDecisionsToMakeList = availableDecisionsToMakeList;
    }

    public DefaultSelectedData getSelectedObjectOneMenuDecisionType() {
        return selectedObjectOneMenuDecisionType;
    }

    public void setSelectedObjectOneMenuDecisionType(DefaultSelectedData selectedObjectOneMenuDecisionType) {
        this.selectedObjectOneMenuDecisionType = selectedObjectOneMenuDecisionType;
    }
    private HtmlInputText txtDeciderDepartment = new HtmlInputText();

    public HtmlInputText getTxtDeciderDepartment() {
        return txtDeciderDepartment;
    }

    public void setTxtDeciderDepartment(HtmlInputText hit) {
        this.txtDeciderDepartment = hit;
    }
    private HtmlInputText txtDeciderId = new HtmlInputText();

    public HtmlInputText getTxtDeciderId() {
        return txtDeciderId;
    }

    public void setTxtDeciderId(HtmlInputText hit) {
        this.txtDeciderId = hit;
    }
    private HtmlInputTextarea txtaDeciderCommen1 = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaDeciderCommen1() {
        return txtaDeciderCommen1;
    }

    public void setTxtaDeciderCommen1(HtmlInputTextarea hit) {
        this.txtaDeciderCommen1 = hit;
    }
    private PanelLayout pnProfile = new PanelLayout();

    public PanelLayout getPnProfile() {
        return pnProfile;
    }

    public void setPnProfile(PanelLayout pl) {
        this.pnProfile = pl;
    }
    private HtmlPanelGroup pnlGrpPowerDeligationContent = new HtmlPanelGroup();

    public HtmlPanelGroup getPnlGrpPowerDeligationContent() {
        return pnlGrpPowerDeligationContent;
    }
    private PanelPopup pnlPopupViewPrevieousDecisions = new PanelPopup();

    public String getAppliedDate() {
        return appliedDate;
    }

    public void setAppliedDate(String appliedDate) {
        this.appliedDate = appliedDate;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getDocReferenceNumber() {
        return docReferenceNumber;
    }

    public void setDocReferenceNumber(String docReferenceNumber) {
        this.docReferenceNumber = docReferenceNumber;
    }

    public DocumentApproveManager getDocumentApproveManager() {
        return documentApproveManager;
    }

    public void setDocumentApproveManager(DocumentApproveManager documentApproveManager) {
        this.documentApproveManager = documentApproveManager;
    }

    public String getDocumentCatagory() {
        return documentCatagory;
    }

    public void setDocumentCatagory(String documentCatagory) {
        this.documentCatagory = documentCatagory;
    }

    public int getDocumentRequestId() {
        return documentRequestId;
    }

    public void setDocumentRequestId(int documentRequestId) {
        this.documentRequestId = documentRequestId;
    }

    public DocumentRequestManager getDocumentRequestManager() {
        return documentRequestManager;
    }

    public void setDocumentRequestManager(DocumentRequestManager documentRequestManager) {
        this.documentRequestManager = documentRequestManager;
    }

    public String getIssueDate() {
        return issueDate;
    }

    public void setIssueDate(String issueDate) {
        this.issueDate = issueDate;
    }

    public String getLoggedInEmployeeId() {
        return loggedInEmployeeId;
    }

    public void setLoggedInEmployeeId(String loggedInEmployeeId) {
        this.loggedInEmployeeId = loggedInEmployeeId;
    }

    public PanelPopup getPnlPopupViewPrevieousDecisions() {
        return pnlPopupViewPrevieousDecisions;
    }

    public void setPnlPopupViewPrevieousDecisions(PanelPopup pnlPopupViewPrevieousDecisions) {
        this.pnlPopupViewPrevieousDecisions = pnlPopupViewPrevieousDecisions;
    }

    public String getReason() {
        return reason;
    }

    public void setReason(String reason) {
        this.reason = reason;
    }

    public String getRequesterId() {
        return requesterId;
    }

    public void setRequesterId(String requesterId) {
        this.requesterId = requesterId;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }
    private HtmlOutputLabel lblSuccessOrErrorMessage = new HtmlOutputLabel();
    private PanelLayout pnlMessageBody = new PanelLayout();
    private HtmlPanelGroup panelGroupMessage = new HtmlPanelGroup();
    private PanelPopup pnlPopupSuccessOrFailure = new PanelPopup();

    public HtmlOutputLabel getLblSuccessOrErrorMessage() {
        return lblSuccessOrErrorMessage;
    }

    public void setLblSuccessOrErrorMessage(HtmlOutputLabel lblSuccessOrErrorMessage) {
        this.lblSuccessOrErrorMessage = lblSuccessOrErrorMessage;
    }

    public HtmlPanelGroup getPanelGroupMessage() {
        return panelGroupMessage;
    }

    public void setPanelGroupMessage(HtmlPanelGroup panelGroupMessage) {
        this.panelGroupMessage = panelGroupMessage;
    }

    public PanelLayout getPnlMessageBody() {
        return pnlMessageBody;
    }

    public void setPnlMessageBody(PanelLayout pnlMessageBody) {
        this.pnlMessageBody = pnlMessageBody;
    }

    public PanelPopup getPnlPopupSuccessOrFailure() {
        return pnlPopupSuccessOrFailure;
    }

    public void setPnlPopupSuccessOrFailure(PanelPopup pnlPopupSuccessOrFailure) {
        this.pnlPopupSuccessOrFailure = pnlPopupSuccessOrFailure;
    }

    public void setPnlGrpPowerDeligationContent(HtmlPanelGroup hpg) {
        this.pnlGrpPowerDeligationContent = hpg;
    }
    private HtmlSelectOneMenu drlDecision = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlDecision() {
        return drlDecision;
    }

    public void setDrlDecision(HtmlSelectOneMenu hsom) {
        this.drlDecision = hsom;
    }
    private HtmlInputTextarea txtaDeciderComment = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaDeciderComment() {
        return txtaDeciderComment;
    }

    public void setTxtaDeciderComment(HtmlInputTextarea hit) {
        this.txtaDeciderComment = hit;
    }
    private HtmlInputText txtRequesterDepartment = new HtmlInputText();

    public HtmlInputText getTxtRequesterDepartment() {
        return txtRequesterDepartment;
    }

    public void setTxtRequesterDepartment(HtmlInputText hit) {
        this.txtRequesterDepartment = hit;
    }
    private HtmlInputText txtRequesterId = new HtmlInputText();

    public HtmlInputText getTxtRequesterId() {
        return txtRequesterId;
    }

    public void setTxtRequesterId(HtmlInputText hit) {
        this.txtRequesterId = hit;
    }
    private HtmlInputText txtRequesterFullName = new HtmlInputText();

    public HtmlInputText getTxtRequesterFullName() {
        return txtRequesterFullName;
    }

    public void setTxtRequesterFullName(HtmlInputText hit) {
        this.txtRequesterFullName = hit;
    }
    private HtmlInputText txtRequesterPosition = new HtmlInputText();

    public HtmlInputText getTxtRequesterPosition() {
        return txtRequesterPosition;
    }

    public void setTxtRequesterPosition(HtmlInputText hit) {
        this.txtRequesterPosition = hit;
    }
    private HtmlSelectOneMenu drlDocumentCatagory = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlDocumentCatagory() {
        return drlDocumentCatagory;
    }

    public void setDrlDocumentCatagory(HtmlSelectOneMenu hsom) {
        this.drlDocumentCatagory = hsom;
    }
    private HtmlInputText txtAppliedDate = new HtmlInputText();

    public HtmlInputText getTxtAppliedDate() {
        return txtAppliedDate;
    }

    public void setTxtAppliedDate(HtmlInputText hit) {
        this.txtAppliedDate = hit;
    }
    private HtmlInputText txtDocReferenceNumber = new HtmlInputText();

    public HtmlInputText getTxtDocReferenceNumber() {
        return txtDocReferenceNumber;
    }

    public void setTxtDocReferenceNumber(HtmlInputText hit) {
        this.txtDocReferenceNumber = hit;
    }
    private HtmlInputText txtIsueeDate = new HtmlInputText();

    public HtmlInputText getTxtIsueeDate() {
        return txtIsueeDate;
    }

    public void setTxtIsueeDate(HtmlInputText hit) {
        this.txtIsueeDate = hit;
    }
    private HtmlInputTextarea txtaReason = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaReason() {
        return txtaReason;
    }

    public void setTxtaReason(HtmlInputTextarea hit) {
        this.txtaReason = hit;
    }
    private HtmlInputTextarea txtaDescription = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaDescription() {
        return txtaDescription;
    }

    public void setTxtaDescription(HtmlInputTextarea hit) {
        this.txtaDescription = hit;
    }
    private HtmlCommandButton btnPostDecision = new HtmlCommandButton();

    public HtmlCommandButton getBtnPostDecision() {
        return btnPostDecision;
    }

    public void setBtnPostDecision(HtmlCommandButton hcb) {
        this.btnPostDecision = hcb;
    }
    private HtmlCommandLink lnkViewPrevieousDecisions = new HtmlCommandLink();

    public HtmlCommandLink getLnkViewPrevieousDecisions() {
        return lnkViewPrevieousDecisions;
    }

    public void setLnkViewPrevieousDecisions(HtmlCommandLink hcl) {
        this.lnkViewPrevieousDecisions = hcl;
    }
    private HtmlDataTable dataTableEmpHistory = new HtmlDataTable();

    public HtmlDataTable getDataTableEmpHistory() {
        return dataTableEmpHistory;
    }

    public void setDataTableEmpHistory(HtmlDataTable hdt) {
        this.dataTableEmpHistory = hdt;
    }
    private PanelPopup pnlPopupViewEmployees_History = new PanelPopup();

    public PanelPopup getPnlPopupViewEmployees_History() {
        return pnlPopupViewEmployees_History;
    }

    public void setPnlPopupViewEmployees_History(PanelPopup pp) {
        this.pnlPopupViewEmployees_History = pp;
    }
    private PanelPopup pnlPopupExterBordy = new PanelPopup();

    public PanelPopup getPnlPopupExterBordy_History() {
        return pnlPopupExterBordy;
    }

    public void setPnlPopupExterBordy_History(PanelPopup pp) {
        this.pnlPopupExterBordy = pp;
    }
    private DefaultSelectedData selectOneRadio1Bean = new DefaultSelectedData();

    public DefaultSelectedData getSelectOneRadio1Bean() {
        return selectOneRadio1Bean;
    }

    public void setSelectOneRadio1Bean(DefaultSelectedData dsd) {
        this.selectOneRadio1Bean = dsd;
    }
    private DefaultSelectionItems selectOneRadio1DefaultItems = new DefaultSelectionItems();

    public DefaultSelectionItems getSelectOneRadio1DefaultItems() {
        return selectOneRadio1DefaultItems;
    }

    public void setSelectOneRadio1DefaultItems(DefaultSelectionItems dsi) {
        this.selectOneRadio1DefaultItems = dsi;
    }
    private PanelPopup pnlPopupDocReturn = new PanelPopup();

    public PanelPopup getPnlPopupDocReturn() {
        return pnlPopupDocReturn;
    }

    public void setPnlPopupDocReturn(PanelPopup pp) {
        this.pnlPopupDocReturn = pp;
    }
    private HtmlSelectOneRadio selectOneRadioDocReturn = new HtmlSelectOneRadio();

    public HtmlSelectOneRadio getSelectOneRadioDocReturn() {
        return selectOneRadioDocReturn;
    }

    public void setSelectOneRadioDocReturn(HtmlSelectOneRadio hsor) {
        this.selectOneRadioDocReturn = hsor;
    }

    // </editor-fold>
    /**
     * <p>Construct a new Page bean instance.</p>
     */
    public DocumentApprovePage() {
    }

    /**
     * <p>Callback method that is called whenever a page is navigated to,
     * either directly via a URL, or indirectly via page navigation.
     * Customize this method to acquire resources that will be needed
     * for event handlers and lifecycle methods, whether or not this
     * page is performing post back processing.</p>
     *
     * <p>Note that, if the current request is a postback, the property
     * values of the components do <strong>not</strong> represent any
     * values submitted with this request.  Instead, they represent the
     * property values that were saved for this view when it was rendered.</p>
     */
    public void init() {
        // Perform initializations inherited from our superclass
        super.init();
        // Perform application initialization that must complete
        // *before* managed components are initialized
        // TODO - add your own initialiation code here

        // <editor-fold defaultstate="collapsed" desc="Managed Component Initialization">
        // Initialize automatically managed components
        // *Note* - this logic should NOT be modified
        try {
            _init();
        } catch (Exception e) {
            log("Page1 Initialization Failure", e);
            throw e instanceof FacesException ? (FacesException) e : new FacesException(e);
        }

    // </editor-fold>
    // Perform application initialization that must complete
    // *after* managed components are initialized
    // TODO - add your own initialization code here
    }

    /**
     * <p>Callback method that is called after the component tree has been
     * restored, but before any event processing takes place.  This method
     * will <strong>only</strong> be called on a postback request that
     * is processing a form submit.  Customize this method to allocate
     * resources that will be required in your event handlers.</p>
     */
    public void preprocess() {
    }

    /**
     * <p>Callback method that is called just before rendering takes place.
     * This method will <strong>only</strong> be called for the page that
     * will actually be rendered (and not, for example, on a page that
     * handled a postback and then navigated to a different page).  Customize
     * this method to allocate resources that will be required for rendering
     * this page.</p>
     */
    public void prerender() {
    }

    /**
     * <p>Callback method that is called after rendering is completed for
     * this request, if <code>init()</code> was called (regardless of whether
     * or not this was the page that was actually rendered).  Customize this
     * method to release resources acquired in the <code>init()</code>,
     * <code>preprocess()</code>, or <code>prerender()</code> methods (or
     * acquired during execution of an event handler).</p>
     */
    public void destroy() {
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected ApplicationBean1 getApplicationBean1() {
        return (ApplicationBean1) getBean("ApplicationBean1");
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected RequestBean1 getRequestBean1() {
        return (RequestBean1) getBean("RequestBean1");
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected SessionBean1 getSessionBean1() {
        return (SessionBean1) getBean("SessionBean1");
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected CustomValidations getCustomValidations() {
        return (CustomValidations) getBean("CustomValidations");
    }

    public void drlDecision_processValueChange(ValueChangeEvent vce) {
    }

    private void clearRequesterTextComponenets() {
        requesterId = null;
        txtRequesterDepartment.setValue(null);
        txtRequesterFullName.setValue(null);
        txtRequesterId.setValue(null);
        txtRequesterPosition.setValue(null);
    }

    private void clearDecisionComponenets() {
        drlDecision.resetValue();
        drlDecision.setValue("");
        txtaDeciderComment.setValue(null);
    }

    private void clearDocumentRequestComponenets() {
        documentRequestId = -1;
        txtAppliedDate.setValue(null);
        txtaReason.setValue(null);
        txtAppliedDate.setValue(null);
        txtIsueeDate.setValue(null);
        txtaDescription.setValue(null);
        txtDocReferenceNumber.setValue(null);
        drlDecision.resetValue();
    }

    private void clearAllComponenets() {
        clearDocumentRequestComponenets();
        clearRequesterTextComponenets();
        clearDecisionComponenets();
    }

    private boolean validateDecision() {
        if (drlDecision.getValue().toString().equals(DocumentApproveManager.DOCUMENT_DECISION_NONE)) {
            showSuccessOrFailureMessage(false, "SELECT DECISION FIRST");
            return false;
        } else if (drlDecision.getValue().toString().equals(DocumentApproveManager.DOCUMENT_DECISION_REJECT) && (txtaDeciderComment.getValue() == null || txtaDeciderComment.getValue().toString().equals(""))) {
            showSuccessOrFailureMessage(false, "TO REJECT, YOU NEED TO SUPPLY COMMENT");
            return false;
        } else if (documentRequestId == -1) {
            showSuccessOrFailureMessage(false, "FIRST SELECT THE DOCUMENT REQUEST TO DECIDE");
            return false;
        }
        return true;
    }

    public boolean saveLeaveDecision() {
        String comment = txtaDeciderComment.getValue() == null ? "" : txtaDeciderComment.getValue().toString();
        return documentApproveManager.saveLeaveDecision(documentRequestId, txtDeciderId.getValue().toString(), drlDecision.getValue().toString(), status, comment);
    }

    public String btnPostDecision_action() {
        if (validateDecision()) {
            if (saveLeaveDecision()) {//if succedded
                btnPostDecision.setDisabled(true);
                clearAllComponenets();
                requestListsToBeApproved = documentApproveManager.getRequestsToBeProcessed();
                requestListsHistory = documentApproveManager.getProcessedRequestsHistory();
                showSuccessOrFailureMessage(true, "SAVING SUCCESSFUL");
            } else {//if failed
                showSuccessOrFailureMessage(false, "SAVING FAILED");
            }
        }
        return null;
    }

    public String txtDeligateeId_action() {
        //return null means stay on the same page
        return null;
    }

    private boolean populateApproverTextComponents(String approverId) {
        HashMap empInfoHashMap = employeeManager.readEmployeeBasicInfo(approverId);
        if (empInfoHashMap != null) {
            if (empInfoHashMap.get("employeeId").toString().equals("")) {//if no resultset found
                approverId = null;
                showSuccessOrFailureMessage(false, "NO EMPLOYEE FOUND WITH ID : " + approverId);
                txtDeciderId.setDisabled(false);
                return false;
            } else {
                approverId = empInfoHashMap.get("employeeId").toString();
                txtDeciderDepartment.setValue(empInfoHashMap.get("employeeDepartmentPath"));
                txtDeciderFullName.setValue(empInfoHashMap.get("employeeFullName"));
                txtDeciderId.setValue(empInfoHashMap.get("employeeId"));
                txtDeciderPosition.setValue(empInfoHashMap.get("employeePosition"));

                return true;
            }
        } else {
            showSuccessOrFailureMessage(false, "EXCEPTION OCCURED");
            return false;
        }
    }

    private void populateRequesterTextComponents(String employeeId) {
        HashMap empInfoHashMap = employeeManager.readEmployeeBasicInfo(employeeId);
        if (empInfoHashMap != null) {
            if (empInfoHashMap.get("employeeId").toString().equals("")) {//if no resultset found
                requesterId = null;
                showSuccessOrFailureMessage(false, "NO EMPLOYEE FOUND WITH ID : " + employeeId);
            } else {
                requesterId = empInfoHashMap.get("employeeId").toString();
                txtRequesterDepartment.setValue(empInfoHashMap.get("employeeDepartmentPath"));
                txtRequesterFullName.setValue(empInfoHashMap.get("employeeFullName"));
                txtRequesterId.setValue(empInfoHashMap.get("employeeId"));
                txtRequesterPosition.setValue(empInfoHashMap.get("employeePosition"));
            }
        } else {
            showSuccessOrFailureMessage(false, "EXCEPTION OCCURED");
        }
    }

    private void populateRequestComponents(int documentRequestId) {
        DocumentRequestModel requestModel = documentRequestManager.getDocumentRequest(documentRequestId);
        if (requestModel != null) {
            if (requestModel.getDocumentRequestId() == -1) {//if no resultset found
                documentRequestId = -1;
                showSuccessOrFailureMessage(false, "NO DATA FOUND WITH ID : " + documentRequestId);
            } else {
                txtAppliedDate.setValue(requestModel.getAppliedDate());
                txtIsueeDate.setValue(requestModel.getIssueDate());
                drlDocumentCatagory.setValue(requestModel.getDocumentCatagory());
                txtaDescription.setValue(requestModel.getDescription());
                txtaReason.setValue(requestModel.getReason());
                txtDocReferenceNumber.setValue(requestModel.getDocReferenceNumber());
            }
        } else {
            showSuccessOrFailureMessage(false, "EXCEPTION OCCURED");
        }
    }

    private void disableDecisionButtons() {
        btnPostDecision.setDisabled(true);
    }

    private void enableDecisionButtons() {
        btnPostDecision.setDisabled(false);
    }

    public void showSuccessOrFailureMessage(boolean success, String messageToDisplay) {
        lblSuccessOrErrorMessage.setStyle(success ? "color: green; font-size: 12px; font-weight: bold;text-align: center; vertical-align: middle" : "color: red; font-size: 12px; font-weight: bold;text-align: center; vertical-align: middle");
        lblSuccessOrErrorMessage.setValue(messageToDisplay);
        lblSuccessOrErrorMessage.setVisible(true);
        pnlPopupSuccessOrFailure.setAutoCentre(true);
        pnlPopupSuccessOrFailure.setRendered(true);
        String val = "message";
        String fadeTime = (success ? "3000" : "8000");
        String javaScriptText = "$j(document).ready(function(){ $j('." + val + "').show();" +
                " $j('." + val + "').fadeOut(" + fadeTime + ");" + "});";
        JavascriptContext.addJavascriptCall(FacesContext.getCurrentInstance(), javaScriptText);
    }

    public String btnReset_action() {
        enableDecisionButtons();
        clearAllComponenets();
        selectedRequestFromApprovableList.setSelectedObject(null);
        return null;
    }



    public String lnkViewPrevieousDecisions_action() {
        decisionsMadeOnRequest = documentApproveManager.getRequestHistory(documentRequestId);
        pnlPopupViewPrevieousDecisions.setRendered(true);
        return null;
    }

    public String btnCloseViewPreviesDecisions_action() {
        pnlPopupViewPrevieousDecisions.setRendered(false);
        return null;
    }

    public void selectHistoryDocRequest_processValueChange(ValueChangeEvent vce) {
        String[] requestInfos = vce.getNewValue().toString().split("--");
        documentRequestId = Integer.parseInt(requestInfos[0]);//
        requesterId = requestInfos[1];
        status = requestInfos[2];
        populateRequesterTextComponents(requesterId);
        populateRequestComponents(documentRequestId);
        btnPostDecision.setDisabled(false);
        lnkViewPrevieousDecisions.setRendered(true);
        disableDecisionButtons();
    }

    public String lnkDocumentRequest_action() {
        return "DocumentRequest";
    }

    public void selectPendingRequestLists_processValueChange(ValueChangeEvent vce) {
        String[] requestInfos = vce.getNewValue().toString().split("--");
        documentRequestId = Integer.parseInt(requestInfos[0]);//
        requesterId = requestInfos[1];
        status = requestInfos[2];
        populateRequesterTextComponents(requesterId);
        populateRequestComponents(documentRequestId);
        btnPostDecision.setDisabled(false);
        availableDecisionsToMakeList = documentApproveManager.getAvailableDecisionsToMake(status);

        if (!status.equals(DocumentApproveManager.INITIAL_STATE_DOCUMENTREQUEST)) {
            decisionsMadeOnRequest = documentApproveManager.getRequestHistory(documentRequestId);
            lnkViewPrevieousDecisions.setRendered(true);
        } else {//it is not processed yet, so it is should not be visible
            lnkViewPrevieousDecisions.setRendered(false);
        }
    }

    /**
     * The button is used to render the pnlPopupViewEmployees_History
     * @return
     */
    public String btnCheckEmpHistory_action() {
        //return null means stay on the same page
        String empId = "";
        if (this.getTxtRequesterId().getValue() != null) {
            empId = this.getTxtRequesterId().getValue().toString();
        }
    //    empExperienceModel = documentApproveManager.getEmpExperienceHistory(empId);
        pnlPopupViewEmployees_History.setRendered(true);
        return null;
    }

    /**
     * @return the empExperienceModel
     */
//    public ArrayList<EmployeeExperienceHistroyModel> getEmpExperienceModel() {
//        return empExperienceModel;
//    }
//
//    /**
//     * @param empExperienceModel the empExperienceModel to set
//     */
//    public void setEmpExperienceModel(ArrayList<EmployeeExperienceHistroyModel> empExperienceModel) {
//        this.empExperienceModel = empExperienceModel;
//    }

    public String btnClosePopupViewPrevieousDecisions1_action() {
        //return null means stay on the same page
        pnlPopupViewEmployees_History.setRendered(false);
        return null;
    }

    public void status_Group_History_processMyEvent(DragEvent de) {
    }

    /**
     * @return the documentReturns
     */
    public ArrayList<Option> getDocumentReturns() {
        return documentReturns;
    }

    /**
     * @param documentReturns the documentReturns to set
     */
    public void setDocumentReturns(ArrayList<Option> documentReturns) {
        this.documentReturns = documentReturns;
    }
    String docReturn;

    public void btnClosePopupViewPrevieousDecisions1s_processAction(ActionEvent ae) {
        this.pnlPopupDocReturn.setRendered(false);
    }

    /**
     * The method updates info about guarantee document when the period expires.
     * Or when the document is returned
     * @return
     */
    public String btnUpdateChenge_action() {
        //return null means stay on the same page
        if (selectOneRadioDocReturn.getValue() != null) {
            docReturn = selectOneRadioDocReturn.getValue().toString();
        }
        if (documentRequestId == -1) {
            showSuccessOrFailureMessage(false, "FIRST SELECT THE DOCUMENT REQUEST TO PROCEED");
        } else {
            if (documentApproveManager.updateDocReturnStatus(docReturn, documentRequestId)) {
                this.pnlPopupDocReturn.setRendered(false);
                showSuccessOrFailureMessage(true, "UPDATE SUCCESSFUL");
            } else {
                showSuccessOrFailureMessage(false, "UPDATE FAILED! ERROR OCCURED");
            }
        }
        return null;
    }

    public String lnkDocumentReturn_action() {
        //return null means stay on the same page
        if (documentRequestId == -1 || !lnkViewPrevieousDecisions.isRendered()) {
            showSuccessOrFailureMessage(false, "FIRST SELECT THE APPROVED DOCUMENT REQUEST TO PROCEED");
        } else {
            if (drlDocumentCatagory.getValue() != null) {
                if (drlDocumentCatagory.getValue().toString().equals("3")) {
                    this.pnlPopupDocReturn.setRendered(true);
                } else {
                    showSuccessOrFailureMessage(false, "THE DOCUMENT MUST BE GUARANTEE DOCUMENT CATEGORY");
                }
            }
        }
        return null;
    }

    public void pnlGrpPowerDeligationContent_processMyEvent(DragEvent de) {
    }
}
