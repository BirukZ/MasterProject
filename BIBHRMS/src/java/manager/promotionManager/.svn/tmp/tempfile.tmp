<<<<<<< .mine
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package manager.promotionManager;

import entity.Promotion.IncrementPayGradeEntity;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import manager.globalUseManager.ErrorLogWriter;
import manager.globalUseManager.GregorianCalendarManipulation;
import manager.globalUseManager.JodanTimeCalender;

/**
 *
 * @author Up
 */
public class IncrementPayGradeManager {

    private String empId;
    private String empName;
    private String deptId;
    private String deptDesc;
    private String hiredDate;
    private String lastIncrementDate;
    private String currentPayGrade;
    private String currentSalary;
    private String nextPayGrade;
    private String nextSalary;
    private String incPercentage;
    private boolean selected;

    public IncrementPayGradeManager() {
    }

    public IncrementPayGradeManager(String empId, String empName, String deptId,
            String deptDesc, String hiredDate, String lastIncrementDate,
            String currentPayGrade, String currentSalary, String nextPayGrade,
            String nextSalary, String incPerc, boolean selected) {
        this.empId = empId;
        this.empName = empName;
        this.deptId = deptId;
        this.deptDesc = deptDesc;
        this.hiredDate = hiredDate;
        this.lastIncrementDate = lastIncrementDate;
        this.currentPayGrade = currentPayGrade;
        this.currentSalary = currentSalary;
        this.nextPayGrade = nextPayGrade;
        this.nextSalary = nextSalary;
        this.incPercentage = incPerc;
        this.selected = selected;
    }
    GregorianCalendarManipulation gregClnd = new GregorianCalendarManipulation();
    IncrementPayGradeEntity incPayGradeEntity = new IncrementPayGradeEntity();
    JodanTimeCalender jodanTimeCalender = new JodanTimeCalender();

    public boolean saveUpdatePayGradeInc(String incDate, String incDesc, ArrayList<IncrementPayGradeManager> incrementPayGradeManagerList) {
        IncrementPayGradeEntity incEntity = null;
        boolean saved = false;
        for (IncrementPayGradeManager inc : incrementPayGradeManagerList) {
            incEntity = new IncrementPayGradeEntity(inc.getEmpId(),
                    inc.getEmpName(), inc.getDeptId(), inc.getDeptDesc(), inc.getHiredDate(), inc.getLastIncrementDate(),
                    inc.getCurrentPayGrade(), inc.getCurrentSalary(), inc.getNextPayGrade(), inc.getNextSalary());
            saved = incPayGradeEntity.saveUpdatePayGradeInc(incDate, incDesc, incEntity);
        }
        return saved;
    }

    /**
     * The method prepares a list of employees that must get a salary increment
     * If the employee works for n months which are less than 12, the salary will be
     * n/12th ofthe initial paygrade times . And upon next increment the salary will
     * be incremented by the difference between the next and previous paygrades
     * @return
     */
    public ArrayList<IncrementPayGradeManager> selectEmpForInc() {
        ArrayList<IncrementPayGradeManager> incrementPaygrade = new ArrayList<IncrementPayGradeManager>();
        double percentage;
        double nextSalery;
        double currentSalary;
        double dayDiff;
        double monthDiff;
        double yearDiff;
        try {
            ArrayList<HashMap> incPaygrade = incPayGradeEntity.getEmployeesForPayGradeInc();

            for (HashMap hm : incPaygrade) {
                String incDate = null;
                String hirdDate = null;

                if (hm.get("hiredDate") != null) {
                    hirdDate = hm.get("hiredDate").toString();
                }
                Calendar hDate = GregorianCalendarManipulation.convertDateToCalendar(hirdDate);
                String currentDate = "2013-07-23";
                        //jodanTimeCalender.currentForeignersDateFinder();
                Calendar cDate = GregorianCalendarManipulation.convertDateToCalendar(currentDate);
                dayDiff = GregorianCalendarManipulation.calaculateDateDifference(hDate, cDate);
                monthDiff = GregorianCalendarManipulation.calaculateMonthDifference(hDate, cDate);
                yearDiff = GregorianCalendarManipulation.calaculateYearDifference(hDate, cDate);
                if (hm.get("lastIncreamentDate") != null) {
                    incDate = hm.get("lastIncreamentDate").toString();
                }
                currentSalary = Double.parseDouble(hm.get("currentSalary").toString());
                nextSalery = Double.parseDouble(hm.get("nextSalary").toString());
                double diffInSalary = nextSalery - currentSalary;
                if (monthDiff == 12) {
                    percentage = 100;
                    nextSalery = Double.parseDouble(hm.get("nextSalary").toString());
                } else if (monthDiff < 12) {
                    //dayDiff = dayDiff - (yearDiff*365.25);
                    percentage = (dayDiff / 360)*100;
                    nextSalery = currentSalary + (diffInSalary * (percentage/100));
      
                } else {
//                    monthDiff = monthDiff - (yearDiff *12);
                    percentage = 10;
                    nextSalery = (Double.parseDouble(hm.get("currentSalary").toString()) + Double.parseDouble(hm.get("currentSalary").toString()) * 0.1);
                }

                incrementPaygrade.add(new IncrementPayGradeManager(
                        hm.get("empId").toString(),
                        hm.get("empName").toString(),
                        hm.get("deptId").toString(),
                        hm.get("deptDesc").toString(),
                        hirdDate,
                        incDate,
                        hm.get("currentPayGrade").toString(),
                        hm.get("currentSalary").toString(),
                        hm.get("nextPayGrade").toString(),
                        String.format("%1g%n", nextSalery),
                        String.valueOf(percentage) + "%", true));
//                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
        }
        return incrementPaygrade;
    }

    /**
     * @return the empId
     */
    public String getEmpId() {
        return empId;
    }

    /**
     * @param empId the empId to set
     */
    public void setEmpId(String empId) {
        this.empId = empId;
    }

    /**
     * @return the empName
     */
    public String getEmpName() {
        return empName;
    }

    /**
     * @param empName the empName to set
     */
    public void setEmpName(String empName) {
        this.empName = empName;
    }

    /**
     * @return the deptId
     */
    public String getDeptId() {
        return deptId;
    }

    /**
     * @param deptId the deptId to set
     */
    public void setDeptId(String deptId) {
        this.deptId = deptId;
    }

    /**
     * @return the deptDesc
     */
    public String getDeptDesc() {
        return deptDesc;
    }

    /**
     * @param deptDesc the deptDesc to set
     */
    public void setDeptDesc(String deptDesc) {
        this.deptDesc = deptDesc;
    }

    /**
     * @return the hiredDate
     */
    public String getHiredDate() {
        return hiredDate;
    }

    /**
     * @param hiredDate the hiredDate to set
     */
    public void setHiredDate(String hiredDate) {
        this.hiredDate = hiredDate;
    }

    /**
     * @return the lastIncrementDate
     */
    public String getLastIncrementDate() {
        return lastIncrementDate;
    }

    /**
     * @param lastIncrementDate the lastIncrementDate to set
     */
    public void setLastIncrementDate(String lastIncrementDate) {
        this.lastIncrementDate = lastIncrementDate;
    }

    /**
     * @return the currentPayGrade
     */
    public String getCurrentPayGrade() {
        return currentPayGrade;
    }

    /**
     * @param currentPayGrade the currentPayGrade to set
     */
    public void setCurrentPayGrade(String currentPayGrade) {
        this.currentPayGrade = currentPayGrade;
    }

    /**
     * @return the currentSalary
     */
    public String getCurrentSalary() {
        return currentSalary;
    }

    /**
     * @param currentSalary the currentSalary to set
     */
    public void setCurrentSalary(String currentSalary) {
        this.currentSalary = currentSalary;
    }

    /**
     * @return the nextPayGrade
     */
    public String getNextPayGrade() {
        return nextPayGrade;
    }

    /**
     * @param nextPayGrade the nextPayGrade to set
     */
    public void setNextPayGrade(String nextPayGrade) {
        this.nextPayGrade = nextPayGrade;
    }

    /**
     * @return the nextSalary
     */
    public String getNextSalary() {
        return nextSalary;
    }

    /**
     * @param nextSalary the nextSalary to set
     */
    public void setNextSalary(String nextSalary) {
        this.nextSalary = nextSalary;
    }

    /**
     * @return the selected
     */
    public boolean isSelected() {
        return selected;
    }

    /**
     * @param selected the selected to set
     */
    public void setSelected(boolean selected) {
        this.selected = selected;
    }

    /**
     * @return the incPercentage
     */
    public String getIncPercentage() {
        return incPercentage;
    }

    /**
     * @param incPercentage the incPercentage to set
     */
    public void setIncPercentage(String incPercentage) {
        this.incPercentage = incPercentage;
    }
}
=======
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package manager.promotionManager;

import entity.Promotion.IncrementPayGradeEntity;
import java.util.ArrayList;
import java.util.HashMap;
import manager.globalUseManager.ErrorLogWriter;

/**
 *
 * @author Up
 */
public class IncrementPayGradeManager {

    private String empId;
    private String empName;
    private String deptId;
    private String deptDesc;
    private String hiredDate;
    private String lastIncrementDate;
    private String currentPayGrade;
    private String currentSalary;
    private String nextPayGrade;
    private String nextSalary;
    private boolean selected;

    public IncrementPayGradeManager() {
    }

    public IncrementPayGradeManager(String empId, String empName, String deptId,
            String deptDesc, String hiredDate, String lastIncrementDate,
            String currentPayGrade, String currentSalary, String nextPayGrade,
            String nextSalary, boolean selected) {
        this.empId = empId;
        this.empName = empName;
        this.deptId = deptId;
        this.deptDesc = deptDesc;
        this.hiredDate = hiredDate;
        this.lastIncrementDate = lastIncrementDate;
        this.currentPayGrade = currentPayGrade;
        this.currentSalary = currentSalary;
        this.nextPayGrade = nextPayGrade;
        this.nextSalary = nextSalary;
        this.selected = selected;
    }
    IncrementPayGradeEntity incPayGradeEntity = new IncrementPayGradeEntity();

    public boolean saveUpdatePayGradeInc(String incDate, String incDesc, ArrayList<IncrementPayGradeManager> incrementPayGradeManagerList) {
        IncrementPayGradeEntity incEntity = null;
        boolean saved = false;
        for (IncrementPayGradeManager inc : incrementPayGradeManagerList) {
            incEntity = new IncrementPayGradeEntity(inc.getEmpId(),
                    inc.getEmpName(), inc.getDeptId(), inc.getDeptDesc(), inc.getHiredDate(), inc.getLastIncrementDate(),
                    inc.getCurrentPayGrade(), inc.getCurrentSalary(), inc.getNextPayGrade(), inc.getNextSalary());
            saved = incPayGradeEntity.saveUpdatePayGradeInc(incDate, incDesc, incEntity);
        }
        return saved;
    }

    public ArrayList<IncrementPayGradeManager> selectEmpForInc() {
        ArrayList<IncrementPayGradeManager> incrementPaygrade = new ArrayList<IncrementPayGradeManager>();
        try {
            ArrayList<HashMap> incPaygrade = incPayGradeEntity.getEmployeesForPayGradeInc();

            for (HashMap hm : incPaygrade) {
                String incDate = null;
                if (hm.get("lastIncreamentDate") != null) {
                    incDate = hm.get("lastIncreamentDate").toString();
                }              
                incrementPaygrade.add(new IncrementPayGradeManager(
                        hm.get("empId").toString(),
                        hm.get("empName").toString(),
                        hm.get("deptId").toString(),
                        hm.get("deptDesc").toString(),
                        hm.get("hiredDate").toString(),
                        incDate,
                        hm.get("currentPayGrade").toString(),
                        hm.get("currentSalary").toString(),
                        hm.get("nextPayGrade").toString(),
                        hm.get("nextSalary").toString(), true));
            }
//            ArrayList<Integer> indexes = new ArrayList<Integer>();
//            for (int i = 1; i < incrementPaygrade.size(); i++) {
//                for (int j = i - 1; j >= 0; j--) {
//                    if (incrementPaygrade.get(i).getEmpId().equals(incrementPaygrade.get(j).getEmpId())) {
////                        incrementPaygrade.remove(i);
//                        indexes.add(j);
//                    }
//                }
//                for (int k = 1; k < indexes.size(); k++) {
//                    incrementPaygrade.remove(indexes.get(k));
//                }
//            }
        } catch (Exception ex) {
            ex.printStackTrace();
            ErrorLogWriter.writeError(ex);
        }
        return incrementPaygrade;
    }

    /**
     * @return the empId
     */
    public String getEmpId() {
        return empId;
    }

    /**
     * @param empId the empId to set
     */
    public void setEmpId(String empId) {
        this.empId = empId;
    }

    /**
     * @return the empName
     */
    public String getEmpName() {
        return empName;
    }

    /**
     * @param empName the empName to set
     */
    public void setEmpName(String empName) {
        this.empName = empName;
    }

    /**
     * @return the deptId
     */
    public String getDeptId() {
        return deptId;
    }

    /**
     * @param deptId the deptId to set
     */
    public void setDeptId(String deptId) {
        this.deptId = deptId;
    }

    /**
     * @return the deptDesc
     */
    public String getDeptDesc() {
        return deptDesc;
    }

    /**
     * @param deptDesc the deptDesc to set
     */
    public void setDeptDesc(String deptDesc) {
        this.deptDesc = deptDesc;
    }

    /**
     * @return the hiredDate
     */
    public String getHiredDate() {
        return hiredDate;
    }

    /**
     * @param hiredDate the hiredDate to set
     */
    public void setHiredDate(String hiredDate) {
        this.hiredDate = hiredDate;
    }

    /**
     * @return the lastIncrementDate
     */
    public String getLastIncrementDate() {
        return lastIncrementDate;
    }

    /**
     * @param lastIncrementDate the lastIncrementDate to set
     */
    public void setLastIncrementDate(String lastIncrementDate) {
        this.lastIncrementDate = lastIncrementDate;
    }

    /**
     * @return the currentPayGrade
     */
    public String getCurrentPayGrade() {
        return currentPayGrade;
    }

    /**
     * @param currentPayGrade the currentPayGrade to set
     */
    public void setCurrentPayGrade(String currentPayGrade) {
        this.currentPayGrade = currentPayGrade;
    }

    /**
     * @return the currentSalary
     */
    public String getCurrentSalary() {
        return currentSalary;
    }

    /**
     * @param currentSalary the currentSalary to set
     */
    public void setCurrentSalary(String currentSalary) {
        this.currentSalary = currentSalary;
    }

    /**
     * @return the nextPayGrade
     */
    public String getNextPayGrade() {
        return nextPayGrade;
    }

    /**
     * @param nextPayGrade the nextPayGrade to set
     */
    public void setNextPayGrade(String nextPayGrade) {
        this.nextPayGrade = nextPayGrade;
    }

    /**
     * @return the nextSalary
     */
    public String getNextSalary() {
        return nextSalary;
    }

    /**
     * @param nextSalary the nextSalary to set
     */
    public void setNextSalary(String nextSalary) {
        this.nextSalary = nextSalary;
    }

    /**
     * @return the selected
     */
    public boolean isSelected() {
        return selected;
    }

    /**
     * @param selected the selected to set
     */
    public void setSelected(boolean selected) {
        this.selected = selected;
    }
}
>>>>>>> .r1379
