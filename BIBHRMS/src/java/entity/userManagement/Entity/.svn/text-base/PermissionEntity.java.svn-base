/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package entity.userManagement.Entity;

import connectionProvider.ConnectionManager;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import oracle.jdbc.rowset.OracleCachedRowSet;

/**
 *
 * @author tamrat
 */
public class PermissionEntity
extends ConnectionManager implements Serializable {


    Connection _con = null;
    ResultSet _rs = null;
    PreparedStatement _ps = null;

    public void releaseResources() throws SQLException {
        if (_rs != null) {
            _rs.close();
        }
        if (_ps != null) {
            _ps.close();
        }
        if (_con != null) {
            closePooledConnections(_con);
        }
    }
    private int code;
    private String permissionName;
    private String permissionDescription;

    public PermissionEntity() {
    }

    public PermissionEntity(int code) {
        this.code = code;
    }

    public PermissionEntity(int code, String permissionName, String permissionDescription) {
        this.code = code;
        this.permissionName = permissionName;
        this.permissionDescription = permissionDescription;
    }

    public PermissionEntity(String permissionName, String permissionDescription) {
        this.permissionName = permissionName;
        this.permissionDescription = permissionDescription;
    }

    public int getCode() {
        return code;
    }

    public void setCode(int code) {
        this.code = code;
    }

    public String getPermissionName() {
        return permissionName;
    }

    public void setPermissionName(String permissionName) {
        this.permissionName = permissionName;
    }

    public String getPermissionDescription() {
        return permissionDescription;
    }

    public void setPermissionDescription(String permissionDescription) {
        this.permissionDescription = permissionDescription;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (permissionDescription != null ? permissionDescription.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof PermissionEntity)) {
            return false;
        }
        PermissionEntity other = (PermissionEntity) object;
        if ((this.permissionDescription == null && other.permissionDescription != null) || (this.permissionDescription != null && !this.permissionDescription.equals(other.permissionDescription))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "smmsEntity.Permission[permissionDescription=" + permissionDescription + "]";
    }

    /**
     * Adds a row into tbl_permission using name and description
     * (Note: the caller should set name and description before calling
     * this method)
     * @return returns <b>true</b> object on successful completion
     * of the method, <b>false</b> otherwise
     */
    public int insert(String _name, String _desc) throws SQLException {
        //get hash value of the password and insert it
        String _insert = "INSERT INTO mugher.TBL_PERMISSION(CODE,PERMISSION_NAME, PERMISSION_DESCRIPTION) " +
                " VALUES(mugher.TBL_PERMISSION_SEQ.NEXTVAL,'" + _name + "', '" + _desc + "') ";
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_insert);
            return _ps.executeUpdate();
        } catch (Exception ex) {
            ex.printStackTrace();
            return 0;
        } finally {
            releaseResources();
        }
    }

    /**
     * Updates row in tbl_permission identified by code
     * (Note: the caller must set name before calling this method)
     * @return returns <b>true</b> object on successful completion
     * of the method, <b>false</b> otherwise
     */
    public boolean update() throws SQLException {
        String _update = "UPDATE mugher.tbl_permission SET permission_name=?" +
                ", permission_description = ? WHERE code = ? ";
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_update);
            _ps.setString(1, getPermissionName());
            _ps.setString(2, getPermissionDescription());
            _ps.setInt(3, getCode());
            _ps.executeUpdate();
            return true;
        } finally {
            releaseResources();
        }
    }

    /**
     * Removes a row from tbl_permission identified by code
     * (Note: the caller should set name before calling
     * this method)
     * @return returns <b>true</b> object on successful completion
     * of the method, <b>false</b> otherwise
     */
    public boolean delete() throws SQLException {
 String _delete = "DELETE FROM mugher.tbl_permission WHERE code = ? ";
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_delete);
            _ps.setInt(1, getCode());
            _ps.executeUpdate();
            return true;
        } finally {
            releaseResources();
        }

    }


    /**
     * Fetches all rows from tbl_permission
     * @return returns <b>ResultSet</b> object on successful completion
     * @throws java.sql.SQLException
     */
    public ResultSet selectPermissions() throws SQLException {
        String _select = "SELECT code, permission_name FROM mugher.tbl_permission" +
                " order by nlssort(permission_name,'NLS_SORT=BINARY_CI')";
    try {
            _con = getConnection();
            _ps = _con.prepareStatement(_select);//, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            _rs = _ps.executeQuery();
            OracleCachedRowSet ocrs = new OracleCachedRowSet();
            ocrs.populate(_rs);
            _rs.close();
            return (ResultSet) ocrs;

        } finally {
            releaseResources();
        }
    }

    /**
     * Fetches all rows from tbl_permission
     * @return returns <b>ResultSet</b> object on successful completion
     * @throws java.sql.SQLException
     */
    public ResultSet selectPermissions(int code) throws SQLException {
        String _select = "SELECT code, permission_name FROM mugher.tbl_permission " +
                " WHERE code=?";
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_select);//, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            _ps.setInt(1, code);
            _rs = _ps.executeQuery();
            OracleCachedRowSet ocrs = new OracleCachedRowSet();
            ocrs.populate(_rs);
            _rs.close();
            return (ResultSet) ocrs;
        } finally {
            releaseResources();
        }
    }
}
