/*
 * Page1.java
 *
 * Created on Feb 26, 2010, 7:48:31 AM
 * Copyright DavePro
 */
package fphrms.EmployeeHistory;

import com.icesoft.faces.component.dragdrop.DragEvent;
import com.icesoft.faces.component.ext.HtmlCommandButton;
import com.icesoft.faces.component.ext.HtmlGraphicImage;
import com.icesoft.faces.component.ext.HtmlInputText;
import com.icesoft.faces.component.ext.HtmlInputTextarea;
import com.icesoft.faces.component.ext.HtmlOutputText;
import com.icesoft.faces.component.ext.HtmlOutputLabel;
import com.icesoft.faces.component.ext.HtmlSelectBooleanCheckbox;
import com.icesoft.faces.component.ext.HtmlSelectOneListbox;
import com.icesoft.faces.component.jsfcl.data.DefaultSelectedData;
import com.icesoft.faces.component.jsfcl.data.DefaultSelectionItems;
import com.icesoft.faces.component.panelcollapsible.PanelCollapsible;
import com.sun.rave.faces.data.DefaultSelectItemsArray;
import fphrms.*;
import com.icesoft.faces.component.jsfcl.data.BorderLayoutBean;
import com.icesoft.faces.component.panelpopup.PanelPopup;
import com.icesoft.faces.context.effects.JavascriptContext;
import com.sun.rave.web.ui.appbase.AbstractPageBean;
import java.util.HashMap;
import javax.faces.FacesException;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.event.ActionListener;
import javax.faces.event.ValueChangeEvent;
import manager.employeeManager.EmployeeManage;
import java.util.ArrayList;
import javax.faces.model.SelectItem;
import manager.employeeHistoryManager.ReturntoJobManager;
import manager.leaveManager.LeaveControl;
import oracle.jdbc.rowset.OracleSerialBlob;

/**
 * <p>Page bean that corresponds to a similarly named JSP page.  This
 * class contains component definitions (and initialization code) for
 * all components that you have defined on this page, as well as
 * lifecycle methods and event handlers where you may add behavior
 * to respond to incoming events.</p>
 */
public class ReturnJobPage extends AbstractPageBean {

    private String sex;
    private String empStatus;
    EmployeeManage employeeManager = new EmployeeManage();
    ReturntoJobManager returntoJobManager = new ReturntoJobManager();
    private PanelPopup pnMessage = new PanelPopup();
    private LeaveControl leaveManager = new LeaveControl();
    private ArrayList<SelectItem> employeesOnLeave = new ArrayList<SelectItem>();
    private ArrayList<SelectItem> employeesNotReturnOnTime = new ArrayList<SelectItem>();
    private byte[] employeePicture;

    public byte[] getEmployeePicture() {
        return employeePicture;
    }

    public void setEmployeePicture(byte[] employeePicture) {
        this.employeePicture = employeePicture;
    }

    public ArrayList<SelectItem> getEmployeesNotReturnOnTime() {
        return employeesNotReturnOnTime;
    }

    public void setEmployeesNotReturnOnTime(ArrayList<SelectItem> employeesNotReturnOnTime) {
        this.employeesNotReturnOnTime = employeesNotReturnOnTime;
    }

    public ArrayList<SelectItem> getEmployeesOnLeave() {
        return employeesOnLeave;
    }

    public void setEmployeesOnLeave(ArrayList<SelectItem> employeesOnLeave) {
        this.employeesOnLeave = employeesOnLeave;
    }
    // <editor-fold defaultstate="collapsed" desc="Local Variables">
    private int __placeholder;

    /**
     * <p>Automatically managed component initialization.  <strong>WARNING:</strong>
     * This method is automatically generated, so any user-specified code inserted
     * here is subject to being replaced.</p>
     */
    private void _init() throws Exception {
        pnl_col_Status.addActionListener(new ActionListener() {

            public void processAction(ActionEvent ae) {
                pnl_col_Status_processAction(ae);
            }
        });
        panelCollapsible1.addActionListener(new ActionListener() {

            public void processAction(ActionEvent ae) {
                panelCollapsible1_processAction(ae);
            }
        });
    }

    public PanelPopup getPnMessage() {
        return pnMessage;
    }
    private HtmlOutputLabel lblFormMessage1 = new HtmlOutputLabel();

    public HtmlOutputLabel getLblFormMessage1() {
        return lblFormMessage1;
    }

    public void setLblFormMessage1(HtmlOutputLabel hol) {
        this.lblFormMessage1 = hol;
    }

    public void setPnMessage(PanelPopup pp) {
        this.pnMessage = pp;
    }
    private BorderLayoutBean panelBorder1Bean = new BorderLayoutBean();

    public BorderLayoutBean getPanelBorder1Bean() {
        return panelBorder1Bean;
    }

    public void setPanelBorder1Bean(BorderLayoutBean blb) {
        this.panelBorder1Bean = blb;
    }
    private HtmlInputText txtEmployeeID = new HtmlInputText();

    public HtmlInputText getTxtEmployeeID() {
        return txtEmployeeID;
    }

    public void setTxtEmployeeID(HtmlInputText hit) {
        this.txtEmployeeID = hit;
    }
    private HtmlOutputText lblFull_Name = new HtmlOutputText();

    public HtmlOutputText getLblFull_Name() {
        return lblFull_Name;
    }

    public void setLblFull_Name(HtmlOutputText hot) {
        this.lblFull_Name = hot;
    }
    private HtmlOutputText lblDepartment = new HtmlOutputText();

    public HtmlOutputText getLblDepartment() {
        return lblDepartment;
    }

    public void setLblDepartment(HtmlOutputText hot) {
        this.lblDepartment = hot;
    }
    private HtmlOutputText lblPosition = new HtmlOutputText();

    public HtmlOutputText getLblPosition() {
        return lblPosition;
    }

    public void setLblPosition(HtmlOutputText hot) {
        this.lblPosition = hot;
    }
    private HtmlSelectBooleanCheckbox chkMale = new HtmlSelectBooleanCheckbox();

    public HtmlSelectBooleanCheckbox getChkMale() {
        return chkMale;
    }

    public void setChkMale(HtmlSelectBooleanCheckbox hsbc) {
        this.chkMale = hsbc;
    }
    private HtmlSelectBooleanCheckbox chkFemale = new HtmlSelectBooleanCheckbox();

    public HtmlSelectBooleanCheckbox getChkFemale() {
        return chkFemale;
    }

    public void setChkFemale(HtmlSelectBooleanCheckbox hsbc) {
        this.chkFemale = hsbc;
    }
    private HtmlOutputText outputText2 = new HtmlOutputText();

    public HtmlOutputText getOutputText2() {
        return outputText2;
    }

    public void setOutputText2(HtmlOutputText hot) {
        this.outputText2 = hot;
    }
    private HtmlOutputText outputText3 = new HtmlOutputText();

    public HtmlOutputText getOutputText3() {
        return outputText3;
    }

    public void setOutputText3(HtmlOutputText hot) {
        this.outputText3 = hot;
    }
    private HtmlOutputText lblLeaveStartDateDis = new HtmlOutputText();

    public HtmlOutputText getLblLeaveStartDateDis() {
        return lblLeaveStartDateDis;
    }

    public void setLblLeaveStartDateDis(HtmlOutputText hot) {
        this.lblLeaveStartDateDis = hot;
    }
    private HtmlOutputText lblLeaveEndDate = new HtmlOutputText();

    public HtmlOutputText getLblLeaveEndDate() {
        return lblLeaveEndDate;
    }

    public void setLblLeaveEndDate(HtmlOutputText hot) {
        this.lblLeaveEndDate = hot;
    }
    private HtmlInputText inputText1 = new HtmlInputText();

    public HtmlInputText getInputText1() {
        return inputText1;
    }

    public void setInputText1(HtmlInputText hit) {
        this.inputText1 = hit;
    }
    private HtmlInputTextarea txtReason = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtReason() {
        return txtReason;
    }

    public void setTxtReason(HtmlInputTextarea hit) {
        this.txtReason = hit;
    }
    private HtmlCommandButton btnCalenderReturnDate = new HtmlCommandButton();

    public HtmlCommandButton getBtnCalenderReturnDate() {
        return btnCalenderReturnDate;
    }

    public void setBtnCalenderReturnDate(HtmlCommandButton hcb) {
        this.btnCalenderReturnDate = hcb;
    }
    private HtmlInputText txtReturnDate = new HtmlInputText();

    public HtmlInputText getTxtReturnDate() {
        return txtReturnDate;
    }

    public void setTxtReturnDate(HtmlInputText hit) {
        this.txtReturnDate = hit;
    }
    private HtmlOutputText lblEmploymentStatus = new HtmlOutputText();

    public HtmlOutputText getLblEmploymentStatus() {
        return lblEmploymentStatus;
    }

    public void setLblEmploymentStatus(HtmlOutputText hot) {
        this.lblEmploymentStatus = hot;
    }
    private HtmlOutputText lblLeaveStartDate = new HtmlOutputText();

    public HtmlOutputText getLblLeaveStartDate() {
        return lblLeaveStartDate;
    }

    public void setLblLeaveStartDate(HtmlOutputText hot) {
        this.lblLeaveStartDate = hot;
    }
    private HtmlOutputText c = new HtmlOutputText();

    public HtmlOutputText getC() {
        return c;
    }

    public void setC(HtmlOutputText hot) {
        this.c = hot;
    }
    private HtmlOutputText lblReason = new HtmlOutputText();

    public HtmlOutputText getLblReason() {
        return lblReason;
    }

    public void setLblReason(HtmlOutputText hot) {
        this.lblReason = hot;
    }
    private DefaultSelectedData selectBooleanCheckbox2Bean = new DefaultSelectedData();

    public int get__placeholder() {
        return __placeholder;
    }

    public void set__placeholder(int __placeholder) {
        this.__placeholder = __placeholder;
    }

    public String getEmpStatus() {
        return empStatus;
    }

    public void setEmpStatus(String empStatus) {
        this.empStatus = empStatus;
    }

    public EmployeeManage getEmployeeManager() {
        return employeeManager;
    }

    public void setEmployeeManager(EmployeeManage employeeManager) {
        this.employeeManager = employeeManager;
    }

    public ReturntoJobManager getReturntoJobManager() {
        return returntoJobManager;
    }

    public void setReturntoJobManager(ReturntoJobManager returntoJobManager) {
        this.returntoJobManager = returntoJobManager;
    }

    public DefaultSelectedData getSelectBooleanCheckbox2Bean() {
        return selectBooleanCheckbox2Bean;
    }

    public void setSelectBooleanCheckbox2Bean(DefaultSelectedData selectBooleanCheckbox2Bean) {
        this.selectBooleanCheckbox2Bean = selectBooleanCheckbox2Bean;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }
    private DefaultSelectedData selectBooleanCheckbox1Bean = new DefaultSelectedData();

    public DefaultSelectedData getSelectBooleanCheckbox1Bean() {
        return selectBooleanCheckbox1Bean;
    }

    public void setSelectBooleanCheckbox1Bean(DefaultSelectedData dsd) {
        this.selectBooleanCheckbox1Bean = dsd;
    }
    private DefaultSelectedData selectOneListbox1Bean = new DefaultSelectedData();

    public DefaultSelectedData getSelectOneListbox1Bean() {
        return selectOneListbox1Bean;
    }

    public void setSelectOneListbox1Bean(DefaultSelectedData dsd) {
        this.selectOneListbox1Bean = dsd;
    }
    private HtmlSelectOneListbox listemployeeOnLeave = new HtmlSelectOneListbox();

    public HtmlSelectOneListbox getListemployeeOnLeave() {
        return listemployeeOnLeave;
    }

    public void setListemployeeOnLeave(HtmlSelectOneListbox hsol) {
        this.listemployeeOnLeave = hsol;
    }
    private HtmlGraphicImage imgEmployeePicture = new HtmlGraphicImage();

    public HtmlGraphicImage getImgEmployeePicture() {
        return imgEmployeePicture;
    }

    public void setImgEmployeePicture(HtmlGraphicImage hgi) {
        this.imgEmployeePicture = hgi;
    }
    private DefaultSelectedData defaultSelectedData1 = new DefaultSelectedData();

    public DefaultSelectedData getDefaultSelectedData1() {
        return defaultSelectedData1;
    }

    public void setDefaultSelectedData1(DefaultSelectedData dsd) {
        this.defaultSelectedData1 = dsd;
    }
    private DefaultSelectionItems selectOneListbox1DefaultItems1 = new DefaultSelectionItems();

    public DefaultSelectionItems getSelectOneListbox1DefaultItems1() {
        return selectOneListbox1DefaultItems1;
    }

    public void setSelectOneListbox1DefaultItems1(DefaultSelectionItems dsi) {
        this.selectOneListbox1DefaultItems1 = dsi;
    }
    private DefaultSelectItemsArray selectOneListbox1DefaultItems2 = new DefaultSelectItemsArray();

    public DefaultSelectItemsArray getSelectOneListbox1DefaultItems2() {
        return selectOneListbox1DefaultItems2;
    }

    public void setSelectOneListbox1DefaultItems2(DefaultSelectItemsArray dsia) {
        this.selectOneListbox1DefaultItems2 = dsia;
    }
    private DefaultSelectItemsArray selectOneListbox1DefaultItems3 = new DefaultSelectItemsArray();

    public DefaultSelectItemsArray getSelectOneListbox1DefaultItems3() {
        return selectOneListbox1DefaultItems3;
    }

    public void setSelectOneListbox1DefaultItems3(DefaultSelectItemsArray dsia) {
        this.selectOneListbox1DefaultItems3 = dsia;
    }
    private PanelCollapsible pnl_col_Status = new PanelCollapsible();

    public PanelCollapsible getPnl_col_Status() {
        return pnl_col_Status;
    }

    public void setPnl_col_Status(PanelCollapsible pc) {
        this.pnl_col_Status = pc;
    }
    private PanelCollapsible panelCollapsible1 = new PanelCollapsible();

    public PanelCollapsible getPanelCollapsible1() {
        return panelCollapsible1;
    }

    public void setPanelCollapsible1(PanelCollapsible pc) {
        this.panelCollapsible1 = pc;
    }

    // </editor-fold>
    /**
     * <p>Construct a new Page bean instance.</p>
     */
    public ReturnJobPage() {
    }

    /**
     * <p>Callback method that is called whenever a page is navigated to,
     * either directly via a URL, or indirectly via page navigation.
     * Customize this method to acquire resources that will be needed
     * for event handlers and lifecycle methods, whether or not this
     * page is performing post back processing.</p>
     *
     * <p>Note that, if the current request is a postback, the property
     * values of the components do <strong>not</strong> represent any
     * values submitted with this request.  Instead, they represent the
     * property values that were saved for this view when it was rendered.</p>
     */
    public void init() {
        setEmployeesOnLeave(leaveManager.selectEmployeeOnLeave());
        setEmployeesNotReturnOnTime(leaveManager.selectEmployeeNotReturnOnTimeFromLeave());

        // Perform initializations inherited from our superclass
        super.init();
        // Perform application initialization that must complete
        // *before* managed components are initialized
        // TODO - add your own initialiation code here

        // <editor-fold defaultstate="collapsed" desc="Managed Component Initialization">
        // Initialize automatically managed components
        // *Note* - this logic should NOT be modified
        try {
            _init();
        } catch (Exception e) {
            log("Page1 Initialization Failure", e);
            throw e instanceof FacesException ? (FacesException) e : new FacesException(e);
        }

    // </editor-fold>
    // Perform application initialization that must complete
    // *after* managed components are initialized
    // TODO - add your own initialization code here
    }

    /**
     * <p>Callback method that is called after the component tree has been
     * restored, but before any event processing takes place.  This method
     * will <strong>only</strong> be called on a postback request that
     * is processing a form submit.  Customize this method to allocate
     * resources that will be required in your event handlers.</p>
     */
    public void preprocess() {
    }

    /**
     * <p>Callback method that is called just before rendering takes place.
     * This method will <strong>only</strong> be called for the page that
     * will actually be rendered (and not, for example, on a page that
     * handled a postback and then navigated to a different page).  Customize
     * this method to allocate resources that will be required for rendering
     * this page.</p>
     */
    public void prerender() {
    }

    /**
     * <p>Callback method that is called after rendering is completed for
     * this request, if <code>init()</code> was called (regardless of whether
     * or not this was the page that was actually rendered).  Customize this
     * method to release resources acquired in the <code>init()</code>,
     * <code>preprocess()</code>, or <code>prerender()</code> methods (or
     * acquired during execution of an event handler).</p>
     */
    public void destroy() {
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected ApplicationBean1 getApplicationBean1() {
        return (ApplicationBean1) getBean("ApplicationBean1");
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected RequestBean1 getRequestBean1() {
        return (RequestBean1) getBean("RequestBean1");
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected SessionBean1 getSessionBean1() {
        return (SessionBean1) getBean("SessionBean1");
    }

    public String button1_action() {
        //return null means stay on the same page
        return null;
    }

    public void showSuccessOrFailureMessage(boolean success, String messageToDisplay) {
        lblFormMessage1.setStyle(success ? "color: green; font-size: 14px; font-weight: bold;text-align: center; vertical-align: middle" : "color: red; font-size: 14px; font-weight: bold;text-align: center; vertical-align: middle");
        lblFormMessage1.setValue(messageToDisplay);
        lblFormMessage1.setRendered(true);
        pnMessage.setAutoCentre(true);
        pnMessage.setRendered(true);
        String val = "message";
        String fadeTime = (success ? "15000" : "15000");
        String javaScriptText = "$j(document).ready(function(){ $j('." + val + "').show();" +
                " $j('." + val + "').fadeOut(" + fadeTime + ");" +
                "});";
        JavascriptContext.addJavascriptCall(FacesContext.getCurrentInstance(), javaScriptText);
    }

    public String modalPnlCloseMesssage_action() {
        pnMessage.setRendered(false);
        return null;
    }

    public String btnSearch_action() {
        displayEployee(txtEmployeeID.getValue().toString());
        //return null means stay on the same page
        return null;

    }

    void displayEployee(String employeeId) {
        try {
            if (employeeId != null) {

                if (employeeManager.loadEmpoyeeProfile(employeeId) == 1) {
                    if (!employeeManager.getEmp_Status().equals("01")) {
                        this.lblFull_Name.setValue(employeeManager.getTitleDes() + " " +
                                employeeManager.getFirst_Name() + " " +
                                "" + employeeManager.getMiddle_Name() + " " +
                                employeeManager.getLast_Name());
                        empStatus = employeeManager.getEmp_Status();
                        sex = employeeManager.getSex();
                        try {
                            OracleSerialBlob blo = (OracleSerialBlob) employeeManager.getPhotobinary();
                            setEmployeePicture(blo.getBytes(0, (int) blo.length()));
                            imgEmployeePicture.setValue(getEmployeePicture());
                        } catch (Exception ex) {
                        }
                        if (sex.equalsIgnoreCase("Male")) {
                            chkMale.setSelected(true);
                            chkFemale.setSelected(false);
                        } else if (sex.equalsIgnoreCase("Female")) {
                            chkFemale.setSelected(true);
                            chkMale.setSelected(false);
                        } else {
                            chkMale.setSelected(false);
                            chkFemale.setSelected(false);
                        }
                        if (empStatus.equals("01")) {
                            lblEmploymentStatus.setValue("ACTIVE");
                        } else {
                            lblEmploymentStatus.setValue("INACTIVE");
                        }

                        this.lblPosition.setValue(employeeManager.getJobDescription());
                        lblDepartment.setValue(employeeManager.departmentDetileDescription(
                                employeeManager.getDepartmentId()));
                        if (empStatus.equals("02")) {                           
                            HashMap leaveData = returntoJobManager.readEmpLeaveInfo(txtEmployeeID.getValue().toString());
                            lblLeaveStartDateDis.setValue(leaveData.get("REQUESTED_FROM_DATE"));
                            lblLeaveEndDate.setValue(leaveData.get("REQUESTED_TO_DATE"));
                        }
                    } else {
                        this.showSuccessOrFailureMessage(false, "This employee already active.");
                    }


                } else {
                    this.showSuccessOrFailureMessage(false, "Unable To Find The ecord");

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public String btnNew_action() {
        //return null means stay on the same page
        return null;
    }

    public String btnSave_action() {

        String empId = null;
        String returnDate = null;
        String reason = null;
        empId = txtEmployeeID.getValue().toString();
        returnDate = txtReturnDate.getValue().toString();
        reason = txtReason.getValue().toString();
        if (returntoJobManager.saveReturnToJobInformation(empId, returnDate, reason)) {
            if (leaveManager.updateEmployeeStatus(empId, "01") == 1) {
                this.showSuccessOrFailureMessage(true, "Employee Return to Job Information Is Successfully Posted");
            }
        } else {
            this.showSuccessOrFailureMessage(false, "Error Occured While Saving.");

        }
        return null;
    }

    public String btnEdit_action() {
        //return null means stay on the same page
        return null;
    }

    public String btnUpdate_action() {
        //return null means stay on the same page
        return null;
    }

    public String btnDelete_action() {
        //return null means stay on the same page
        return null;
    }

    public String btnCancel_action() {
        //return null means stay on the same page
        return null;
    }

    public void clearReturnToJobTextComponents() {
        txtReturnDate.resetValue();
        txtReason.resetValue();
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    public void listemployeeOnLeave_processValueChange(ValueChangeEvent vce) {
        if (vce.getNewValue() != null) {
            txtEmployeeID.setValue(vce.getNewValue().toString());
            displayEployee(vce.getNewValue().toString());
        }
    }

    public String lnkPayrollPeriodLists_action() {
        //return null means stay on the same page
        return "LeaveRequest";
    }

    public String lnkAccrualEntries_action() {
        //return null means stay on the same page
        return "leaveReport";
    }

    public String lnkPersonalDeductions_action() {
        //return null means stay on the same page
        return "EmployeeProfile";
    }

    public String lnkPayrollSetUp_action() {
        //return null means stay on the same page
        return "Leave";
    }

    public void pnl_col_Status_processAction(ActionEvent ae) {
        pnl_col_Status.setExpanded(true);
        panelCollapsible1.setExpanded(false);
    }

    public void panelCollapsible1_processAction(ActionEvent ae) {
        pnl_col_Status.setExpanded(false);
        panelCollapsible1.setExpanded(true);

    }

    public void slctEmployeeOnProvation_processValueChange(ValueChangeEvent vce) {
        if (vce.getNewValue() != null) {
            txtEmployeeID.setValue(vce.getNewValue().toString());
            displayEployee(vce.getNewValue().toString());
        }
    }


}
