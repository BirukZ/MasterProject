/*
 * Page1.java
 *
 * Created on Feb 26, 2010, 7:48:31 AM
 * Copyright DavePro
 */
package fphrms.Benefit;

import com.icesoft.faces.component.dragdrop.DragEvent;
import com.icesoft.faces.component.ext.HtmlInputText;
import com.icesoft.faces.component.ext.HtmlInputTextarea;
import com.icesoft.faces.component.ext.HtmlOutputLabel;
import com.icesoft.faces.component.ext.HtmlPanelGroup;
import com.icesoft.faces.component.ext.HtmlSelectBooleanCheckbox;
import com.icesoft.faces.component.ext.HtmlSelectOneMenu;
import com.icesoft.faces.component.ext.RowSelectorEvent;
import com.icesoft.faces.component.jsfcl.data.BorderLayoutBean;
import com.icesoft.faces.component.jsfcl.data.DefaultSelectedData;
import com.icesoft.faces.component.jsfcl.data.DefaultSelectionItems;
import com.icesoft.faces.component.jsfcl.data.DefaultTree;
import com.icesoft.faces.component.panellayout.PanelLayout;
import com.icesoft.faces.component.panelpopup.PanelPopup;
import com.icesoft.faces.component.tree.Tree;
import com.icesoft.faces.context.effects.JavascriptContext;
import com.sun.rave.faces.data.DefaultSelectItemsArray;
import com.sun.rave.web.ui.appbase.AbstractPageBean;
import com.sun.webui.jsf.model.Option;
import fphrms.ApplicationBean1;
import fphrms.RequestBean1;
import fphrms.SessionBean1;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import javax.faces.FacesException;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;
import javax.swing.tree.DefaultTreeModel;
import manager.benefitManager.BenefitTypesManager;
import manager.benefitManager.PositionBenefitTypesManager;
import manager.benefitManager.PositionBenefitTypesManager.BenefitTypeModel;
import manager.departmentManage.DepartmentManage;
import manager.organizationManager.LoadTree;

/**
 * <p>Page bean that corresponds to a similarly named JSP page.  This
 * class contains component definitions (and initialization code) for
 * all components that you have defined on this page, as well as
 * lifecycle methods and event handlers where you may add behavior
 * to respond to incoming events.</p>
 */
public class PositionBenefitTypePage extends AbstractPageBean {

    BenefitTypesManager benefitTypesManager = new BenefitTypesManager();
    PositionBenefitTypesManager positionBenefitTypesManager = new PositionBenefitTypesManager();
    DepartmentManage departmentManager = new DepartmentManage();
    BenefitTypeModel benefitTypeModel = new BenefitTypeModel();
    ArrayList<manager.benefitManager.BenefitTypesManager.BenefitTypeModel> benefitTypesList = benefitTypesManager.getAllBenefitTypes();
    ArrayList<manager.benefitManager.PositionBenefitTypesManager.BenefitTypeModel> positionBenefitLists = positionBenefitTypesManager.getAllpositionBenefits();
    ArrayList<Option> benefitTypesOption = benefitTypesManager.getAllBenefitTypesOption();
    ArrayList<Option> benefitLocation = benefitTypesManager.getLocations();
    ArrayList<Option> benefitTypesPostions = benefitTypesManager.getPostions();
    ArrayList<Option> benefitDurationOption = benefitTypesManager.getBenefitGivenInterval();
    ArrayList<Option> positionTypesOption = new ArrayList<Option>();
    Option[] positions = departmentManager.readDpartmentToListBox();
    ArrayList<Option> benefitTypes = benefitTypesManager.getBenifinNames();
    ArrayList<Option> locationList = benefitTypesManager.getBenifinLocations();
    //==============================================================================
    //=======================================================================================
//    BenefitTypeModel tempBenefitType = new BenefitTypeModel();
//    String benefitTypeCode = tempBenefitType.getBenefitTypeCode();
//    String benefitName = tempBenefitType.getBenefitName();
//    String description = tempBenefitType.getDescription();
//    String phaseoutPeriod = tempBenefitType.getPhaseoutPeriod();
//    int benefitTypeId;
//    String penalty;
//    int repitition;
////=======================================================================================
//
//    public void populateEditableRow(BenefitTypeModel incomingBenefitType) {
//        tempBenefitType = new BenefitTypeModel();
//        tempBenefitType = incomingBenefitType;
//        benefitTypeCode = tempBenefitType.getBenefitTypeCode();
//        benefitName = tempBenefitType.getBenefitName();
//        description = tempBenefitType.getDescription();
//        phaseoutPeriod = tempBenefitType.getPhaseoutPeriod();
//    }
//
    int benefitId;
    int benefitPositionId;
    String benefitName;
    boolean monetaryOrNonmonetary;
    String benefitType;
    String benefitDescription;
    String benefitTermLength;
    String benefitCatagory;
    String status;
    String dataBaseStatus;
    String selected;
    int positionId;
    String positionName;
    int quantity;
    String remark;
    int locations;
    boolean rendered;
    float amountOfTax;
    boolean taxableOrNot;
    float moneyValue;
    String isMonetery;
    //==============================================================================
    int selectedBenefitPositionTypeRow = -1;

    public ArrayList<Option> getBenefitDurationOption() {
        return benefitDurationOption;
    }

    public float getAmountOfTax() {
        return amountOfTax;
    }

    public int getLocations() {
        return locations;
    }

    public void setLocations(int locations) {
        this.locations = locations;
    }

    public ArrayList<Option> getLocationList() {
        return locationList;
    }

    public void setLocationList(ArrayList<Option> locationList) {
        this.locationList = locationList;
    }

    public void setAmountOfTax(float amountOfTax) {
        this.amountOfTax = amountOfTax;
    }

    public ArrayList<Option> getBenefitLocation() {
        return benefitLocation;
    }

    public void setBenefitLocation(ArrayList<Option> benefitLocation) {
        this.benefitLocation = benefitLocation;
    }

    public String getIsMonetery() {
        return isMonetery;
    }

    public void setIsMonetery(String isMonetery) {
        this.isMonetery = isMonetery;
    }

    public float getMoneyValue() {
        return moneyValue;
    }

    public void setMoneyValue(float moneyValue) {
        this.moneyValue = moneyValue;
    }

    public void setAmountOfTax(int amountOfTax) {
        this.amountOfTax = amountOfTax;
    }

    public ArrayList<Option> getBenefitTypesPostions() {
        return benefitTypesPostions;
    }

    public ArrayList<Option> getBenefitTypes() {
        return benefitTypes;
    }

    public void setBenefitTypes(ArrayList<Option> benefitTypes) {
        this.benefitTypes = benefitTypes;
    }

    public void setBenefitTypesPostions(ArrayList<Option> benefitTypesPostions) {
        this.benefitTypesPostions = benefitTypesPostions;
    }

    public boolean isTaxableOrNot() {
        return taxableOrNot;
    }

    public void setTaxableOrNot(boolean taxableOrNot) {
        this.taxableOrNot = taxableOrNot;
    }

    public String getDataBaseStatus() {
        return dataBaseStatus;
    }

    public void setDataBaseStatus(String dataBaseStatus) {
        this.dataBaseStatus = dataBaseStatus;
    }

    public Option[] getPositions() {
        return positions;
    }

    public void setPositions(Option[] positions) {
        this.positions = positions;
    }

    public void setBenefitDurationOption(ArrayList<Option> benefitDurationOption) {
        this.benefitDurationOption = benefitDurationOption;
    }

    public BenefitTypeModel getBenefitTypeModel() {
        return benefitTypeModel;
    }

    public void setBenefitTypeModel(BenefitTypeModel benefitTypeModel) {
        this.benefitTypeModel = benefitTypeModel;
    }

    public boolean isRendered() {
        return rendered;
    }

    public void setRendered(boolean rendered) {
        this.rendered = rendered;
    }

    public int getSelectedBenefitPositionTypeRow() {
        return selectedBenefitPositionTypeRow;
    }

    public void setSelectedBenefitPositionTypeRow(int selectedBenefitPositionTypeRow) {
        this.selectedBenefitPositionTypeRow = selectedBenefitPositionTypeRow;
    }

    public int getselectedBenefitPositionTypeRow() {
        return selectedBenefitPositionTypeRow;
    }

    public void setselectedBenefitPositionTypeRow(int selectedBenefitPositionTypeRow) {
        this.selectedBenefitPositionTypeRow = selectedBenefitPositionTypeRow;
    }

    //==============================================================================
    // <editor-fold defaultstate="collapsed" desc="All Getters And Setters">
    public BenefitTypesManager getBenefitTypesManager() {
        return benefitTypesManager;
    }

    public void setBenefitTypesManager(BenefitTypesManager benefitTypesManager) {
        this.benefitTypesManager = benefitTypesManager;
    }

    public ArrayList<BenefitTypesManager.BenefitTypeModel> getBenefitTypesList() {
        return benefitTypesList;
    }

    public void setBenefitTypesList(ArrayList<BenefitTypesManager.BenefitTypeModel> benefitTypesList) {
        this.benefitTypesList = benefitTypesList;
    }

    public PositionBenefitTypesManager getPositionBenefitTypesManager() {
        return positionBenefitTypesManager;
    }

    public void setPositionBenefitTypesManager(PositionBenefitTypesManager positionBenefitTypesManager) {
        this.positionBenefitTypesManager = positionBenefitTypesManager;
    }

    public ArrayList<Option> getBenefitTypesOption() {
        return benefitTypesOption;
    }

    public void setBenefitTypesOption(ArrayList<Option> benefitTypesOption) {
        this.benefitTypesOption = benefitTypesOption;
    }

    public ArrayList<BenefitTypeModel> getPositionBenefitLists() {
        return positionBenefitLists;
    }

    public void setPositionBenefitLists(ArrayList<BenefitTypeModel> positionBenefitLists) {
        this.positionBenefitLists = positionBenefitLists;
    }

    public ArrayList<Option> getPositionTypesOption() {
        return positionTypesOption;
    }

    public void setPositionTypesOption(ArrayList<Option> positionTypesOption) {
        this.positionTypesOption = positionTypesOption;
    }

    // </editor-fold >
    // <editor-fold defaultstate="collapsed" desc="Local Variables">
    /**
     * <p>Automatically managed component initialization.  <strong>WARNING:</strong>
     * This method is automatically generated, so any user-specified code inserted
     * here is subject to being replaced.</p>
     */
    private void _init() throws Exception {
    }
    private BorderLayoutBean panelBorder1Bean = new BorderLayoutBean();

    public BorderLayoutBean getPanelBorder1Bean() {
        return panelBorder1Bean;
    }

    public void setPanelBorder1Bean(BorderLayoutBean blb) {
        this.panelBorder1Bean = blb;
    }
    private PanelLayout pnProfile = new PanelLayout();

    public PanelLayout getPnProfile() {
        return pnProfile;
    }

    public void setPnProfile(PanelLayout pl) {
        this.pnProfile = pl;
    }
    private HtmlPanelGroup pnlGrpPowerDeligationContent = new HtmlPanelGroup();

    public HtmlPanelGroup getPnlGrpPowerDeligationContent() {
        return pnlGrpPowerDeligationContent;
    }

    public void setPnlGrpPowerDeligationContent(HtmlPanelGroup hpg) {
        this.pnlGrpPowerDeligationContent = hpg;
    }
    private DefaultSelectedData selectOneMenu1Bean = new DefaultSelectedData();

    public DefaultSelectedData getSelectOneMenu1Bean() {
        return selectOneMenu1Bean;
    }

    public void setSelectOneMenu1Bean(DefaultSelectedData dsd) {
        this.selectOneMenu1Bean = dsd;
    }
    private DefaultSelectedData defaultSelectedData2 = new DefaultSelectedData();
    private DefaultSelectedData defaultSelectedData1 = new DefaultSelectedData();

    public DefaultSelectedData getDefaultSelectedData1() {
        return defaultSelectedData1;
    }

    public void setDefaultSelectedData1(DefaultSelectedData defaultSelectedData1) {
        this.defaultSelectedData1 = defaultSelectedData1;
    }

    public DefaultSelectedData getDefaultSelectedData2() {
        return defaultSelectedData2;
    }

    public void setDefaultSelectedData2(DefaultSelectedData dsd) {
        this.defaultSelectedData2 = dsd;
    }
    private DefaultSelectionItems selectOneMenu1DefaultItems1 = new DefaultSelectionItems();

    public DefaultSelectionItems getSelectOneMenu1DefaultItems1() {
        return selectOneMenu1DefaultItems1;
    }

    public void setSelectOneMenu1DefaultItems1(DefaultSelectionItems dsi) {
        this.selectOneMenu1DefaultItems1 = dsi;
    }
    private DefaultSelectItemsArray drlPositionDefaultItems = new DefaultSelectItemsArray();

    public DefaultSelectItemsArray getDrlPositionDefaultItems() {
        return drlPositionDefaultItems;
    }

    public void setDrlPositionDefaultItems(DefaultSelectItemsArray dsia) {
        this.drlPositionDefaultItems = dsia;
    }
    private DefaultTree treeModel = new DefaultTree();
    private DefaultTree defaultTreeModel = new DefaultTree();
    private Tree treeOrgStructure = new Tree();
    private PanelLayout pnlLayoutTree = new PanelLayout();

    public PanelLayout getPnlLayoutTree() {
        return pnlLayoutTree;
    }

    public void setPnlLayoutTree(PanelLayout pnlLayoutTree) {
        this.pnlLayoutTree = pnlLayoutTree;
    }

    public DefaultTree getTreeModel() {
        return treeModel;
    }

    public void setTreeModel(DefaultTree treeModel) {
        this.treeModel = treeModel;
    }

    public DefaultTree getDefaultTreeModel() {
        return defaultTreeModel;
    }

    public void setDefaultTreeModel(DefaultTree defaultTreeModel) {
        this.defaultTreeModel = defaultTreeModel;
    }

    public Tree getTreeOrgStructure() {
        return treeOrgStructure;
    }

    public void setTreeOrgStructure(Tree treeOrgStructure) {
        this.treeOrgStructure = treeOrgStructure;
    }
    private HtmlOutputLabel lblSuccessOrErrorMessage = new HtmlOutputLabel();
    private PanelLayout pnlMessageBody = new PanelLayout();
    private HtmlPanelGroup panelGroupMessage = new HtmlPanelGroup();
    private PanelPopup pnlPopupSuccessOrFailure = new PanelPopup();

    public String getBenefitCatagory() {
        return benefitCatagory;
    }

    public void setBenefitCatagory(String benefitCatagory) {
        this.benefitCatagory = benefitCatagory;
    }

    public DepartmentManage getDepartmentManager() {
        return departmentManager;
    }

    public void setDepartmentManager(DepartmentManage departmentManager) {
        this.departmentManager = departmentManager;
    }

    public String getBenefitDescription() {
        return benefitDescription;
    }

    public void setBenefitDescription(String benefitDescription) {
        this.benefitDescription = benefitDescription;
    }

    public int getBenefitId() {
        return benefitId;
    }

    public void setBenefitId(int benefitId) {
        this.benefitId = benefitId;
    }

    public String getBenefitName() {
        return benefitName;
    }

    public void setBenefitName(String benefitName) {
        this.benefitName = benefitName;
    }

    public int getBenefitPositionId() {
        return benefitPositionId;
    }

    public void setBenefitPositionId(int benefitPositionId) {
        this.benefitPositionId = benefitPositionId;
    }

    public String getBenefitTermLength() {
        return benefitTermLength;
    }

    public void setBenefitTermLength(String benefitTermLength) {
        this.benefitTermLength = benefitTermLength;
    }

    public String getBenefitType() {
        return benefitType;
    }

    public void setBenefitType(String benefitType) {
        this.benefitType = benefitType;
    }

    public HtmlOutputLabel getLblSuccessOrErrorMessage() {
        return lblSuccessOrErrorMessage;
    }

    public void setLblSuccessOrErrorMessage(HtmlOutputLabel lblSuccessOrErrorMessage) {
        this.lblSuccessOrErrorMessage = lblSuccessOrErrorMessage;
    }

    public HtmlPanelGroup getPanelGroupMessage() {
        return panelGroupMessage;
    }

    public void setPanelGroupMessage(HtmlPanelGroup panelGroupMessage) {
        this.panelGroupMessage = panelGroupMessage;
    }

    public PanelLayout getPnlMessageBody() {
        return pnlMessageBody;
    }

    public void setPnlMessageBody(PanelLayout pnlMessageBody) {
        this.pnlMessageBody = pnlMessageBody;
    }

    public PanelPopup getPnlPopupSuccessOrFailure() {
        return pnlPopupSuccessOrFailure;
    }

    public void setPnlPopupSuccessOrFailure(PanelPopup pnlPopupSuccessOrFailure) {
        this.pnlPopupSuccessOrFailure = pnlPopupSuccessOrFailure;
    }

    public int getPositionId() {
        return positionId;
    }

    public void setPositionId(int positionId) {
        this.positionId = positionId;
    }

    public String getPositionName() {
        return positionName;
    }

    public void setPositionName(String positionName) {
        this.positionName = positionName;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public String getRemark() {
        return remark;
    }

    public void setRemark(String remark) {
        this.remark = remark;
    }

    public String getSelected() {
        return selected;
    }

    public void setSelected(String selected) {
        this.selected = selected;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }
    private HtmlSelectOneMenu drlPositionEdit = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlPositionEdit() {
        return drlPositionEdit;
    }

    public void setDrlPositionEdit(HtmlSelectOneMenu drlPositionEdit) {
        this.drlPositionEdit = drlPositionEdit;
    }
    private HtmlSelectOneMenu drlPosition = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlPosition() {
        return drlPosition;
    }

    public void setDrlPosition(HtmlSelectOneMenu hsom) {
        this.drlPosition = hsom;
    }
    private HtmlInputText txtDepartment = new HtmlInputText();

    public HtmlInputText getTxtDepartment() {
        return txtDepartment;
    }

    public void setTxtDepartment(HtmlInputText hit) {
        this.txtDepartment = hit;
    }
    private HtmlSelectOneMenu drlBenefitEdit = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlBenefitEdit() {
        return drlBenefitEdit;
    }

    public void setDrlBenefitEdit(HtmlSelectOneMenu drlBenefitEdit) {
        this.drlBenefitEdit = drlBenefitEdit;
    }
    private HtmlSelectOneMenu drlBenefit = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlBenefit() {
        return drlBenefit;
    }

    public void setDrlBenefit(HtmlSelectOneMenu hsom) {
        this.drlBenefit = hsom;
    }
    private HtmlInputText txtQuantity = new HtmlInputText();

    public HtmlInputText getTxtQuantity() {
        return txtQuantity;
    }

    public void setTxtQuantity(HtmlInputText hit) {
        this.txtQuantity = hit;
    }
    private HtmlInputTextarea txtaRemark = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaRemark() {
        return txtaRemark;
    }

    public void setTxtaRemark(HtmlInputTextarea hit) {
        this.txtaRemark = hit;
    }
    private DefaultSelectedData defaultSelectedDataDisciplineCategory = new DefaultSelectedData();

    public DefaultSelectedData getDefaultSelectedDataDisciplineCategory() {
        return defaultSelectedDataDisciplineCategory;
    }

    public void setDefaultSelectedDataDisciplineCategory(DefaultSelectedData defaultSelectedDataDisciplineCategory) {
        this.defaultSelectedDataDisciplineCategory = defaultSelectedDataDisciplineCategory;
    }

    public boolean isMonetaryOrNonmonetary() {
        return monetaryOrNonmonetary;
    }

    public void setMonetaryOrNonmonetary(boolean monetaryOrNonmonetary) {
        this.monetaryOrNonmonetary = monetaryOrNonmonetary;
    }
    private DefaultSelectedData selectBooleanCheckbox1Bean = new DefaultSelectedData();

    public DefaultSelectedData getSelectBooleanCheckbox1Bean() {
        return selectBooleanCheckbox1Bean;
    }

    public void setSelectBooleanCheckbox1Bean(DefaultSelectedData dsd) {
        this.selectBooleanCheckbox1Bean = dsd;
    }
    private DefaultSelectedData defaultSelectedData3 = new DefaultSelectedData();

    public DefaultSelectedData getDefaultSelectedData3() {
        return defaultSelectedData3;
    }

    public void setDefaultSelectedData3(DefaultSelectedData dsd) {
        this.defaultSelectedData3 = dsd;
    }
    private HtmlSelectBooleanCheckbox chkTaxable = new HtmlSelectBooleanCheckbox();

    public HtmlSelectBooleanCheckbox getChkTaxable() {
        return chkTaxable;
    }

    public void setChkTaxable(HtmlSelectBooleanCheckbox hsbc) {
        this.chkTaxable = hsbc;
    }
    private HtmlInputText txtAmountOfBirr = new HtmlInputText();

    public HtmlInputText getTxtAmountOfBirr() {
        return txtAmountOfBirr;
    }

    public void setTxtAmountOfBirr(HtmlInputText hit) {
        this.txtAmountOfBirr = hit;
    }
    private HtmlSelectBooleanCheckbox ckbBenefitMonetary = new HtmlSelectBooleanCheckbox();

    public HtmlSelectBooleanCheckbox getCkbBenefitMonetary() {
        return ckbBenefitMonetary;
    }

    public void setCkbBenefitMonetary(HtmlSelectBooleanCheckbox hsbc) {
        this.ckbBenefitMonetary = hsbc;
    }
    private DefaultSelectedData defaultSelectedData4 = new DefaultSelectedData();

    public DefaultSelectedData getDefaultSelectedData4() {
        return defaultSelectedData4;
    }

    public void setDefaultSelectedData4(DefaultSelectedData dsd) {
        this.defaultSelectedData4 = dsd;
    }
    private DefaultSelectionItems selectOneMenu1DefaultItems = new DefaultSelectionItems();

    public DefaultSelectionItems getSelectOneMenu1DefaultItems() {
        return selectOneMenu1DefaultItems;
    }

    public void setSelectOneMenu1DefaultItems(DefaultSelectionItems dsi) {
        this.selectOneMenu1DefaultItems = dsi;
    }
    private HtmlSelectOneMenu drlLocation = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlLocation() {
        return drlLocation;
    }

    public void setDrlLocation(HtmlSelectOneMenu hsom) {
        this.drlLocation = hsom;
    }
    // </editor-fold>

    /**
     * <p>Construct a new Page bean instance.</p>
     */
    public PositionBenefitTypePage() {
    }

    /**
     * <p>Callback method that is called whenever a page is navigated to,
     * either directly via a URL, or indirectly via page navigation.
     * Customize this method to acquire resources that will be needed
     * for event handlers and lifecycle methods, whether or not this
     * page is performing post back processing.</p>
     *
     * <p>Note that, if the current request is a postback, the property
     * values of the components do <strong>not</strong> represent any
     * values submitted with this request.  Instead, they represent the
     * property values that were saved for this view when it was rendered.</p>
     */
    public void init() {
        // Perform initializations inherited from our superclass
        super.init();
        // Perform application initialization that must complete
        // *before* managed components are initialized
        // TODO - add your own initialiation code here

        // <editor-fold defaultstate="collapsed" desc="Managed Component Initialization">
        // Initialize automatically managed components
        // *Note* - this logic should NOT be modified
        try {
            _init();
        } catch (Exception e) {
            log("Page1 Initialization Failure", e);
            throw e instanceof FacesException ? (FacesException) e : new FacesException(e);
        }

    // </editor-fold>
    // Perform application initialization that must complete
    // *after* managed components are initialized
    // TODO - add your own initialization code here
    }

    /**
     * <p>Callback method that is called after the component tree has been
     * restored, but before any event processing takes place.  This method
     * will <strong>only</strong> be called on a postback request that
     * is processing a form submit.  Customize this method to allocate
     * resources that will be required in your event handlers.</p>
     */
    public void preprocess() {
    }

    /**
     * <p>Callback method that is called just before rendering takes place.
     * This method will <strong>only</strong> be called for the page that
     * will actually be rendered (and not, for example, on a page that
     * handled a postback and then navigated to a different page).  Customize
     * this method to allocate resources that will be required for rendering
     * this page.</p>
     */
    public void prerender() {
    }

    /**
     * <p>Callback method that is called after rendering is completed for
     * this request, if <code>init()</code> was called (regardless of whether
     * or not this was the page that was actually rendered).  Customize this
     * method to release resources acquired in the <code>init()</code>,
     * <code>preprocess()</code>, or <code>prerender()</code> methods (or
     * acquired during execution of an event handler).</p>
     */
    public void destroy() {
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected ApplicationBean1 getApplicationBean1() {
        return (ApplicationBean1) getBean("ApplicationBean1");
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected RequestBean1 getRequestBean1() {
        return (RequestBean1) getBean("RequestBean1");
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected SessionBean1 getSessionBean1() {
        return (SessionBean1) getBean("SessionBean1");
    }

    public boolean validatePositionBenefit() {
        if (//txtDepartment.getValue() == null ||
                drlBenefit.getValue() == null || drlBenefit.getValue().toString().equals("-1") ||
                drlPosition.getValue() == null || drlPosition.getValue().toString().equals("-1")) {
            showSuccessOrFailureMessage(false, "INVALID");
            return false;
        } else {
            try {
                quantity = Integer.parseInt(txtQuantity.getValue().toString());
            } catch (NumberFormatException nfe) {
                nfe.printStackTrace();
                showSuccessOrFailureMessage(false, "INVALID NUMBER FOR QUANTITY : " + txtQuantity.getValue().toString());
                return false;
            }
        }
        return true;
    }

    private boolean isBenefitRegistered(String benefitName, String postionName) {
        for (BenefitTypeModel currentBenefitType : positionBenefitLists) {
            if ((currentBenefitType.getBenefitName().equals(benefitName)) && (currentBenefitType.getPositionName().equals(postionName))) {
                return true;
            }
        }
        return false;
    }

    public String btnAddToTable_action() {
        //if (validatePositionBenefit()) {
        positionId = Integer.parseInt(drlPosition.getValue().toString().split("--")[0]);
        positionName = drlPosition.getValue().toString().split("--")[1];
        benefitId = Integer.parseInt(drlBenefit.getValue().toString().split("--")[0]);
        benefitName = drlBenefit.getValue().toString().split("--")[1];
        remark = txtaRemark.getValue().toString();
        locations = Integer.parseInt(drlLocation.getValue().toString().split("--")[0]);
        dataBaseStatus = "New";
        rendered = true;
        taxableOrNot = chkTaxable.isSelected();
        if (isBenefitRegistered(benefitName, positionName)) {
            showSuccessOrFailureMessage(false, "ALREADY INSERETED");
        } else {
            if ((chkTaxable.isSelected() == true)) {
                // amountOfTax = Integer.valueOf(txtAmountOfTax.getValue().toString());
                quantity = 0;
                txtAmountOfBirr.setDisabled(true);
                moneyValue = 0;
                isMonetery = "No";
                txtQuantity.setDisabled(false);
            } else if ((txtQuantity.getValue() == null) || txtQuantity.getValue().toString().equals("") && chkTaxable.isSelected() == false) {
                amountOfTax = 0;
                quantity = 0;
            } else {
                txtQuantity.setDisabled(false);
                quantity = Integer.parseInt(txtQuantity.getValue().toString());
            }
            if (ckbBenefitMonetary.isSelected() == true) {
                txtAmountOfBirr.setDisabled(false);
                moneyValue = Float.valueOf(txtAmountOfBirr.getValue().toString());
                txtQuantity.setDisabled(true);
                isMonetery = "Yes";
                quantity = 0;
                amountOfTax = 0;


            } else {
                moneyValue = 0;
                isMonetery = "No";

            }
            benefitTypeModel = new BenefitTypeModel(benefitId, benefitName, positionId, positionName, quantity, remark, dataBaseStatus, rendered, taxableOrNot, isMonetery, moneyValue, locations);
            positionBenefitLists.add(benefitTypeModel);
        }
        clearPositionBenefitComponebts();
        return null;
    }

    public void cmdLnkTree_processAction(ActionEvent ae) {
        String departmentName;
        String department = treeOrgStructure.getCurrentNode().toString();//.substring(0, 2);
        String _department[] = department.split("#");

        if (_department.length > 1) {
            departmentName = _department[0];
            String departmentId = _department[1].trim();
            txtDepartment.setValue(departmentName);
            pnlLayoutTree.setRendered(false);
            positionTypesOption = departmentManager.readJobCodeOption(departmentId);
        }
    }

    public void showSuccessOrFailureMessage(boolean success, String messageToDisplay) {
        lblSuccessOrErrorMessage.setStyle(success ? "color: green; font-size: 12px; font-weight: bold;text-align: center; vertical-align: middle" : "color: red; font-size: 12px; font-weight: bold;text-align: center; vertical-align: middle");
        lblSuccessOrErrorMessage.setValue(messageToDisplay);
        pnlPopupSuccessOrFailure.setRendered(true);
        String val = "message";
        String fadeTime = (success ? "3000" : "8000");
        String javaScriptText = "$j(document).ready(function(){ $j('." + val + "').show();" +
                " $j('." + val + "').fadeOut(" + fadeTime + ");" + "});";
        JavascriptContext.addJavascriptCall(FacesContext.getCurrentInstance(), javaScriptText);
    }

    public String btnPostDecision_action() {
        String recorededDateAndTime = new Timestamp((new Date()).getTime()).toString();
        if (positionBenefitTypesManager.savePositionBenefits(positionBenefitLists, recorededDateAndTime)) {
            clearPositionBenefitComponebts();
            showSuccessOrFailureMessage(true, "SAVED SUCCESSFULLY ");
            positionBenefitLists = positionBenefitTypesManager.getAllpositionBenefits();

        } else {
            showSuccessOrFailureMessage(false, "SAVING FAILED");
        }
        return null;
    }

    public String cmdLnkEdit_action() {
        if (selectedBenefitPositionTypeRow != -1) {
            if (positionBenefitLists.get(selectedBenefitPositionTypeRow).getDataBaseStatus().equals("Old")) {
                positionBenefitLists.get(selectedBenefitPositionTypeRow).setDataBaseStatus("Edited");
            }
        }
        return null;
    }

    public String cmdLnkRemove_action() {
        if (selectedBenefitPositionTypeRow != -1) {
            if (positionBenefitLists.get(selectedBenefitPositionTypeRow).getDataBaseStatus().equals("New")) {
                positionBenefitLists.remove(selectedBenefitPositionTypeRow);
            } else if (positionBenefitLists.get(selectedBenefitPositionTypeRow).getDataBaseStatus().equals("Old") ||
                    positionBenefitLists.get(selectedBenefitPositionTypeRow).getDataBaseStatus().equals("Edited")) {
                positionBenefitLists.get(selectedBenefitPositionTypeRow).setDataBaseStatus("Deleted");
            }
        }
        return null;
    }

    private void clearPositionBenefitComponebts() {
        txtDepartment.setValue(null);
        drlBenefit.resetValue();
        drlPosition.resetValue();
        txtQuantity.setValue(null);
        txtaRemark.setValue(null);
        // txtAmountOfTax.setValue(null);
        chkTaxable.setSelected(false);
        drlBenefit.setValue("-1");
        drlPosition.setValue(null);
        ckbBenefitMonetary.setSelected(false);
        txtAmountOfBirr.setValue(null);
        drlPosition.setValue(null);
        txtAmountOfBirr.setDisabled(true);
        // txtAmountOfTax.setDisabled(true);
        txtQuantity.setDisabled(false);
    }

    public String btnReset_action() {
        clearPositionBenefitComponebts();
        //positionBenefitLists = new ArrayList<BenefitTypeModel>();
        return null;
    }

    public String btnDepartmentTree_action() {
        LoadTree loadTree = new LoadTree();
        treeModel.setModel(new DefaultTreeModel(loadTree.populateNodes()));
        pnlLayoutTree.setRendered(true);
        return null;
    }

    public void rowSelectorBenefitType_processMyEvent(RowSelectorEvent rse) {
        if (selectedBenefitPositionTypeRow != rse.getRow()) {//when new row selected
            selectedBenefitPositionTypeRow = rse.getRow();
            benefitTypesList.get(selectedBenefitPositionTypeRow).getSelectedBenefitTermLength();
//            populateEditableRow(benefitTypesList.get(selectedBenefitPositionTypeRow));
        } else {//keep it selected           
            benefitTypesList.get(selectedBenefitPositionTypeRow).setSelected(true);
        }
    }

    public void rowSelectorBenefitPosition_processMyEvent(RowSelectorEvent rse) {
        if (selectedBenefitPositionTypeRow != rse.getRow()) {
            selectedBenefitPositionTypeRow = rse.getRow();
        } else {
            positionBenefitLists.get(selectedBenefitPositionTypeRow).setSelected(true);
        }
    }

    public String btnPopupSaveBenefitType_action() {
        if (benefitTypesManager.saveBenefitTypes(benefitTypesList)) {
            showSuccessOrFailureMessage(true, "SUCCESS");
            //benefitTypesOption = benefitTypesManager.getAllBenefitTypesOption();
            benefitTypes = benefitTypesManager.getBenifinNames();
            benefitTypesPostions = benefitTypesManager.getPostions();
        } else {
            showSuccessOrFailureMessage(true, "FAILED");
        }
        return null;
    }

    public void page_header_processMyEvent(DragEvent de) {
    }

    public String btnAddBenefitType_action() {
        return "BenefitType";
    }

    public String lnkBenefitType_action() {
        return "BenefitType";
    }

    public void chkTaxable_processValueChange(ValueChangeEvent vce) {
        if (chkTaxable.isSelected() == true) {

            txtQuantity.setDisabled(true);
            txtAmountOfBirr.setDisabled(true);
        } else {

            txtQuantity.setDisabled(false);
            txtAmountOfBirr.setDisabled(false);
        }
    }

    public void ckbBenefitMonetary_processValueChange(ValueChangeEvent vce) {
        if (ckbBenefitMonetary.isSelected() == true) {
            //txtAmountOfTax.setDisabled(true);
            txtQuantity.setDisabled(true);
            txtAmountOfBirr.setDisabled(false);
        } else {
            //txtAmountOfTax.setDisabled(false);
            txtQuantity.setDisabled(false);
            txtAmountOfBirr.setDisabled(true);
        }
    }

    public void ckbBenefitMonetary_validate(FacesContext context, UIComponent component, Object value) {
    }

    public String txtDepartment_action() {
        //return null means stay on the same page
        return null;
    }

    public void txtaRemark_processValueChange(ValueChangeEvent vce) {
    }
}
