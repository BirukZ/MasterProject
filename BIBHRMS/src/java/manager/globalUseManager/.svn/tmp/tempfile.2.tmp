/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package manager.globalUseManager;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;

/**
 *
 * @author mekete
 */
public class GregorianCalendarManipulation {

    /**
     * @return <b>0</b> if the two dates are equal,
     *<br> <b>1</b> if dateTwo is after  dateOne,
     *<br> <b>-1</b> if dateTwo is before  dateOne
     */
    public static int compareDates(String dateOne, String dateTwo) {
        return compareDates(convertDateToCalendar(dateOne), convertDateToCalendar(dateTwo));
    }

    /**
     * @return <b>0</b> if the two dates are equal,
     *<br> <b>1</b> if dateTwo is after  dateOne,
     *<br> <b>-1</b> if dateTwo is before  dateOne
     */
    public static int compareDates(Calendar dateOne, Calendar dateTwo) {
        if (dateOne.before(dateTwo)) {
            return 1;
        } else if (dateOne.after(dateTwo)) {
            return -1;
        } else {//if they equal
            return 0;
        }
    }

    /**
     * accepts a valid String of format <b>yyyy-MM-DD</b>
     * and creates a corresponding GregorianCalendar object
     * @return The corresponding GregorianCalendar object for the String <b>date</b>
     */
    public static Calendar convertDateToCalendar(String date) {
        try {
            String dateParameters[] = date.split("-");
            int year = Integer.parseInt(dateParameters[0]);
            int month = Integer.parseInt(dateParameters[1]);
            int day = Integer.parseInt(dateParameters[2]);
            return new GregorianCalendar(year, month, day);
        } catch (NumberFormatException ex) {
            ex.printStackTrace();
        } catch (ArrayIndexOutOfBoundsException ex) {
            ex.printStackTrace();
        }
        return null;
    }

    /**
     * Accepts a Calendarand creates a corresponding String Object of format <b>yyyy-MM-DD</b>
     * @return The corresponding String of format <b>yyyy-MM-DD</b> <b>date</b>
     */
    public static String convertCalendarToString(Calendar date) {
        return Integer.toString(date.get(Calendar.YEAR)) + "-" + Integer.toString(date.get(Calendar.MONTH + 1)) + "-" + Integer.toString(date.get(Calendar.DATE));
    }

    public static int calaculateYearDifference(String startDate) {
        Calendar todayCal = new GregorianCalendar();
        Calendar startDateCal = convertDateToCalendar(startDate);
        return calaculateYearDifference(startDateCal, todayCal);
    }

    public static int calaculateYearDifference(Calendar startDateCal) {
        Calendar todayCal = new GregorianCalendar();
        return calaculateYearDifference(startDateCal, todayCal);
    }

    public static int calaculateYearDifference(String startDate, String endDate) {
        Calendar startDateCal = convertDateToCalendar(startDate);
        Calendar endDateCal = convertDateToCalendar(endDate);
        return calaculateYearDifference(startDateCal, endDateCal);

    }

    public static int calaculateYearDifference(Calendar startDate, Calendar endDate) {
        int differenceInYear = endDate.get(Calendar.YEAR) - startDate.get(Calendar.YEAR);
        if ((startDate.get(Calendar.MONTH) > endDate.get(Calendar.MONTH)) ||
                ((startDate.get(Calendar.MONTH) == endDate.get(Calendar.MONTH) &&
                startDate.get(Calendar.DAY_OF_MONTH) > endDate.get(Calendar.DAY_OF_MONTH)))) {
            differenceInYear = differenceInYear - 1;
        }
        return differenceInYear;
    }

    public static int calaculateMonthDifference(String startDate, String endDate) {
        return calaculateMonthDifference(convertDateToCalendar(startDate), convertDateToCalendar(endDate));
    }

    public static int calaculateMonthDifference(Calendar startDate) {
        return calaculateMonthDifference(startDate, new GregorianCalendar());
    }

    public static Calendar addDaysToGivenDate(Calendar startDate, int daysToAdd) {
        startDate.add(Calendar.DATE, daysToAdd);
        return startDate;//
    }

    /**
     * Calculates the number of months between two dates
     * @return the month difference between <b>endDate</b> and <b>startDate</b>.
     * <br> If endDate is before startDate, the returned value is negative integer.
     * <br> If function floors the difference; it does not approximate.
     * @param <b>endDate</b> end date
     * @param <b>startDate</b> start date
     */
    public static int calaculateMonthDifference(Calendar startDate, Calendar endDate) {
        int yearDifference = calaculateYearDifference(startDate, endDate);
        return yearDifference * 12 + (int) Math.abs(startDate.get(Calendar.MONTH) - endDate.get(Calendar.MONTH));
    }

    /**
     * Calculates the number of days between two dates
     * @return the date difference between <b>endDate</b> and <b>startDate</b>.<br> If endDate is before startDate, the returned value is negative integer.
     * @param <b>endDate</b> end date
     * @param <b>startDate</b> start date
     */
    public static int calaculateDateDifference(String startDate, String endDate) {
        return calaculateDateDifference(convertDateToCalendar(startDate), convertDateToCalendar(endDate));
    }

    /**
     * Calculates the number of days between startDate and the current date
     * @return the date difference between <b>endDate</b> and <b>startDate</b>.<br> If the date is before startDate, the returned value is negative integer.
     * @param <b>startDate</b> the date to be compared with today
     */
    public static int calaculateDateDifference(Calendar startDate) {
        return calaculateDateDifference(startDate, new GregorianCalendar());
    }

    /**
     * Calculates the number of days between two dates
     * @return the date difference between <b>endDate</b> and <b>startDate</b>.
     * <br> If <b>endDate</b> is before <b>startDate</b>, the returned value is negative integer.
     * @param <b>endDate</b> end date
     * @param <b>startDate</b> start date
     */
    public static int calaculateDateDifference(Calendar startDate, Calendar endDate) {
        long milliSecondDiffrence = (endDate.getTime()).getTime() - (startDate.getTime()).getTime();
        return (int) (milliSecondDiffrence / (1000 * 60 * 60 * 24));
    }

    /**
     * converts Gregorian to Ethiopian date
     * @param gregDate date to be converted
     * @return the corresponding Ethiopian date in String format
     */
    public static String gregorianToEthiopian(String gregDate) {
        return StringDateManipulation.todayInEC(gregDate);
    }

    /**
     * converts ethiopian date to Gregorian
     * @param ethDate date to be converted
     * @return the corresponding Gregorian date in String format
     */
    public static String ethiopianToGregorian(String ethDate) {
        return DateConverter.fromECToGC(ethDate);
    }
/**
 * used for sutract Gregorian year
 * @param year
 * @return
 */
    public static String subtractGregorianYear(int year) {
        Calendar now = Calendar.getInstance();
        Calendar calendar = new GregorianCalendar(now.get(Calendar.YEAR), now.get(Calendar.MONTH), now.get(Calendar.DATE));
        //"Before Subtracting date is: ");
        SimpleDateFormat formatter = new SimpleDateFormat("d-MMMM-yyyy hh:mm");
        // subtract 2 Year
        calendar.add(Calendar.YEAR, -year);
        //"After Subtracting date is: ");
        formatter = new SimpleDateFormat("yyyy-MM-dd");  // ("d-MMMM-yyyy hh:mm");
        return formatter.format(calendar.getTime());
    }
 public static String subtractGregorianYearandAge(int year,String date) {
     
        Calendar now = convertDateToCalendar(date);
        Calendar calendar = new GregorianCalendar(now.get(Calendar.YEAR), now.get(Calendar.MONTH), now.get(Calendar.DATE));
        //"Before Subtracting date is: ");
        SimpleDateFormat formatter = new SimpleDateFormat("d-MMMM-yyyy hh:mm");
        // subtract 2 Year
        calendar.add(Calendar.YEAR, -year);
        //"After Subtracting date is: ");
        formatter = new SimpleDateFormat("yyyy-MM-dd");  // ("d-MMMM-yyyy hh:mm");
        return formatter.format(calendar.getTime());
    }
    public static String subtractGregorianMonth(int month) {
        Calendar cal = Calendar.getInstance();
        cal = Calendar.getInstance();
        cal.add(Calendar.MONTH, -month);
        SimpleDateFormat simpleFormatter = new SimpleDateFormat("yyyy-MM-dd ");
        return simpleFormatter.format(cal.getTime());
    }

    
}
