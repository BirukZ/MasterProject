<<<<<<< .mine
/*
 * Page1.java
 *
 * Created on Feb 26, 2010, 7:48:31 AM
 * Copyright Mekete VS BravoZulu 
 */
package fphrms.Discipline;

import com.icesoft.faces.component.ext.HtmlCommandButton;
import com.icesoft.faces.component.ext.HtmlCommandLink;
import com.icesoft.faces.component.ext.HtmlDataTable;
import com.icesoft.faces.component.ext.HtmlInputText;
import com.icesoft.faces.component.ext.HtmlInputTextarea;
import com.icesoft.faces.component.ext.HtmlOutputLabel;
import com.icesoft.faces.component.ext.HtmlPanelGrid;
import com.icesoft.faces.component.ext.HtmlPanelGroup;
import com.icesoft.faces.component.ext.HtmlSelectBooleanCheckbox;
import com.icesoft.faces.component.ext.HtmlSelectOneMenu;
import com.icesoft.faces.component.ext.HtmlSelectOneRadio;
import com.icesoft.faces.component.ext.RowSelectorEvent;
import com.icesoft.faces.component.ext.UIColumn;
import com.icesoft.faces.component.jsfcl.data.BorderLayoutBean;
import com.icesoft.faces.component.jsfcl.data.DefaultSelectedData;
import com.icesoft.faces.component.jsfcl.data.DefaultSelectionItems;
import com.icesoft.faces.component.jsfcl.data.DefaultTableDataProvider;
import com.icesoft.faces.component.jsfcl.data.PopupBean;
import com.icesoft.faces.component.panellayout.PanelLayout;
import com.icesoft.faces.component.panelpopup.PanelPopup;
import com.icesoft.faces.component.selectinputdate.SelectInputDate;
import com.icesoft.faces.context.effects.JavascriptContext;
import com.sun.rave.faces.data.DefaultSelectItemsArray;
import com.sun.rave.web.ui.appbase.AbstractPageBean;
import com.sun.webui.jsf.model.Option;
import fphrms.ApplicationBean1;
import fphrms.CustomValidations;
import fphrms.RequestBean1;
import fphrms.SessionBean1;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.faces.FacesException;
import javax.faces.component.html.HtmlInputSecret;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;
import manager.authorizationManager.AuthorizationManager.CommeeteeCommentsGiven;
import manager.authorizationManager.AuthorizationManager.RequestHistoryModel;
import manager.committeeManager.CommitteeMemberModel;
import manager.committeeManager.CommitteeMemberRegistrationManager;
import manager.disciplineManager.AccusedDefenceManager;
import manager.disciplineManager.AccusedDefenceManager.AccusedDefenceModel;
//import manager.disciplineManager.CommtteeComments;
import manager.disciplineManager.DisciplineRegistrationManager;
import manager.disciplineManager.DisciplineRequestManager;
import manager.disciplineManager.DisciplineRequestManager.DisciplineRequestModel;
import manager.disciplineManager.DisciplineApproveManager;
import manager.disciplineManager.EyeWitnessManager;
import manager.disciplineManager.EyeWitnessManager.EyeWitnessModel;
import manager.disciplineManager.PenaltyRegistrationManager;
import manager.employeeManager.EmployeeManage;
import manager.globalUseManager.GregorianCalendarManipulation;
import manager.userManagement.SiteSecurityManager;

/**
 * <p>Page bean that corresponds to a similarly named JSP page.  This
 * class contains component definitions (and initialization code) for
 * all components that you have defined on this page, as well as
 * lifecycle methods and event handlers where you may add behavior
 * to respond to incoming events.</p>
 */
public class DisciplineApprovePage extends AbstractPageBean {

    // <editor-fold defaultstate="collapsed" desc="Local Variables">
    private int __placeholder;

    /**
     * <p>Automatically managed component initialization.  <strong>WARNING:</strong>
     * This method is automatically generated, so any user-specified code inserted
     * here is subject to being replaced.</p>
     */
    private void _init() throws Exception {

        loggedInEmployeeId = getSessionBean1().getEmployeeId();
        loggedInEmployeeDept = getSessionBean1().getEmpDeptId();
        userName = getSessionBean1().getUserName();
        //  populateApproverTextComponents(loggedInEmployeeId);
        disciplineRequestManager.setUserName(userName);
        disciplineApproveManager.setUserName(userName);
        pendingRequestLists = disciplineApproveManager.getRequestsToBeProcessed();
        decisionMadeByEmployeeLists = disciplineApproveManager.getDecisionMadeByEmployee();//new ArrayList<Option>();
        committeeForwardList = disciplineApproveManager.getCommeeteforwardListByApprover();
        this.disablecommentspopoUp();
        txt_DeductAmount.setDisabled(true);
        txt_Duration.setDisabled(true);

    }
    private BorderLayoutBean panelBorder1Bean = new BorderLayoutBean();

    public BorderLayoutBean getPanelBorder1Bean() {
        return panelBorder1Bean;
    }

    public void setPanelBorder1Bean(BorderLayoutBean blb) {
        this.panelBorder1Bean = blb;
    }
    private PanelLayout pnProfile = new PanelLayout();

    public CommitteeMemberRegistrationManager getCommitteeMemberRegistrationManager() {
        return committeeMemberRegistrationManager;
    }

    public void setCommitteeMemberRegistrationManager(CommitteeMemberRegistrationManager committeeMemberRegistrationManager) {
        this.committeeMemberRegistrationManager = committeeMemberRegistrationManager;
    }

    public ArrayList<CommitteeMemberModel> getCommitteeMembersList() {
        return committeeMembersList;
    }

    public void setCommitteeMembersList(ArrayList<CommitteeMemberModel> committeeMembersList) {
        this.committeeMembersList = committeeMembersList;
    }

    public int getDeciderCommitteeId() {
        return deciderCommitteeId;
    }

    public void setDeciderCommitteeId(int deciderCommitteeId) {
        this.deciderCommitteeId = deciderCommitteeId;
    }

    public PenaltyRegistrationManager getPenaltyRegistrationManager() {
        return penaltyRegistrationManager;
    }

    public void setPenaltyRegistrationManager(PenaltyRegistrationManager penaltyRegistrationManager) {
        this.penaltyRegistrationManager = penaltyRegistrationManager;
    }

    public SiteSecurityManager getSiteSecurityManager() {
        return siteSecurityManager;
    }

    public void setSiteSecurityManager(SiteSecurityManager siteSecurityManager) {
        this.siteSecurityManager = siteSecurityManager;
    }

    public int getSelectedCommitteeMemberRow() {
        return selectedCommitteeMemberRow;
    }

    public void setSelectedCommitteeMemberRow(int selectedCommitteeMemberRow) {
        this.selectedCommitteeMemberRow = selectedCommitteeMemberRow;
    }

    public PanelLayout getPnProfile() {
        return pnProfile;
    }

    public void setPnProfile(PanelLayout pl) {
        this.pnProfile = pl;
    }
    private HtmlPanelGroup pnlGrpPowerDeligationContent = new HtmlPanelGroup();

    public HtmlPanelGroup getPnlGrpPowerDeligationContent() {
        return pnlGrpPowerDeligationContent;
    }

    public void setPnlGrpPowerDeligationContent(HtmlPanelGroup hpg) {
        this.pnlGrpPowerDeligationContent = hpg;
    }
    private DefaultSelectedData selectedObjectOfPendingList = new DefaultSelectedData();
    private DefaultSelectedData selectedObjectOfDisciplineType = new DefaultSelectedData();
    private DefaultSelectedData selectedObjectPending = new DefaultSelectedData();

    public DefaultSelectedData getSelectedObjectPending() {
        return selectedObjectPending;
    }

    public void setSelectedObjectPending(DefaultSelectedData selectedObjectPending) {
        this.selectedObjectPending = selectedObjectPending;
    }

    public DefaultSelectedData getSelectedObjectOfDisciplineType() {
        return selectedObjectOfDisciplineType;
    }

    public void setSelectedObjectOfDisciplineType(DefaultSelectedData selectedObjectOfDisciplineType) {
        this.selectedObjectOfDisciplineType = selectedObjectOfDisciplineType;
    }

    public DefaultSelectedData getSelectedObjectOfPendingList() {
        return selectedObjectOfPendingList;
    }

    public void setSelectedObjectOfPendingList(DefaultSelectedData selectedObjectOfPendingList) {
        this.selectedObjectOfPendingList = selectedObjectOfPendingList;
    }
    private DefaultSelectedData selectOneMenu2Bean = new DefaultSelectedData();

    public DefaultSelectedData getSelectOneMenu2Bean() {
        return selectOneMenu2Bean;
    }

    public void setSelectOneMenu2Bean(DefaultSelectedData dsd) {
        this.selectOneMenu2Bean = dsd;
    }
    private DefaultSelectionItems selectOneMenu2DefaultItems = new DefaultSelectionItems();

    public DefaultSelectionItems getSelectOneMenu2DefaultItems() {
        return selectOneMenu2DefaultItems;
    }

    public void setSelectOneMenu2DefaultItems(DefaultSelectionItems dsi) {
        this.selectOneMenu2DefaultItems = dsi;
    }
    private DefaultSelectedData defaultSelectedData3 = new DefaultSelectedData();

    public DefaultSelectedData getDefaultSelectedData3() {
        return defaultSelectedData3;
    }

    public void setDefaultSelectedData3(DefaultSelectedData dsd) {
        this.defaultSelectedData3 = dsd;
    }
    private DefaultSelectionItems selectOneMenu1DefaultItems1 = new DefaultSelectionItems();

    public DefaultSelectionItems getSelectOneMenu1DefaultItems1() {
        return selectOneMenu1DefaultItems1;
    }

    public void setSelectOneMenu1DefaultItems1(DefaultSelectionItems dsi) {
        this.selectOneMenu1DefaultItems1 = dsi;
    }
    private DefaultSelectItemsArray selectOneMenu1DefaultItems2 = new DefaultSelectItemsArray();

    public DefaultSelectItemsArray getSelectOneMenu1DefaultItems2() {
        return selectOneMenu1DefaultItems2;
    }

    public void setSelectOneMenu1DefaultItems2(DefaultSelectItemsArray dsia) {
        this.selectOneMenu1DefaultItems2 = dsia;
    }
    private DefaultSelectItemsArray selectOneMenu1DefaultItems3 = new DefaultSelectItemsArray();

    public DefaultSelectItemsArray getSelectOneMenu1DefaultItems3() {
        return selectOneMenu1DefaultItems3;
    }

    public void setSelectOneMenu1DefaultItems3(DefaultSelectItemsArray dsia) {
        this.selectOneMenu1DefaultItems3 = dsia;
    }
    private HtmlInputText txtRequesterDepartment = new HtmlInputText();

    public HtmlInputText getTxtRequesterDepartment() {
        return txtRequesterDepartment;
    }

    public void setTxtRequesterDepartment(HtmlInputText hit) {
        this.txtRequesterDepartment = hit;
    }
    private HtmlInputText txtRequesterId = new HtmlInputText();

    public HtmlInputText getTxtRequesterId() {
        return txtRequesterId;
    }

    public void setTxtRequesterId(HtmlInputText hit) {
        this.txtRequesterId = hit;
    }
    private HtmlInputText txtRequesterFullName = new HtmlInputText();

    public HtmlInputText getTxtRequesterFullName() {
        return txtRequesterFullName;
    }

    public void setTxtRequesterFullName(HtmlInputText hit) {
        this.txtRequesterFullName = hit;
    }
    private HtmlInputText txtRequesterPosition = new HtmlInputText();

    public HtmlInputText getTxtRequesterPosition() {
        return txtRequesterPosition;
    }

    public void setTxtRequesterPosition(HtmlInputText hit) {
        this.txtRequesterPosition = hit;
    }
    private HtmlInputText txtEmployeeDepartment = new HtmlInputText();

    public HtmlInputText getTxtEmployeeDepartment() {
        return txtEmployeeDepartment;
    }

    public void setTxtEmployeeDepartment(HtmlInputText hit) {
        this.txtEmployeeDepartment = hit;
    }
    private HtmlInputText txtEmployeeId = new HtmlInputText();

    public HtmlInputText getTxtEmployeeId() {
        return txtEmployeeId;
    }

    public void setTxtEmployeeId(HtmlInputText hit) {
        this.txtEmployeeId = hit;
    }
    private HtmlInputText txtEmployeeFullName = new HtmlInputText();

    public HtmlInputText getTxtEmployeeFullName() {
        return txtEmployeeFullName;
    }

    public void setTxtEmployeeFullName(HtmlInputText hit) {
        this.txtEmployeeFullName = hit;
    }
    private HtmlInputText txtEmployeePosition = new HtmlInputText();

    public HtmlInputText getTxtEmployeePosition() {
        return txtEmployeePosition;
    }

    public void setTxtEmployeePosition(HtmlInputText hit) {
        this.txtEmployeePosition = hit;
    }
    private HtmlInputText txtDisciplineDate = new HtmlInputText();

    public HtmlInputText getTxtDisciplineDate() {
        return txtDisciplineDate;
    }

    public void setTxtDisciplineDate(HtmlInputText hit) {
        this.txtDisciplineDate = hit;
    }
    private HtmlInputText txtReportedDate = new HtmlInputText();

    public HtmlInputText getTxtReportedDate() {
        return txtReportedDate;
    }

    public void setTxtReportedDate(HtmlInputText hit) {
        this.txtReportedDate = hit;
    }
    private HtmlSelectOneMenu drlDisciplineType = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlDisciplineType() {
        return drlDisciplineType;
    }

    public void setDrlDisciplineType(HtmlSelectOneMenu hsom) {
        this.drlDisciplineType = hsom;
    }
    private HtmlInputTextarea txtaDisciplineDescription = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaDisciplineDescription() {
        return txtaDisciplineDescription;
    }

    public void setTxtaDisciplineDescription(HtmlInputTextarea hit) {
        this.txtaDisciplineDescription = hit;
    }
    private HtmlInputText txtDisciplinePreviousOccurance = new HtmlInputText();

    public HtmlInputText getTxtDisciplinePreviousOccurance() {
        return txtDisciplinePreviousOccurance;
    }

    public void setTxtDisciplinePreviousOccurance(HtmlInputText hit) {
        this.txtDisciplinePreviousOccurance = hit;
    }
    private SelectInputDate calOffenceDate = new SelectInputDate();

    public SelectInputDate getCalOffenceDate() {
        return calOffenceDate;
    }

    public void setCalOffenceDate(SelectInputDate sid) {
        this.calOffenceDate = sid;
    }
    private SelectInputDate calReportedDate = new SelectInputDate();

    public SelectInputDate getCalReportedDate() {
        return calReportedDate;
    }

    public void setCalReportedDate(SelectInputDate sid) {
        this.calReportedDate = sid;
    }
    private HtmlInputTextarea txtaDisciplineDecisionTobeTaken = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaDisciplineDecisionTobeTaken() {
        return txtaDisciplineDecisionTobeTaken;
    }

    public void setTxtaDisciplineDecisionTobeTaken(HtmlInputTextarea hit) {
        this.txtaDisciplineDecisionTobeTaken = hit;
    }
    private PanelPopup pnlPopupViewAccusedComment = new PanelPopup();

    public String getExpectedPenalty() {
        return expectedPenalty;
    }

    public void setExpectedPenalty(String expectedPenalty) {
        this.expectedPenalty = expectedPenalty;
    }

    public PanelPopup getPnlPopupViewAccusedComment() {
        return pnlPopupViewAccusedComment;
    }

    public void setPnlPopupViewAccusedComment(PanelPopup pnlPopupViewAccusedComment) {
        this.pnlPopupViewAccusedComment = pnlPopupViewAccusedComment;
    }
    private HtmlCommandButton commentsbtnClosePopupSuccessOrFailure = new HtmlCommandButton();
    private HtmlOutputLabel lblSuccessOrErrorMessage = new HtmlOutputLabel();
    private HtmlOutputLabel commenteslblSuccessOrErrorMessage = new HtmlOutputLabel();
    private PanelLayout pnlMessageBody = new PanelLayout();
    private PanelLayout commentspnlMessageBody = new PanelLayout();
    private HtmlPanelGroup panelGroupMessage = new HtmlPanelGroup();
    private HtmlOutputText comenetspnMessageTitle = new HtmlOutputText();
    private HtmlPanelGroup commentespanelGroupMessage = new HtmlPanelGroup();
    private PanelPopup pnlPopupSuccessOrFailure = new PanelPopup();
    private PanelPopup comeentespnlPopupSuccessOrFailure = new PanelPopup();

    public HtmlOutputText getComenetspnMessageTitle() {
        return comenetspnMessageTitle;
    }

    public void setComenetspnMessageTitle(HtmlOutputText comenetspnMessageTitle) {
        this.comenetspnMessageTitle = comenetspnMessageTitle;
    }

    public HtmlCommandButton getCommentsbtnClosePopupSuccessOrFailure() {
        return commentsbtnClosePopupSuccessOrFailure;
    }

    public void setCommentsbtnClosePopupSuccessOrFailure(HtmlCommandButton commentsbtnClosePopupSuccessOrFailure) {
        this.commentsbtnClosePopupSuccessOrFailure = commentsbtnClosePopupSuccessOrFailure;
    }

    public PanelLayout getCommentspnlMessageBody() {
        return commentspnlMessageBody;
    }

    public void setCommentspnlMessageBody(PanelLayout commentspnlMessageBody) {
        this.commentspnlMessageBody = commentspnlMessageBody;
    }

    public HtmlOutputLabel getCommenteslblSuccessOrErrorMessage() {
        return commenteslblSuccessOrErrorMessage;
    }

    public void setCommenteslblSuccessOrErrorMessage(HtmlOutputLabel commenteslblSuccessOrErrorMessage) {
        this.commenteslblSuccessOrErrorMessage = commenteslblSuccessOrErrorMessage;
    }

    public HtmlPanelGroup getCommentespanelGroupMessage() {
        return commentespanelGroupMessage;
    }

    public void setCommentespanelGroupMessage(HtmlPanelGroup commentespanelGroupMessage) {
        this.commentespanelGroupMessage = commentespanelGroupMessage;
    }

    public PanelPopup getComeentespnlPopupSuccessOrFailure() {
        return comeentespnlPopupSuccessOrFailure;
    }

    public void setComeentespnlPopupSuccessOrFailure(PanelPopup comeentespnlPopupSuccessOrFailure) {
        this.comeentespnlPopupSuccessOrFailure = comeentespnlPopupSuccessOrFailure;
    }

    public PanelPopup getPnlPopupSuccessOrFailure() {
        return pnlPopupSuccessOrFailure;
    }

    public String btnClosePopupSuccessOrFailure_action() {
        pnlPopupViewAccusedComment.setRendered(false);
        pnlPopupSuccessOrFailure.setRendered(false);
        return null;
    }

    public String btnClosePopupViewAccusedComment_action() {
        pnlPopupViewAccusedComment.setRendered(false);
        pnlPopupSuccessOrFailure.setRendered(false);
        return null;
    }

    public void setPnlPopupSuccessOrFailure(PanelPopup pp) {
        this.pnlPopupSuccessOrFailure = pp;
    }

    public SimpleDateFormat getDateFormat() {
        return dateFormat;
    }

    public void setDateFormat(SimpleDateFormat dateFormat) {
        this.dateFormat = dateFormat;
    }

    public String getDateOfOffence() {
        return dateOfOffence;
    }

    public void setDateOfOffence(String dateOfOffence) {
        this.dateOfOffence = dateOfOffence;
    }

    public String getDescriptionOfOffence() {
        return descriptionOfOffence;
    }

    public void setDescriptionOfOffence(String descriptionOfOffence) {
        this.descriptionOfOffence = descriptionOfOffence;
    }

    public int getDisciplineProblemId() {
        return disciplineProblemId;
    }

    public void setDisciplineProblemId(int disciplineProblemId) {
        this.disciplineProblemId = disciplineProblemId;
    }

    public DisciplineRegistrationManager getDisciplineRegistrationManager() {
        return disciplineRegistrationManager;
    }

    public void setDisciplineRegistrationManager(DisciplineRegistrationManager disciplineRegistrationManager) {
        this.disciplineRegistrationManager = disciplineRegistrationManager;
    }

    public String getIsDocumentAttached() {
        return isDocumentAttached;
    }

    public void setIsDocumentAttached(String isDocumentAttached) {
        this.isDocumentAttached = isDocumentAttached;
    }

    public String getOffenceType() {
        return offenceType;
    }

    public void setOffenceType(String offenceType) {
        this.offenceType = offenceType;
    }

    public String getOffenderId() {
        return offenderId;
    }

    public void setOffenderId(String offenderId) {
        this.offenderId = offenderId;
    }

    public int getRepititionOfOffence() {
        return repititionOfOffence;
    }

    public void setRepititionOfOffence(int repititionOfOffence) {
        this.repititionOfOffence = repititionOfOffence;
    }

    public String getReportedDate() {
        return reportedDate;
    }

    public void setReportedDate(String reportedDate) {
        this.reportedDate = reportedDate;
    }

    public String getRequestedMeasureToBeTaken() {
        return requestedMeasureToBeTaken;
    }

    public void setRequestedMeasureToBeTaken(String requestedMeasureToBeTaken) {
        this.requestedMeasureToBeTaken = requestedMeasureToBeTaken;
    }

    public String getRequesterType() {
        return requesterType;
    }

    public void setRequesterType(String requesterType) {
        this.requesterType = requesterType;
    }

    public String getCurrentStatus() {
        return currentStatus;
    }

    public void setCurrentStatus(String currentStatus) {
        this.currentStatus = currentStatus;
    }

    public DisciplineApproveManager getDisciplineApproveManager() {
        return disciplineApproveManager;
    }

    public void setDisciplineApproveManager(DisciplineApproveManager disciplineApproveManager) {
        this.disciplineApproveManager = disciplineApproveManager;
    }
    private HtmlCommandButton btnReset = new HtmlCommandButton();

    public HtmlCommandButton getBtnReset() {
        return btnReset;
    }

    public void setBtnReset(HtmlCommandButton hcb) {
        this.btnReset = hcb;
    }

    public AccusedDefenceManager getAccusedDefenceManager() {
        return accusedDefenceManager;
    }

    public void setAccusedDefenceManager(AccusedDefenceManager accusedDefenceManager) {
        this.accusedDefenceManager = accusedDefenceManager;
    }

    public ArrayList<DisciplineRequestModel> getAllCommittedOffencesOfEmployee() {
        return allCommittedOffencesOfEmployee;
    }

    public void setAllCommittedOffencesOfEmployee(ArrayList<DisciplineRequestModel> allCommittedOffencesOfEmployee) {
        this.allCommittedOffencesOfEmployee = allCommittedOffencesOfEmployee;
    }
    private PanelPopup pnlPopupAllCommittedOffences = new PanelPopup();

    public PanelPopup getPnlPopupAllCommittedOffences() {
        return pnlPopupAllCommittedOffences;
    }

    public void setPnlPopupAllCommittedOffences(PanelPopup pp) {
        this.pnlPopupAllCommittedOffences = pp;
    }
    public HtmlCommandButton LoginButton = new HtmlCommandButton();

    public HtmlCommandButton getLoginButton() {
        return LoginButton;
    }

    public void setLoginButton(HtmlCommandButton LoginButton) {
        this.LoginButton = LoginButton;
    }
    private HtmlCommandButton btnPostDecision = new HtmlCommandButton();

    public HtmlCommandButton getBtnPostDecision() {
        return btnPostDecision;
    }

    public void setBtnPostDecision(HtmlCommandButton hcb) {
        this.btnPostDecision = hcb;
    }
    private DefaultSelectedData selectObjectOfCommittee = new DefaultSelectedData();

    public DefaultSelectedData getSelectObjectOfCommittee() {
        return selectObjectOfCommittee;
    }

    public void setSelectObjectOfCommittee(DefaultSelectedData selectObjectOfCommittee) {
        this.selectObjectOfCommittee = selectObjectOfCommittee;
    }
    private DefaultSelectedData selectedDataOfPenality = new DefaultSelectedData();

    public DefaultSelectedData getSelectedDataOfPenality() {
        return selectedDataOfPenality;
    }

    public ArrayList<Option> getPenaltyTypesListOption() {
        return penaltyTypesListOption;
    }

    public void setPenaltyTypesListOption(ArrayList<Option> penaltyTypesListOption) {
        this.penaltyTypesListOption = penaltyTypesListOption;
    }

    public void setSelectedDataOfPenality(DefaultSelectedData selectedDataOfPenality) {
        this.selectedDataOfPenality = selectedDataOfPenality;
    }
    private DefaultSelectedData selectObjectOfDecisionType = new DefaultSelectedData();

    public DefaultSelectedData getSelectObjectOfDecisionType() {
        return selectObjectOfDecisionType;
    }

    public void setSelectObjectOfDecisionType(DefaultSelectedData selectObjectOfDecisionType) {
        this.selectObjectOfDecisionType = selectObjectOfDecisionType;
    }
    private DefaultSelectedData selectOneMenu1Bean = new DefaultSelectedData();

    public DefaultSelectedData getSelectOneMenu1Bean() {
        return selectOneMenu1Bean;
    }

    public void setSelectOneMenu1Bean(DefaultSelectedData dsd) {
        this.selectOneMenu1Bean = dsd;
    }
    private DefaultSelectionItems selectOneMenu1DefaultItems = new DefaultSelectionItems();

    public DefaultSelectionItems getSelectOneMenu1DefaultItems() {
        return selectOneMenu1DefaultItems;
    }

    public void setSelectOneMenu1DefaultItems(DefaultSelectionItems dsi) {
        this.selectOneMenu1DefaultItems = dsi;
    }
    private HtmlSelectOneMenu drlDecision = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlDecision() {
        return drlDecision;
    }

    public void setDrlDecision(HtmlSelectOneMenu hsom) {
        this.drlDecision = hsom;
    }
    private HtmlInputTextarea txtaDecisionExplanation = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaDecisionExplanation() {
        return txtaDecisionExplanation;
    }

    public void setTxtaDecisionExplanation(HtmlInputTextarea hit) {
        this.txtaDecisionExplanation = hit;
    }
    private HtmlInputTextarea txtaPenalityShouldBeGivenForThisOffence = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaPenalityShouldBeGivenForThisOffence() {
        return txtaPenalityShouldBeGivenForThisOffence;
    }

    public void setTxtaPenalityShouldBeGivenForThisOffence(HtmlInputTextarea hit) {
        this.txtaPenalityShouldBeGivenForThisOffence = hit;
    }
    private DefaultSelectedData selectOneListbox1Bean = new DefaultSelectedData();

    public DefaultSelectedData getSelectOneListbox1Bean() {
        return selectOneListbox1Bean;
    }

    public void setSelectOneListbox1Bean(DefaultSelectedData dsd) {
        this.selectOneListbox1Bean = dsd;
    }
    private HtmlCommandLink lnkToAccusedCommentPage = new HtmlCommandLink();

    public String getAgreeOnDefaultPenalty() {
        return agreeOnDefaultPenalty;
    }

    public void setAgreeOnDefaultPenalty(String agreeOnDefaultPenalty) {
        this.agreeOnDefaultPenalty = agreeOnDefaultPenalty;
    }

    public HtmlCommandLink getLnkToAccusedCommentPage() {
        return lnkToAccusedCommentPage;
    }

    public void setLnkToAccusedCommentPage(HtmlCommandLink btnToAccusedCommentPage) {
        this.lnkToAccusedCommentPage = btnToAccusedCommentPage;
    }
    private DefaultSelectedData selectOneRadio1Bean = new DefaultSelectedData();

    public DefaultSelectedData getSelectOneRadio1Bean() {
        return selectOneRadio1Bean;
    }

    public void setSelectOneRadio1Bean(DefaultSelectedData dsd) {
        this.selectOneRadio1Bean = dsd;
    }
    private DefaultSelectionItems selectOneRadio1DefaultItems = new DefaultSelectionItems();

    public DefaultSelectionItems getSelectOneRadio1DefaultItems() {
        return selectOneRadio1DefaultItems;
    }

    public void setSelectOneRadio1DefaultItems(DefaultSelectionItems dsi) {
        this.selectOneRadio1DefaultItems = dsi;
    }
    private HtmlSelectOneRadio radioGroupAgreeOnDefaultPenalty = new HtmlSelectOneRadio();

    public HtmlSelectOneRadio getRadioGroupAgreeOnDefaultPenalty() {
        return radioGroupAgreeOnDefaultPenalty;
    }

    public void setRadioGroupAgreeOnDefaultPenalty(HtmlSelectOneRadio hsor) {
        this.radioGroupAgreeOnDefaultPenalty = hsor;
    }
    private DefaultSelectedData selectBooleanCheckbox1Bean = new DefaultSelectedData();

    public DefaultSelectedData getSelectBooleanCheckbox1Bean() {
        return selectBooleanCheckbox1Bean;
    }

    public void setSelectBooleanCheckbox1Bean(DefaultSelectedData dsd) {
        this.selectBooleanCheckbox1Bean = dsd;
    }
    private HtmlSelectBooleanCheckbox ckbForwardToCommittee = new HtmlSelectBooleanCheckbox();

    public HtmlSelectBooleanCheckbox getCkbForwardToCommittee() {
        return ckbForwardToCommittee;
    }

    public void setCkbForwardToCommittee(HtmlSelectBooleanCheckbox hsbc) {
        this.ckbForwardToCommittee = hsbc;
    }
    private HtmlSelectOneMenu drlCommittee = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlCommittee() {
        return drlCommittee;
    }

    public void setDrlCommittee(HtmlSelectOneMenu hsom) {
        this.drlCommittee = hsom;
    }
    private PanelLayout pnlLayoutDecisoion = new PanelLayout();

    public PanelLayout getPnlLayoutDecisoion() {
        return pnlLayoutDecisoion;
    }

    public void setPnlLayoutDecisoion(PanelLayout pl) {
        this.pnlLayoutDecisoion = pl;
    }
    private HtmlInputTextarea txtaPenaltyAcceptance = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaPenaltyAcceptance() {
        return txtaPenaltyAcceptance;
    }

    public void setTxtaPenaltyAcceptance(HtmlInputTextarea hit) {
        this.txtaPenaltyAcceptance = hit;
    }
    private HtmlInputTextarea txtaAccusationAcceptance = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaAccusationAcceptance() {
        return txtaAccusationAcceptance;
    }

    public void setTxtaAccusationAcceptance(HtmlInputTextarea hit) {
        this.txtaAccusationAcceptance = hit;
    }
    private HtmlOutputLabel lblAccusationAcceptanceValue = new HtmlOutputLabel();

    public HtmlOutputLabel getLblAccusationAcceptanceValue() {
        return lblAccusationAcceptanceValue;
    }

    public void setLblAccusationAcceptanceValue(HtmlOutputLabel hol) {
        this.lblAccusationAcceptanceValue = hol;
    }
    private HtmlOutputLabel lblPenaltyAcceptanceValue = new HtmlOutputLabel();

    public HtmlOutputLabel getLblPenaltyAcceptanceValue() {
        return lblPenaltyAcceptanceValue;
    }

    public void setLblPenaltyAcceptanceValue(HtmlOutputLabel hol) {
        this.lblPenaltyAcceptanceValue = hol;
    }
    private HtmlCommandLink lnkViewAccusedComment = new HtmlCommandLink();

    public HtmlCommandLink getLnkViewAccusedComment() {
        return lnkViewAccusedComment;
    }

    public void setLnkViewAccusedComment(HtmlCommandLink lnkViewAccusedComment) {
        this.lnkViewAccusedComment = lnkViewAccusedComment;
    }
    private HtmlCommandLink cmdLinkViewPreviesDecisions = new HtmlCommandLink();

    public HtmlCommandLink getCmdLinkViewPreviesDecisions() {
        return cmdLinkViewPreviesDecisions;
    }

    public void setCmdLinkViewPreviesDecisions(HtmlCommandLink hcl) {
        this.cmdLinkViewPreviesDecisions = hcl;
    }
    private HtmlOutputLabel lblCommittee = new HtmlOutputLabel();

    public HtmlOutputLabel getLblCommittee() {
        return lblCommittee;
    }

    public void setLblCommittee(HtmlOutputLabel hol) {
        this.lblCommittee = hol;
    }
    private PanelPopup pnlPopupCommitteeMembers = new PanelPopup();

    public PanelPopup getPnlPopupCommitteeMembers() {
        return pnlPopupCommitteeMembers;
    }

    public void setPnlPopupCommitteeMembers(PanelPopup pp) {
        this.pnlPopupCommitteeMembers = pp;
    }
    private HtmlInputText txtDocReferenceNumber = new HtmlInputText();

    public HtmlInputText getTxtDocReferenceNumber() {
        return txtDocReferenceNumber;
    }

    public void setTxtDocReferenceNumber(HtmlInputText hit) {
        this.txtDocReferenceNumber = hit;
    }
    private HtmlOutputLabel lbDecision = new HtmlOutputLabel();

    public HtmlOutputLabel getLbDecision() {
        return lbDecision;
    }

    public void setLbDecision(HtmlOutputLabel hol) {
        this.lbDecision = hol;
    }
    private HtmlCommandLink cmdLinkConfirmCommitteeDecisions = new HtmlCommandLink();

    public HtmlCommandLink getCmdLinkConfirmCommitteeDecisions() {
        return cmdLinkConfirmCommitteeDecisions;
    }

    public void setCmdLinkConfirmCommitteeDecisions(HtmlCommandLink hcl) {
        this.cmdLinkConfirmCommitteeDecisions = hcl;
    }
    private HtmlCommandLink cmdLnkClosePopupCommitteeMembers = new HtmlCommandLink();

    public HtmlCommandLink getCmdLnkClosePopupCommitteeMembers() {
        return cmdLnkClosePopupCommitteeMembers;
    }

    public void setCmdLnkClosePopupCommitteeMembers(HtmlCommandLink hcl) {
        this.cmdLnkClosePopupCommitteeMembers = hcl;
    }
    private HtmlOutputLabel lblSignInReminder = new HtmlOutputLabel();

    public HtmlOutputLabel getLblSignInReminder() {
        return lblSignInReminder;
    }

    public void setLblSignInReminder(HtmlOutputLabel hol) {
        this.lblSignInReminder = hol;
    }
    private HtmlCommandLink lnkViewEyeWitnessComment = new HtmlCommandLink();

    public HtmlCommandLink getLnkViewEyeWitnessComment() {
        return lnkViewEyeWitnessComment;
    }
    private HtmlSelectOneMenu drlSummaryOfWitness = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlSummaryOfWitness() {
        return drlSummaryOfWitness;
    }

    public void setDrlSummaryOfWitness(HtmlSelectOneMenu drlSummaryOfWitness) {
        this.drlSummaryOfWitness = drlSummaryOfWitness;
    }

    public ArrayList<EyeWitnessModel> getEyeWitnessesList() {
        return eyeWitnessesList;
    }

    public void setEyeWitnessesList(ArrayList<EyeWitnessModel> eyeWitnessesList) {
        this.eyeWitnessesList = eyeWitnessesList;
    }

    public void setLnkViewEyeWitnessComment(HtmlCommandLink hcl) {
        this.lnkViewEyeWitnessComment = hcl;
    }
    private HtmlSelectOneMenu drlNewPenalty = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlNewPenalty() {
        return drlNewPenalty;
    }

    public EyeWitnessManager getEyeWitnessManager() {
        return eyeWitnessManager;
    }

    public void setEyeWitnessManager(EyeWitnessManager eyeWitnessManager) {
        this.eyeWitnessManager = eyeWitnessManager;
    }

    public ArrayList<Option> getSummaryList() {
        return summaryList;
    }

    public void setSummaryList(ArrayList<Option> summaryList) {
        this.summaryList = summaryList;
    }

    public void setDrlNewPenalty(HtmlSelectOneMenu hsom) {
        this.drlNewPenalty = hsom;
    }
    private PanelPopup pnlEyeWitnessesRegistration = new PanelPopup();

    public PanelPopup getPnlEyeWitnessesRegistration() {
        return pnlEyeWitnessesRegistration;
    }

    public void setPnlEyeWitnessesRegistration(PanelPopup pp) {
        this.pnlEyeWitnessesRegistration = pp;
    }
    private DefaultTableDataProvider defaultTableDataProvider = new DefaultTableDataProvider();

    public DefaultTableDataProvider getDefaultTableDataProvider() {
        return defaultTableDataProvider;
    }

    public void setDefaultTableDataProvider(DefaultTableDataProvider dtdp) {
        this.defaultTableDataProvider = dtdp;
    }
    private HtmlOutputText loginConfirmed1 = new HtmlOutputText();

    public HtmlOutputText getLoginConfirmed1() {
        return loginConfirmed1;
    }

    public void setLoginConfirmed1(HtmlOutputText hot) {
        this.loginConfirmed1 = hot;
    }
    private PopupBean panelPopup1Bean = new PopupBean();

    public PopupBean getPanelPopup1Bean() {
        return panelPopup1Bean;
    }

    public void setPanelPopup1Bean(PopupBean pb) {
        this.panelPopup1Bean = pb;
    }
    private PanelPopup panelPopupMessageForCommeteComentes = new PanelPopup();

    public PanelPopup getPanelPopupMessageForCommeteComentes() {
        return panelPopupMessageForCommeteComentes;
    }

    public void setPanelPopupMessageForCommeteComentes(PanelPopup pp) {
        this.panelPopupMessageForCommeteComentes = pp;
    }
    private javax.faces.component.html.HtmlInputText employeeID_textField = new javax.faces.component.html.HtmlInputText();

    public javax.faces.component.html.HtmlInputText getEmployeeID_textField() {
        return employeeID_textField;
    }

    public void setEmployeeID_textField(javax.faces.component.html.HtmlInputText hit) {
        this.employeeID_textField = hit;
    }
    private javax.faces.component.html.HtmlInputText employeeName_textField = new javax.faces.component.html.HtmlInputText();

    public javax.faces.component.html.HtmlInputText getEmployeeName_textField() {
        return employeeName_textField;
    }

    public void setEmployeeName_textField(javax.faces.component.html.HtmlInputText hit) {
        this.employeeName_textField = hit;
    }
    private javax.faces.component.html.HtmlInputTextarea responsiblity_textArea = new javax.faces.component.html.HtmlInputTextarea();

    public javax.faces.component.html.HtmlInputTextarea getResponsiblity_textArea() {
        return responsiblity_textArea;
    }

    public void setResponsiblity_textArea(javax.faces.component.html.HtmlInputTextarea hit) {
        this.responsiblity_textArea = hit;
    }
    private HtmlInputSecret password_secretField = new HtmlInputSecret();

    public HtmlInputSecret getPassword_secretField() {
        return password_secretField;
    }

    public void setPassword_secretField(HtmlInputSecret his) {
        this.password_secretField = his;
    }
    private javax.faces.component.html.HtmlInputText userName_textField = new javax.faces.component.html.HtmlInputText();

    public javax.faces.component.html.HtmlInputText getUserName_textField() {
        return userName_textField;
    }

    public void setUserName_textField(javax.faces.component.html.HtmlInputText hit) {
        this.userName_textField = hit;
    }
    private HtmlCommandLink cmdview_Committee_Comments = new HtmlCommandLink();

    public HtmlCommandLink getCmdview_Committee_Comments() {
        return cmdview_Committee_Comments;
    }

    public void setCmdview_Committee_Comments(HtmlCommandLink hcl) {
        this.cmdview_Committee_Comments = hcl;
    }
    private PanelPopup pnlPopupComeeteeComenets = new PanelPopup();

    public PanelPopup getPnlPopupComeeteeComenets() {
        return pnlPopupComeeteeComenets;
    }

    public void setPnlPopupComeeteeComenets(PanelPopup pp) {
        this.pnlPopupComeeteeComenets = pp;
    }
    private HtmlPanelGrid panelGridPopupViewCommiteeCommentes = new HtmlPanelGrid();

    public HtmlPanelGrid getPanelGridPopupViewCommiteeCommentes() {
        return panelGridPopupViewCommiteeCommentes;
    }

    public void setPanelGridPopupViewCommiteeCommentes(HtmlPanelGrid hpg) {
        this.panelGridPopupViewCommiteeCommentes = hpg;
    }
    private com.icesoft.faces.component.ext.HtmlOutputText otxtViewCommeeteCommentesPopupHeader1 = new com.icesoft.faces.component.ext.HtmlOutputText();

    public com.icesoft.faces.component.ext.HtmlOutputText getOtxtViewCommeeteCommentesPopupHeader1() {
        return otxtViewCommeeteCommentesPopupHeader1;
    }

    public void setOtxtViewCommeeteCommentesPopupHeader1(com.icesoft.faces.component.ext.HtmlOutputText hot) {
        this.otxtViewCommeeteCommentesPopupHeader1 = hot;
    }
    private HtmlCommandButton btnClosePopupCommeeteComeentes = new HtmlCommandButton();

    public HtmlCommandButton getBtnClosePopupCommeeteComeentes() {
        return btnClosePopupCommeeteComeentes;
    }

    public void setBtnClosePopupCommeeteComeentes(HtmlCommandButton hcb) {
        this.btnClosePopupCommeeteComeentes = hcb;
    }
    private PanelLayout pnlLayoutCommeeteComentes = new PanelLayout();

    public PanelLayout getPnlLayoutCommeeteComentes() {
        return pnlLayoutCommeeteComentes;
    }

    public void setPnlLayoutCommeeteComentes(PanelLayout pl) {
        this.pnlLayoutCommeeteComentes = pl;
    }
    private PanelLayout pnlLayoutPopupCommeteeCommentes = new PanelLayout();

    public PanelLayout getPnlLayoutPopupCommeteeCommentes() {
        return pnlLayoutPopupCommeteeCommentes;
    }

    public void setPnlLayoutPopupCommeteeCommentes(PanelLayout pl) {
        this.pnlLayoutPopupCommeteeCommentes = pl;
    }
    private HtmlDataTable dataTableCommetesComentes = new HtmlDataTable();

    public HtmlDataTable getDataTableCommetesComentes() {
        return dataTableCommetesComentes;
    }

    public void setDataTableCommetesComentes(HtmlDataTable hdt) {
        this.dataTableCommetesComentes = hdt;
    }
    private UIColumn colCommeentsGivenDay = new UIColumn();

    public UIColumn getColCommeentsGivenDay() {
        return colCommeentsGivenDay;
    }

    public void setColCommeentsGivenDay(UIColumn uic) {
        this.colCommeentsGivenDay = uic;
    }
    private javax.faces.component.html.HtmlInputText txt_CommeentsGivenDay = new javax.faces.component.html.HtmlInputText();

    public javax.faces.component.html.HtmlInputText getTxt_CommeentsGivenDay() {
        return txt_CommeentsGivenDay;
    }

    public void setTxt_CommeentsGivenDay(javax.faces.component.html.HtmlInputText hit) {
        this.txt_CommeentsGivenDay = hit;
    }
    private HtmlInputText txt_DeductAmount = new HtmlInputText();

    public HtmlInputText getTxt_DeductAmount() {
        return txt_DeductAmount;
    }

    public void setTxt_DeductAmount(HtmlInputText hit) {
        this.txt_DeductAmount = hit;
    }
    private HtmlInputText txt_Duration = new HtmlInputText();

    public HtmlInputText getTxt_Duration() {
        return txt_Duration;
    }

    public void setTxt_Duration(HtmlInputText hit) {
        this.txt_Duration = hit;
    }
    private DefaultSelectedData defaultSelectedData4 = new DefaultSelectedData();

    public DefaultSelectedData getDefaultSelectedData4() {
        return defaultSelectedData4;
    }

    public void setDefaultSelectedData4(DefaultSelectedData dsd) {
        this.defaultSelectedData4 = dsd;
    }


    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Local Variables">
    /**
     * <p>Construct a new Page bean instance.</p>
     */
    public DisciplineApprovePage() {
    }

    /**
     * <p>Callback method that is called whenever a page is navigated to,
     * either directly via a URL, or indirectly via page navigation.
     * Customize this method to acquire resources that will be needed
     * for event handlers and lifecycle methods, whether or not this
     * page is performing post back processing.</p>
     *
     * <p>Note that, if the current request is a postback, the property
     * values of the components do <strong>not</strong> represent any
     * values submitted with this request.  Instead, they represent the
     * property values that were saved for this view when it was rendered.</p>
     */
    public void init() {
        // txt_CommeentsGivenDay.setValue("this is test ");
        // Perform initializations inherited from our superclass
        super.init();
        // Perform application initialization that must complete
        // *before* managed components are initialized
        // TODO - add your own initialiation code here

        // <editor-fold defaultstate="collapsed" desc="Managed Component Initialization">
        // Initialize automatically managed components
        // *Note* - this logic should NOT be modified
        try {
            _init();
        } catch (Exception e) {
            log("Page1 Initialization Failure", e);
            throw e instanceof FacesException ? (FacesException) e : new FacesException(e);
        }

    // </editor-fold>
    // Perform application initialization that must complete
    // *after* managed components are initialized
    // TODO - add your own initialization code here
    }

    /**
     * <p>Callback method that is called after the component tree has been
     * restored, but before any event processing takes place.  This method
     * will <strong>only</strong> be called on a postback request that
     * is processing a form submit.  Customize this method to allocate
     * resources that will be required in your event handlers.</p>
     */
    public void preprocess() {
    }

    /**
     * <p>Callback method that is called just before rendering takes place.
     * This method will <strong>only</strong> be called for the page that
     * will actually be rendered (and not, for example, on a page that
     * handled a postback and then navigated to a different page).  Customize
     * this method to allocate resources that will be required for rendering
     * this page.</p>
     */
    public void prerender() {
    }

    /**
     * <p>Callback method that is called after rendering is completed for
     * this request, if <code>init()</code> was called (regardless of whether
     * or not this was the page that was actually rendered).  Customize this
     * method to release resources acquired in the <code>init()</code>,
     * <code>preprocess()</code>, or <code>prerender()</code> methods (or
     * acquired during execution of an event handler).</p>
     */
    public void destroy() {
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected ApplicationBean1 getApplicationBean1() {
        return (ApplicationBean1) getBean("ApplicationBean1");
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected RequestBean1 getRequestBean1() {
        return (RequestBean1) getBean("RequestBean1");
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected SessionBean1 getSessionBean1() {
        return (SessionBean1) getBean("SessionBean1");
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected CustomValidations getCustomValidations() {
        return (CustomValidations) getBean("CustomValidations");
    } // </editor-fold>
/////////////////////////////////////////////////////////////////////////////////////////////
    String loggedInEmployeeId;
    String loggedInEmployeeDept;
    String disciplinedEmployeeId;
    String userName;
    //CommtteeComments commentes = new CommtteeComments();
    EmployeeManage employeeManager = new EmployeeManage();
    EyeWitnessManager eyeWitnessManager = new EyeWitnessManager();
    DisciplineRequestManager disciplineRequestManager = new DisciplineRequestManager();
    DisciplineApproveManager disciplineApproveManager = new DisciplineApproveManager();
    DisciplineRegistrationManager disciplineRegistrationManager = new DisciplineRegistrationManager();
    CommitteeMemberModel newCommentes = new CommitteeMemberModel();
    PenaltyRegistrationManager penaltyRegistrationManager = new PenaltyRegistrationManager();
    SiteSecurityManager siteSecurityManager = new SiteSecurityManager();
    // CommitteeManager committeeManager = new CommitteeManager();
    CommitteeMemberRegistrationManager committeeMemberRegistrationManager = new CommitteeMemberRegistrationManager();
    AccusedDefenceManager accusedDefenceManager = new AccusedDefenceManager();
    DisciplineRequestModel disciplineRequestModel = new DisciplineRequestModel();
    ArrayList<DisciplineRequestModel> allCommittedOffencesOfEmployee = new ArrayList<DisciplineRequestModel>();
//    ArrayList<HashMap> committeeMembersList = new ArrayList<HashMap>();
    // ArrayList<CommtteeComments> committeeCommentes = new ArrayList<CommtteeComments>();
    ArrayList<CommitteeMemberModel> committeeMembersList = new ArrayList<CommitteeMemberModel>();
    ArrayList<EyeWitnessModel> eyeWitnessesList = new ArrayList<EyeWitnessModel>();
    ArrayList<Option> disciplineTypesList = disciplineRequestManager.getDisciplineTypes();
    ArrayList<Option> availableDecisionsToMake = new ArrayList<Option>();//disciplineApproveManager.getAvailableDecisionToMake();
    ArrayList<SelectItem> committeeLists = disciplineApproveManager.getActiveDesciplineCommittees();// new ArrayList<Option>();
    ArrayList<Option> pendingRequestLists = new ArrayList<Option>();//disciplineRequestManager.getPendingRequests();
    ArrayList<Option> decisionMadeByEmployeeLists = new ArrayList<Option>();
    ArrayList<Option> committeeForwardList = new ArrayList<Option>();
    ArrayList<Option> penaltyTypesListOption = penaltyRegistrationManager.getPenaltyTypesOption();//
    ArrayList<Option> summaryList = eyeWitnessManager.getEyeWitnessSummaryTypes();
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    ArrayList<RequestHistoryModel> decisionsMadeOnRequest = new ArrayList<RequestHistoryModel>();
    ArrayList<CommeeteeCommentsGiven> comeeteeCommentsGive = new ArrayList<CommeeteeCommentsGiven>();
    public String IMMEDIATEBOSS = DisciplineRequestManager.REQUERSTER_TYPE_IMMEDIATEBOSS;
    public String ANOTHEREMPLOYEE = DisciplineRequestManager.REQUERSTER_TYPE_ANOTHEREMPLOYEE;
    public String NOTEMPLOYEE = DisciplineRequestManager.REQUERSTER_TYPE_NOTEMPLOYEE;
    int disciplineProblemId;// DISCIPLINE_PROBLEM_ID
    int disciplineProcessedId;
    public double salary;
    public int duration = 0;
    public int penaliyedDays = 0;
    String newPenalityProposed = null;//This is the penality that the approver propose for the discipline committee
    String requesterType = null;//REQUESTER_TYPE
    String requesterId = null;    //REQUESTER_ID
    String offenderId = null;//OFFENDER_ID always employee
    String dateOfOffence = null;//DATE_OF_OFFENCE//when does it happen
    String reportedDate = null;//REPORTED_DATE//reported to the hrms about the discipline Problem
    String offenceType = null;// OFFENCE_TYPE,//if it is registerd in the table HR_DISCIPLINE_TYPE, ELSE "Other"
    int repititionOfOffence = -1;//REPITITION_OF_OFFENCE//how many times does it occured before the phase out time
    String descriptionOfOffence = null;//DESCRIPTION_OF_OFFENCE//details
    String approverGivenCommeents = null;//This is the Approval given Commeents
    String requestedMeasureToBeTaken = null;//REQUESTED_MEASURE_TO_BE_TAKEN
    String currentStatus = null;//STATUS
    // String reportddate=null;
    String isDocumentAttached = null;//IS_DOCUMENT_ATTACHED
    String agreeOnDefaultPenalty = null;
    String expectedPenalty;
    int deciderCommitteeId;

    private boolean populateRequesterTextComponents(String employeeId) {
        HashMap empInfoHashMap = employeeManager.readEmployeeBasicInfo(employeeId);
        if (empInfoHashMap != null) {
            if (empInfoHashMap.get("employeeId").toString().equals("")) {//if no resultset found
                showSuccessOrFailureMessage(false, "NO EMPLOYEE FOUND WITH ID : " + employeeId);
                return false;
            } else {
                requesterId = empInfoHashMap.get("employeeId").toString();
                txtRequesterDepartment.setValue(empInfoHashMap.get("employeeDepartmentName"));
                txtRequesterFullName.setValue(empInfoHashMap.get("employeeFullName"));
                txtRequesterId.setValue(employeeId);
                txtRequesterPosition.setValue(empInfoHashMap.get("employeePosition"));
                return true;
            }
        } else {
            showSuccessOrFailureMessage(false, "EXCEPTION OCCURED");
            return false;
        }
    }

    private boolean populateEmployeeTextComponents(String employeeId) {
        HashMap empInfoHashMap = employeeManager.readEmployeeBasicInfo(employeeId);
        if (empInfoHashMap != null) {
            if (empInfoHashMap.get("employeeId").toString().equals("")) {//if no resultset found
                showSuccessOrFailureMessage(false, "NO EMPLOYEE FOUND WITH ID : " + employeeId);
                return false;
            } else {
                requesterId = empInfoHashMap.get("employeeId").toString();
                txtEmployeeDepartment.setValue(empInfoHashMap.get("employeeDepartmentName"));
                txtEmployeeFullName.setValue(empInfoHashMap.get("employeeFullName"));
                txtEmployeeId.setValue(employeeId);
                txtEmployeePosition.setValue(empInfoHashMap.get("employeePosition"));
                return true;
            }
        } else {
            showSuccessOrFailureMessage(false, "EXCEPTION OCCURED");
            return false;
        }
    }

    private void fillExpectedPenalty(int requestId, String offenceType, int repititionOfOffence, String currentStatus) {
        System.out.println("fillExpectedPenalty : " + offenceType + "\nrepititionOfOffence : " + repititionOfOffence);

        String penaltyAttributes[] = penaltyRegistrationManager.getPenaltyOfOffence(offenceType, repititionOfOffence).split(":::");
        txtaPenalityShouldBeGivenForThisOffence.setValue(penaltyAttributes[1]);
        if (currentStatus.equals(DisciplineApproveManager.INITIAL_STATE_DISCIPLINE)) {
            drlNewPenalty.setValue(penaltyAttributes[0]);
        } else {
            drlNewPenalty.setValue(disciplineApproveManager.getNewPenaltyProposedOnRequest(1));
        }
    }

    private boolean populateDisciplineTextComponents(DisciplineRequestModel disciplineRequestModel) {
        repititionOfOffence = disciplineRequestModel.getRepititionOfOffence() + 1;
        txtDisciplineDate.setValue(disciplineRequestModel.getDateOfOffence());
        txtReportedDate.setValue(disciplineRequestModel.getReportedDate());//reset date
        txtaDisciplineDescription.setValue(disciplineRequestModel.getDescriptionOfOffence());
        txtaDisciplineDecisionTobeTaken.setValue(disciplineRequestModel.getRequestedMeasureToBeTaken());
        txtaPenalityShouldBeGivenForThisOffence.setValue(disciplineRequestModel.getExpectedPenalityToBeGiven());
        txt_DeductAmount.setValue(disciplineRequestModel.getDeductAmount());
        txt_Duration.setValue(disciplineRequestModel.getDeductionDuration() + " " + "Month");
        txtDisciplinePreviousOccurance.setValue(repititionOfOffence);
        txtDocReferenceNumber.setValue(disciplineRequestModel.getDocumentReferenceNumber());
        currentStatus = disciplineRequestModel.getStatus();
        offenceType = disciplineRequestModel.getOffenceType();
        setSelectedDisciplineType(offenceType);

        //fillExpectedPenalty(disciplineRequestModel.getDisciplineProblemId(), offenceType, repititionOfOffence, currentStatus);
        return true;
    }

    public boolean setSelectedDisciplineType(String disciplineType) {
        for (Option lookingFor : disciplineTypesList) {
            if (lookingFor.getValue().toString().startsWith(disciplineType)) {
                drlDisciplineType.setValue(lookingFor.getValue().toString());
                return true;
            }
        }
        return false;
    }

    public boolean setSelectedPenaltyType(String penaltyType) {
        for (Option lookingFor : penaltyTypesListOption) {
            if (lookingFor.getValue().toString().startsWith(penaltyType)) {
                drlNewPenalty.setValue(lookingFor.getValue().toString());
                return true;
            }
        }
        return false;
    }

    private void populateDecisionHistory(int requestId) {
        decisionsMadeOnRequest = disciplineApproveManager.getRequestHistory(requestId);
        if (decisionsMadeOnRequest.size() > 0) {
            cmdLinkViewPreviesDecisions.setRendered(true);
        } else {
            cmdLinkViewPreviesDecisions.setRendered(false);
        // makePageReadyForUpdate();
        }
    }

    private void populateComeeteeComeents(int diciplineId) {

        comeeteeCommentsGive = disciplineApproveManager.getCommiteeComentes(diciplineId);

        if (comeeteeCommentsGive.size() > 0) {
            cmdview_Committee_Comments.setRendered(true);
            cmdLinkConfirmCommitteeDecisions.setDisabled(true);

        } else {
            cmdview_Committee_Comments.setRendered(false);
        }

    }

    private void disablecommentspopoUp() {
        employeeID_textField.setDisabled(true);
        employeeName_textField.setDisabled(true);
        responsiblity_textArea.setDisabled(true);
        txt_CommeentsGivenDay.setDisabled(true);
    }

    private void clearRequesterTextComponents() {
        txtRequesterId.setValue(null);
        txtRequesterDepartment.setValue(null);
        txtRequesterFullName.setValue(null);
        txtRequesterPosition.setValue(null);
        txtRequesterId.setDisabled(true);
        requesterId = null;
    }

    private void clearDisciplineTextComponents() {
        txtDocReferenceNumber.setValue(null);
        txtDisciplineDate.setValue(null);
        txtaDisciplineDescription.setValue(null);
        txtaDisciplineDecisionTobeTaken.setValue(null);
        txtReportedDate.setValue(dateFormat.format(new Date()));//reset date
        txtDisciplinePreviousOccurance.setValue(null);
        drlDisciplineType.resetValue();
    }

    private void clearDecisionComponents() {
        txtaDecisionExplanation.setValue(null);
        drlDecision.resetValue();
        radioGroupAgreeOnDefaultPenalty.resetValue();
        drlCommittee.resetValue();
        ckbForwardToCommittee.setSelected(false);
    }

    private void clearEmployeeTextComponents() {
        txtEmployeeId.setValue(null);
        txtEmployeeDepartment.setValue(null);
        txtEmployeeFullName.setValue(null);
        txtEmployeePosition.setValue(null);
    }

    private void clearAllComponents() {

        clearDisciplineTextComponents();
        clearRequesterTextComponents();
        clearEmployeeTextComponents();
        selectedObjectPending.setSelectedObject(null);
        pendingRequestLists = disciplineApproveManager.getRequestsToBeProcessed();
    //  pendingRequestLists = disciplineRequestManager.getPendingRequests();
    }

    private void disableDiscionComponents() {
//       radioGroupAgreeOnDefaultPenalty.setDisabled(true);
//       txtaDecisionExplanation.setDisabled(true);
//       drlDecision.setDisabled(true);
//       ckbForwardToCommittee.setDisabled(true);
//       btnPostDecision.setDisabled(true);
//       drlCommittee.setDisabled(true);
//       drlNewPenalty.setDisabled(true);
//       ckbForwardToCommittee.setDisabled(true);
    }

    private void disableForWardToCommeeteDiscionComponents() {
        radioGroupAgreeOnDefaultPenalty.setDisabled(true);
        txtaDecisionExplanation.setDisabled(true);
        drlDecision.setDisabled(true);
        ckbForwardToCommittee.setDisabled(true);
        btnPostDecision.setDisabled(true);
        drlCommittee.setDisabled(true);
        drlNewPenalty.setDisabled(true);
        ckbForwardToCommittee.setDisabled(true);
    }

    private void enableDiscionComponents() {
        radioGroupAgreeOnDefaultPenalty.setDisabled(false);
        txtaDecisionExplanation.setDisabled(false);
        drlDecision.setDisabled(false);
        ckbForwardToCommittee.setDisabled(false);
        btnPostDecision.setDisabled(false);
        drlCommittee.setDisabled(false);
        ckbForwardToCommittee.setDisabled(false);
    }

    public String convertPenaltyValueToDescription(String value) {
        String description = "";
        if (value.equals("FAP")) {
            description = "Fully Accepted";
        } else if (value.equals("PAP")) {
            description = "Partially Accepted";
        } else if (value.equals("DAP")) {
            description = "Dont Accepted";
        }
        return description;
    }

    public String convertAccusationValueToDescription(String value) {
        String description = "";
        if (value.equals("FAA")) {
            description = "Fully Accepted";
        } else if (value.equals("PAA")) {
            description = "Partially Accepted";
        } else if (value.equals("DAA")) {
            description = "Dont Accepted";
        }
        return description;
    }

    private void populateAccusedComment(ArrayList<AccusedDefenceModel> accusedDefenceModelList) {
        if (accusedDefenceModelList.size() > 0) {//if comment posted, display it
            AccusedDefenceModel currentComment = accusedDefenceModelList.get(0);
            txtaPenaltyAcceptance.setValue(currentComment.getDescriptionOfAccusation().toString());
            txtaAccusationAcceptance.setValue(currentComment.getDescriptionOfPenalty().toString());
            lblAccusationAcceptanceValue.setValue(convertAccusationValueToDescription(currentComment.getAcceptAccusation().toString()));
            lblPenaltyAcceptanceValue.setValue(convertPenaltyValueToDescription(currentComment.getAcceptPenalty().toString()));
        }
    }

    private void populateAllComponents(DisciplineRequestModel disciplineRequestModel) {
        populateRequesterTextComponents(disciplineRequestModel.getRequesterId());
        populateEmployeeTextComponents(disciplineRequestModel.getOffenderId());
        populateDisciplineTextComponents(disciplineRequestModel);
        populateDecisionHistory(disciplineRequestModel.getDisciplineProblemId());
        populateComeeteeComeents(disciplineRequestModel.getDisciplineProblemId());
    }

    private boolean validateDecision() {
        if (txtaDecisionExplanation.getValue() == null) {
            showSuccessOrFailureMessage(false, "GIVE COMMENT AND/OR SELECT FIRST");
            return false;
        } else if (ckbForwardToCommittee.isSelected() && drlCommittee.getValue().equals("-1")) {
            showSuccessOrFailureMessage(false, "SELECT COMMITTEE");
            return false;
        } else if ((!ckbForwardToCommittee.isSelected()) && drlDecision.getValue().equals("-1")) {
            showSuccessOrFailureMessage(false, "SELECT DECISION");
            return false;
        }
        //  else if (agreeOnDefaultPenalty == null) {
//            showSuccessOrFailureMessage(false, "SELECT YOUR AGREEMENT ON DEFAULT PENALTY");
//            return false;
//           } else if (drlNewPenalty.getValue().toString().equals("-1")) {
//                showSuccessOrFailureMessage(false, "SELECT NEW PENALTY ");
//                  return false;
//        }

        return true;
    }

    public String btnPostDecision_action() {
        if (validateDecision()) {
            String decision = "";
            if (ckbForwardToCommittee.isSelected()) {
                decision = drlCommittee.getValue().toString() + "$$" + currentStatus;
            } else {
                decision = drlDecision.getValue().toString();
            }
            int newPenalty = Integer.parseInt(drlNewPenalty.getValue().toString());
            if (decision.equals(DisciplineApproveManager.DISCIPLINE_DECISION_APPROVE) && cmdLinkConfirmCommitteeDecisions.isRendered()) {
                showSuccessOrFailureMessage(true, "AS COMMITTEE, YOU CAN ONLY FORWARD YOUR DECISION! YOU CAN NOT APPROVE");
            } //            else if (disciplineApproveManager.saveDecision(disciplineProblemId, loggedInEmployeeId, txtaDecisionExplanation.getValue().toString(), decision, newPenalty, currentStatus, agreeOnDefaultPenalty)) {
            //               // disciplineApproveManager.clearOnPending(disciplineProblemId);
            //                showSuccessOrFailureMessage(true, "DECISION POSTED SUCCESSFULLY");
            //                clearAllComponents();
            //                pendingRequestLists = disciplineApproveManager.getRequestsToBeProcessed();
            //            //pendingRequestLists = disciplineRequestManager.getPendingRequests();
            //            }
            else {
                showSuccessOrFailureMessage(false, "!SORRY POSTING DECISION FAILED");
            }
        }
        return null;
    }

    public String txtDeligateeId_action() {
        //return null means stay on the same page
        return null;
    }

    public String btnReset_action() {
        clearAllComponents();
        btnPostDecision.setDisabled(true);
        return null;
    }

    public void showSuccessOrFailureMessage(boolean success, String messageToDisplay, String fadeTime) {
        lblSuccessOrErrorMessage.setStyle(success ? "color: green; font-size: 12px; font-weight: bold;text-align: center; vertical-align: middle" : "color: red; font-size: 12px; font-weight: bold;text-align: center; vertical-align: middle");
        lblSuccessOrErrorMessage.setValue(messageToDisplay);
        commenteslblSuccessOrErrorMessage.setValue(messageToDisplay);
        lblSuccessOrErrorMessage.setVisible(true);
        pnlPopupSuccessOrFailure.setAutoCentre(true);
        pnlPopupSuccessOrFailure.setRendered(true);
        panelPopupMessageForCommeteComentes.setRendered(true);
        String val = "message";
        //  String fadeTime = (success ? "3000" : "8000");
        String javaScriptText = "$j(document).ready(function(){ $j('." + val + "').show();" +
                " $j('." + val + "').fadeOut(" + fadeTime + ");" + "});";
        JavascriptContext.addJavascriptCall(FacesContext.getCurrentInstance(), javaScriptText);
    }

    public void showSuccessOrFailureMessage(boolean success, String messageToDisplay) {
        String fadeTime = (success ? "5000" : "9000");
        showSuccessOrFailureMessage(success, messageToDisplay, fadeTime);
    }

    public ArrayList<CommeeteeCommentsGiven> getComeeteeCommentsGive() {
        return comeeteeCommentsGive;
    }

    public void setComeeteeCommentsGive(ArrayList<CommeeteeCommentsGiven> comeeteeCommentsGive) {
        this.comeeteeCommentsGive = comeeteeCommentsGive;
    }

    public int get__placeholder() {
        return __placeholder;
    }

    public void set__placeholder(int __placeholder) {
        this.__placeholder = __placeholder;
    }

    public ArrayList<Option> getCommitteeForwardList() {
        return committeeForwardList;
    }

    public void setCommitteeForwardList(ArrayList<Option> committeeForwardList) {
        this.committeeForwardList = committeeForwardList;
    }

    public int getDisciplineProcessedId() {
        return disciplineProcessedId;
    }

    public void setDisciplineProcessedId(int disciplineProcessedId) {
        this.disciplineProcessedId = disciplineProcessedId;
    }

    public String getNewPenalityProposed() {
        return newPenalityProposed;
    }

    public void setNewPenalityProposed(String newPenalityProposed) {
        this.newPenalityProposed = newPenalityProposed;
    }

//    public ArrayList<CommtteeComments> getCommitteeCommentes() {
//        return committeeCommentes;
//    }
//
//    public void setCommitteeCommentes(ArrayList<CommtteeComments> CommitteeCommentes) {
//        this.committeeCommentes = CommitteeCommentes;
//    }
    public String getDisciplinedEmployeeId() {
        return disciplinedEmployeeId;
    }

    public void setDisciplinedEmployeeId(String disciplinedEmployeeId) {
        this.disciplinedEmployeeId = disciplinedEmployeeId;
    }

    public EmployeeManage getEmployeeManager() {
        return employeeManager;
    }

    public void setEmployeeManager(EmployeeManage employeeManager) {
        this.employeeManager = employeeManager;
    }

    public HtmlOutputLabel getLblSuccessOrErrorMessage() {
        return lblSuccessOrErrorMessage;
    }

    public void setLblSuccessOrErrorMessage(HtmlOutputLabel lblSuccessOrErrorMessage) {
        this.lblSuccessOrErrorMessage = lblSuccessOrErrorMessage;
    }

    public String getLoggedInEmployeeId() {
        return loggedInEmployeeId;
    }

    public void setLoggedInEmployeeId(String loggedInEmployeeId) {
        this.loggedInEmployeeId = loggedInEmployeeId;
    }

    public HtmlPanelGroup getPanelGroupMessage() {
        return panelGroupMessage;
    }

    public ArrayList<RequestHistoryModel> getDecisionsMadeOnRequest() {
        return decisionsMadeOnRequest;
    }

    public void setDecisionsMadeOnRequest(ArrayList<RequestHistoryModel> decisionsMadeOnRequest) {
        this.decisionsMadeOnRequest = decisionsMadeOnRequest;
    }

    public String getLoggedInEmployeeDept() {
        return loggedInEmployeeDept;
    }

    public void setLoggedInEmployeeDept(String loggedInEmployeeDept) {
        this.loggedInEmployeeDept = loggedInEmployeeDept;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }
    private HtmlDataTable dataTable = new HtmlDataTable();

    public HtmlDataTable getDataTable() {
        return dataTable;
    }

    public void setDataTable(HtmlDataTable dataTable) {
        this.dataTable = dataTable;
    }

    public void setPanelGroupMessage(HtmlPanelGroup panelGroupMessage) {
        this.panelGroupMessage = panelGroupMessage;
    }

    public PanelLayout getPnlMessageBody() {
        return pnlMessageBody;
    }

    public void setPnlMessageBody(PanelLayout pnlMessageBody) {
        this.pnlMessageBody = pnlMessageBody;
    }

    public String getRequesterId() {
        return requesterId;
    }
    private PanelPopup pnlPopupViewPrevieousDecisions = new PanelPopup();

    public PanelPopup getPnlPopupViewPrevieousDecisions() {
        return pnlPopupViewPrevieousDecisions;
    }

    public void setPnlPopupViewPrevieousDecisions(PanelPopup pnlPopupViewPrevieousDecisions) {
        this.pnlPopupViewPrevieousDecisions = pnlPopupViewPrevieousDecisions;
    }

    public void setRequesterId(String requesterId) {
        this.requesterId = requesterId;
    }

    public ArrayList<Option> getPendingRequestLists() {
        return pendingRequestLists;
    }

    public void setPendingRequestLists(ArrayList<Option> pendingRequestLists) {
        this.pendingRequestLists = pendingRequestLists;
    }

    public DisciplineRequestManager getDisciplineRequestManager() {
        return disciplineRequestManager;
    }

    public ArrayList<Option> getDecisionMadeByEmployeeLists() {
        return decisionMadeByEmployeeLists;
    }

    public void setDecisionMadeByEmployeeLists(ArrayList<Option> decisionMadeByEmployeeLists) {
        this.decisionMadeByEmployeeLists = decisionMadeByEmployeeLists;
    }

    public void setDisciplineRequestManager(DisciplineRequestManager disciplineRequestManager) {
        this.disciplineRequestManager = disciplineRequestManager;
    }

    public String getApproverGivenCommeents() {
        return approverGivenCommeents;
    }

    public void setApproverGivenCommeents(String approverGivenCommeents) {
        this.approverGivenCommeents = approverGivenCommeents;
    }

    public String getANOTHEREMPLOYEE() {
        return ANOTHEREMPLOYEE;
    }

    public void setANOTHEREMPLOYEE(String ANOTHEREMPLOYEE) {
        this.ANOTHEREMPLOYEE = ANOTHEREMPLOYEE;
    }

    public String getIMMEDIATEBOSS() {
        return IMMEDIATEBOSS;
    }

    public void setIMMEDIATEBOSS(String IMMEDIATEBOSS) {
        this.IMMEDIATEBOSS = IMMEDIATEBOSS;
    }

    public String getNOTEMPLOYEE() {
        return NOTEMPLOYEE;
    }

    public void setNOTEMPLOYEE(String NOTEMPLOYEE) {
        this.NOTEMPLOYEE = NOTEMPLOYEE;
    }

    public ArrayList<SelectItem> getCommitteeLists() {
        return committeeLists;
    }

    public void setCommitteeLists(ArrayList<SelectItem> committeeLists) {
        this.committeeLists = committeeLists;
    }

    public ArrayList<Option> getAvailableDecisionsToMake() {
        return availableDecisionsToMake;
    }

    public void setAvailableDecisionsToMake(ArrayList<Option> availableDecisionsToMake) {
        this.availableDecisionsToMake = availableDecisionsToMake;
    }

    public DisciplineRequestModel getDisciplineRequestModel() {
        return disciplineRequestModel;
    }

    public void setDisciplineRequestModel(DisciplineRequestModel disciplineRequestModel) {
        this.disciplineRequestModel = disciplineRequestModel;
    }

    public ArrayList<Option> getDisciplineTypesList() {
        return disciplineTypesList;
    }

    public void setDisciplineTypesList(ArrayList<Option> disciplineTypesList) {
        this.disciplineTypesList = disciplineTypesList;
    }

    public String btnSaveOrUpdate_action() {

        return null;
    }

    public String btnClosePopupAllCommittedOffences_action() {
        pnlPopupAllCommittedOffences.setRendered(false);
        return null;
    }

    public void makePageReadyForDecision() {
        drlCommittee.setRendered(false);
        lblCommittee.setRendered(false);
        drlDecision.setRendered(true);
        lbDecision.setRendered(true);
        lnkToAccusedCommentPage.setRendered(false);
        lnkViewAccusedComment.setRendered(true);
        availableDecisionsToMake = disciplineApproveManager.getAvailableDecisionsToMake(currentStatus);
        makePageReadyForSave();
    }

    private void makePageReadyToForwardToCommitte() {
        drlCommittee.setRendered(true);
        lblCommittee.setRendered(true);
        drlDecision.setRendered(false);
        lbDecision.setRendered(false);
        makePageReadyForSave();
    }

    private void makePageReadyForSave() {
        btnPostDecision.setRendered(true);
        btnPostDecision.setDisabled(false);
        ckbForwardToCommittee.setDisabled(false);
        drlDecision.setDisabled(false);
        radioGroupAgreeOnDefaultPenalty.setDisabled(false);
        txtaDecisionExplanation.setDisabled(false);
        pnlLayoutDecisoion.setRendered(true);

    }

    private void makePageReadyForNavigationToAccusedComment() {
        disableDiscionComponents();
        lnkToAccusedCommentPage.setRendered(true);
        lnkViewAccusedComment.setRendered(false);
        btnPostDecision.setDisabled(true);
        lblAccusationAcceptanceValue.setValue("");
        lblPenaltyAcceptanceValue.setValue("");
    }

    public void makePageReadyForView() {
        lnkToAccusedCommentPage.setRendered(true);
        lnkViewAccusedComment.setRendered(false);
        btnPostDecision.setRendered(false);
        ckbForwardToCommittee.setDisabled(true);
    }

    private void renderPreviosDescisionLink(String currentStatus) {
        if (!currentStatus.equals(DisciplineApproveManager.INITIAL_STATE_DISCIPLINE)) {
            populateDecisionHistoryTable(disciplineProblemId);
            cmdLinkViewPreviesDecisions.setRendered(true);
        } else {
            cmdLinkViewPreviesDecisions.setRendered(false);
        }
    }

    private void renderCommeeteComentesLink() {

        populateComeeteeComeents(disciplineProblemId);

    }

    private void renderCommitteeLink(int requestId, String currentStatus) {
        deciderCommitteeId = disciplineApproveManager.getForwardedToCommittee(requestId, currentStatus);
        if (deciderCommitteeId != -1) {//if forwareded to committee

            cmdLinkConfirmCommitteeDecisions.setRendered(true);
        } else {
            enableDiscionComponents();
            cmdLinkConfirmCommitteeDecisions.setRendered(false);
        }
    }

    private void renderAccusedCommentLink(int disciplineProblemId) {
        ArrayList<AccusedDefenceModel> accusedDefenceModelList = accusedDefenceManager.getDisciplineIssuedFromRequestId(disciplineProblemId);
        if (accusedDefenceModelList == null) {
        } else if (accusedDefenceModelList.size() > 0) {
            populateAccusedComment(accusedDefenceModelList);
            availableDecisionsToMake = disciplineApproveManager.getAvailableDecisionsToMake(disciplineProblemId, currentStatus);
            makePageReadyForSave();
            btnPostDecision.setDisabled(false);
            lnkToAccusedCommentPage.setRendered(false);
            lnkViewAccusedComment.setRendered(true);
        } else {//no comment psoted yet
            makePageReadyForNavigationToAccusedComment();
        }
    }

    public void selectPending_processValueChange(ValueChangeEvent vce) {

        if (vce != null) {
            String[] requestInfos = vce.getNewValue().toString().split("--");
            disciplineProblemId = Integer.parseInt(requestInfos[0]);//
            requesterId = requestInfos[1];
            currentStatus = requestInfos[2];

            // disciplineRequestModel = disciplineRequestManager.getDisciplineIssued(disciplineProblemId);
            populateAllComponents(disciplineRequestModel);
            clearDecisionComponents();
            renderPreviosDescisionLink(currentStatus);
            renderCommitteeLink(disciplineProblemId, currentStatus);
            renderAccusedCommentLink(disciplineProblemId);

        } else {
            showSuccessOrFailureMessage(false, "THE REPORTED DISCIPLINE PROBLEM IS OUT OF 30 DAYS /n YOU CAN’T PROCESS ");
        }


    }

    public void selectHistory_processValueChange(ValueChangeEvent vce) {
        String decisionAttributs[] = vce.getNewValue().toString().split("--");
        disciplineProblemId =
                Integer.parseInt(decisionAttributs[1]);
        txtaDecisionExplanation.setValue(decisionAttributs[2]);
        offenceType = decisionAttributs[6];
        offenderId = decisionAttributs[7];
        drlDecision.setValue(decisionAttributs[2]);
        txtaDecisionExplanation.setDisabled(true);
        //  disciplineRequestModel = disciplineRequestManager.getDisciplineIssued(disciplineProblemId);
        populateAllComponents(disciplineRequestModel);
        drlDecision.setDisabled(true);
        // ckbForwardToCommittee.setDisabled(true);
        btnPostDecision.setDisabled(true);
        drlNewPenalty.setDisabled(false);
        int displineId = Integer.parseInt(decisionAttributs[0]);//
        int requestId = Integer.parseInt(decisionAttributs[5]);
        String stat = decisionAttributs[4];//
        renderCommitteeLink(requestId, stat);
    }

    public String lnkDisciplineTypesRegistrationPage_action() {
        return "DisciplineTypes";
    }

    public String lnkDisciplineRequestPage_action() {
        return "DisciplineRequest";
    }

    public String lnkToAccusedCommentPage_action() {
        AccusedDefencePage offenderDefencePage = new AccusedDefencePage();
        offenderDefencePage.setUserName(userName);
        offenderDefencePage.setDisciplineProblemId(disciplineProblemId);
        //offenderDefencePage.populateAllComponents(offenceType, disciplineProblemId);
        return "AccusedDefence";
    }

    public String cmdLinkViewAllOffences_action() {
        allCommittedOffencesOfEmployee = disciplineRequestManager.getComittedOffencesOfEmployee(txtEmployeeId.getValue().toString());
        pnlPopupAllCommittedOffences.setRendered(true);
        return null;
    }

    public String cmdLinkViewPreviesDecisions_action() {
        pnlPopupViewPrevieousDecisions.setRendered(true);
        return null;
    }

    public String btnCloseViewPreviesDecisions_action() {
        pnlPopupViewPrevieousDecisions.setRendered(false);
        drlDecision.setDisabled(false);
        return null;
    }

    private boolean populateDecisionHistoryTable(int leaveRequestId) {
        decisionsMadeOnRequest = disciplineApproveManager.getRequestHistory(leaveRequestId);
        return true;
    }

    private boolean populateComeeteeComentesTable(int DisplineRequestId) {
        comeeteeCommentsGive = disciplineApproveManager.getCommiteeComentes(DisplineRequestId);
        return true;
    }

    public void radioGroupAgreeOnDefaultPenalty_processValueChange(ValueChangeEvent vce) {
        if (vce.getNewValue().toString().equals("Fair")) {

            drlNewPenalty.setDisabled(true);
            ckbForwardToCommittee.setDisabled(true);
            this.makePageReadyForDecision();
        } else if (vce.getNewValue().toString().equals("Exagurated") && drlNewPenalty.getValue().toString() == null) {
            showSuccessOrFailureMessage(false, "SELECT YOUR OTHER PENALITY");
            drlNewPenalty.setDisabled(false);
        } else if (vce.getNewValue().toString().equals("TooSmall") && drlNewPenalty.getValue().toString() == null) {
            showSuccessOrFailureMessage(false, "SELECT YOUR OTHER PENALITY");
            drlNewPenalty.setDisabled(false);
        } else {
            drlNewPenalty.setDisabled(false);
        }

        agreeOnDefaultPenalty = vce.getNewValue().toString();
    }

    public void ckbForwardToCommittee_processValueChange(ValueChangeEvent vce) {
        if (ckbForwardToCommittee.isSelected()) {
            makePageReadyToForwardToCommitte();
        } else {
            makePageReadyForDecision();
        }

    }

    public String cmdLinkConfirmCommitteeDecisions_action() {

        committeeMembersList = committeeMemberRegistrationManager.getAllCommitteeMembers(deciderCommitteeId);
        System.out.print("deciderCommitteeId ::: " + deciderCommitteeId);
        lblSignInReminder.setValue("Sign in using your username");
        pnlPopupCommitteeMembers.setRendered(true);
        return null;
    }
    String savedStatus = "Done";
    int flage = 0;

    public String btnPopupForColumnMemberLogIn_action() {
        try {
            if (selectedCommitteeMemberRow != -1) {
                String memberEmployeeId = committeeMembersList.get(selectedCommitteeMemberRow).getEmployeeId();
                String memberUserName = committeeMembersList.get(selectedCommitteeMemberRow).getUserName();
                String memberPassWord = committeeMembersList.get(selectedCommitteeMemberRow).getPassWord();
                String memberComentes = committeeMembersList.get(selectedCommitteeMemberRow).getCommeentesGiven();
                String memberFullName = committeeMembersList.get(selectedCommitteeMemberRow).getEmployeeFullName();
                String memberResponsiblity = committeeMembersList.get(selectedCommitteeMemberRow).getResponsiblity();
                String commentgivenDay =
                        committeeMembersList.get(selectedCommitteeMemberRow).getCommeentGivenDay();
                int diciplineProblemId = disciplineProblemId;
                int counter = committeeMembersList.size();

                String status = "New";


                if (siteSecurityManager.isValidUser(memberUserName, memberPassWord, memberEmployeeId)) {
                    flage++;

                    disciplineApproveManager.NewSaveCommitteeComeentes(memberEmployeeId, memberFullName, memberResponsiblity, memberComentes, diciplineProblemId, memberUserName, memberPassWord, status, savedStatus, commentgivenDay);


                    //  disciplineApproveManager.NewSaveCommitteeComeentes(memberEmployeeId, memberFullName, memberResponsiblity, memberComentes,diciplineProblemId, memberUserName, memberPassWord, status,savedStatus);


                    showSuccessOrFailureMessage(true, "YOUR COMMEENTES SAVING SUCCESSFULL");
                    password_secretField.resetValue();
                    userName_textField.resetValue();

                    committeeMembersList.get(selectedCommitteeMemberRow).getUserName().replaceAll(committeeMembersList.get(selectedCommitteeMemberRow).getUserName(), "");

                    committeeMembersList.get(selectedCommitteeMemberRow).setLogInConfirmed("Confirmed");

                } else {

                    showSuccessOrFailureMessage(false, "ERROR OCCURES WHILE YOU SAVING YOUR COMMENTES ");

                    committeeMembersList.get(selectedCommitteeMemberRow).setLogInConfirmed("Invalid");

                }

            }

        } catch (NullPointerException npe) {
        }
        return null;
    }

    public String lnkViewAccusedComment_action() {
        pnlPopupViewAccusedComment.setRendered(true);
        return null;
    }

    public String lnkViewEyeWitnessComment_action() {
        if (disciplineProblemId != -1) {
            eyeWitnessesList = eyeWitnessManager.getEyeWitnessesList(disciplineProblemId);
            pnlEyeWitnessesRegistration.setRendered(true);
        }

        return null;
    }

    public String btnClosePopupEyeWitnesses_action() {
        pnlEyeWitnessesRegistration.setRendered(false);
        return null;
    }
    int selectedCommitteeMemberRow = -1;
    int selectedCommitteeCommentesRow = -1;

    public void rowSelectorCommitteeMember_processMyEvent(RowSelectorEvent rse) {
        selectedCommitteeMemberRow = rse.getRow();
    }

    public boolean isEnoughCommitteeNumbersSigned() {
        int counterCheck = 0;
        int totalSize = committeeMembersList.size();
        for (CommitteeMemberModel current : committeeMembersList) {
            if (current.getLogInConfirmed() != null && current.getLogInConfirmed().equals("Confirmed")) {
                counterCheck++;
            }

        }

        if ((counterCheck == 0) || (totalSize / counterCheck >= 2)) {//less than or equal to 50% confirmed
            lblSignInReminder.setValue("Note: It can not be approved now." +
                    " Only " + counterCheck + " out of " + totalSize + " confirmed. ");
            cmdLnkClosePopupCommitteeMembers.setRendered(true);
            return false;
        } else {//if more than 50% confirmed
            lblSignInReminder.setValue("Note: Greater than 50% approved." +
                    " Only " + counterCheck + " out of " + totalSize + " confirmed. ");
            enableDiscionComponents();

            return true;
        }

    }

    public String btnClosePopupCommitteeMembers_action() {
        if (isEnoughCommitteeNumbersSigned()) {
            pnlPopupCommitteeMembers.setRendered(false);
            pnlPopupSuccessOrFailure.setRendered(false);
        }

        return null;
    }

    public String cmdLnkClosePopupCommitteeMembers_action() {
        cmdLnkClosePopupCommitteeMembers.setRendered(false);
        pnlPopupCommitteeMembers.setRendered(false);
        pnlPopupSuccessOrFailure.setRendered(false);
        return null;
    }
// <editor-fold defaultstate="collapsed" desc="Links">

    public String lnkDisciplineRequest_action() {
        return "DisciplineIssue";
    }

    public String lnkDisciplineApprove_action() {
        return "DisciplineApprove";
    }

    public String lnkAccusedDefence_action() {
        return "AccusedDefence";
    }

    public String lnkEyeWitness_action() {
        return "EyeWitness";
    }

    public String lnkCommitteeMembers_action() {
        return "CommitteeMembers";
    }

    public String lnkDisciplinePenalty_action() {
        return "PenaltyTypes";
    }

    public String lnkCommittee_action() {
        return "Committeee";
    }

    public String btnDisciplinePenalty_action() {
        return "DisciplinePenalty";
    }

    public String btnPenaltyType_action() {
        return "PenaltyTypes";
    }

    public String getSavedStatus() {
        return savedStatus;
    }

    public void setSavedStatus(String savedStatus) {
        this.savedStatus = savedStatus;
    }

    /*selection listener is used when a row is selected on the data table component
     *@param e RowSelectorEvent */
    public int selectedIndex;

    public void rowSelector1_processAction(RowSelectorEvent rse) {
        int selectedRowIndex = rse.getRow();
        selectedIndex =
                selectedRowIndex;
    }

    public String commentsbtnClosePopupSuccessOrFailure_action() {

        panelPopupMessageForCommeteComentes.setRendered(false);
        return null;
    }

    public String LoginButton_action() {

        return null;
    }

    public void btnClosePopupCommeeteComeentes_processAction(ActionEvent ae) {
        pnlPopupComeeteeComenets.setRendered(false);
    }

    public String cmdview_Committee_Comments_action() {

        String currentDay = dateFormat.format(new Date());
        String dbDay =
                disciplineApproveManager.getCommeentsGivenDay(disciplineProblemId);
        if (GregorianCalendarManipulation.calaculateDateDifference(dbDay, currentDay) <= 30) {
            pnlPopupComeeteeComenets.setRendered(true);
            makePageReadyForDecision();

        } else {
            showSuccessOrFailureMessage(false, "COMMITTEE COMMENTS ONLY VALIDE FOR 30 DAYS\n COMMENTS OUT OF DAY");
            comeeteeCommentsGive.clear();
        }

        return null;
    }

    public void selectCommeete_processValueChange(ValueChangeEvent vce) {

        if (vce != null) {
            String[] requestInfos = vce.getNewValue().toString().split("--");
            disciplineProblemId =
                    Integer.parseInt(requestInfos[0]);//
            requesterId =
                    requestInfos[1];
            offenceType = requestInfos[2];
            offenderId = requestInfos[3];
            currentStatus =
                    requestInfos[4];
            approverGivenCommeents = requestInfos[5];
            disciplineProcessedId = Integer.parseInt(requestInfos[6]);
            newPenalityProposed = requestInfos[7];

            salary =
                    disciplineRequestManager.getEmployeeSalary(offenderId);
            disciplineRequestModel =
                    disciplineRequestManager.getDisciplineIssued(offenceType, disciplineProblemId);
            duration =
                    disciplineRequestModel.getDeductionDuration();
            penaliyedDays = Integer.parseInt(disciplineRequestModel.getPenalizedDays());
            if (penaliyedDays == 0) {
                disciplineRequestModel.setDeductAmount(0.0);
            } else {
                double dalySalary = (salary / 26);
                double deduction = (dalySalary * penaliyedDays);
                double lastDeduction = (deduction / duration);
                disciplineRequestModel.setDeductAmount(lastDeduction);
            }

            txtaDecisionExplanation.setValue(requestInfos[5]);
            drlNewPenalty.setValue(newPenalityProposed);
            populateAllComponents(disciplineRequestModel);
            // clearDecisionComponents();
            disableForWardToCommeeteDiscionComponents();

            renderPreviosDescisionLink(currentStatus);
            renderCommitteeLink(disciplineProblemId, currentStatus);
            renderAccusedCommentLink(disciplineProblemId);

        }
    }
    // </editor-fold >
}
=======
/*
 * Page1.java
 *
 * Created on Feb 26, 2010, 7:48:31 AM
 * Copyright Mekete VS BravoZulu 
 */
package fphrms.Discipline;

import com.icesoft.faces.component.CommandButtonTag;
import com.icesoft.faces.component.ext.HtmlCommandButton;
import com.icesoft.faces.component.ext.HtmlCommandLink;
import com.icesoft.faces.component.ext.HtmlDataTable;
import com.icesoft.faces.component.ext.HtmlInputText;
import com.icesoft.faces.component.ext.HtmlInputTextarea;
import com.icesoft.faces.component.ext.HtmlOutputLabel;
import com.icesoft.faces.component.ext.HtmlPanelGrid;
import com.icesoft.faces.component.ext.HtmlPanelGroup;
import com.icesoft.faces.component.ext.HtmlSelectBooleanCheckbox;
import com.icesoft.faces.component.ext.HtmlSelectOneMenu;
import com.icesoft.faces.component.ext.HtmlSelectOneRadio;
import com.icesoft.faces.component.ext.RowSelectorEvent;
import com.icesoft.faces.component.ext.UIColumn;
import com.icesoft.faces.component.jsfcl.data.BorderLayoutBean;
import com.icesoft.faces.component.jsfcl.data.DefaultSelectedData;
import com.icesoft.faces.component.jsfcl.data.DefaultSelectionItems;
import com.icesoft.faces.component.jsfcl.data.DefaultTableDataProvider;
import com.icesoft.faces.component.jsfcl.data.PopupBean;
import com.icesoft.faces.component.panellayout.PanelLayout;
import com.icesoft.faces.component.panelpopup.PanelPopup;
import com.icesoft.faces.component.selectinputdate.SelectInputDate;
import com.icesoft.faces.context.effects.JavascriptContext;
import com.sun.rave.faces.data.DefaultSelectItemsArray;
import com.sun.rave.web.ui.appbase.AbstractPageBean;
import com.sun.webui.jsf.model.Option;
import fphrms.ApplicationBean1;
import fphrms.CustomValidations;
import fphrms.RequestBean1;
import fphrms.SessionBean1;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.faces.FacesException;
import javax.faces.component.html.HtmlInputSecret;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;
import javax.swing.JOptionPane;
import javax.xml.bind.ParseConversionEvent;
import manager.authorizationManager.AuthorizationManager.CommeeteeCommentsGiven;
import manager.authorizationManager.AuthorizationManager.RequestHistoryModel;
import manager.committeeManager.CommitteeMemberModel;
import manager.committeeManager.CommitteeMemberRegistrationManager;
import manager.disciplineManager.AccusedDefenceManager;
import manager.disciplineManager.AccusedDefenceManager.AccusedDefenceModel;
//import manager.disciplineManager.CommtteeComments;
import manager.disciplineManager.DisciplineRegistrationManager;
import manager.disciplineManager.DisciplineRequestManager;
import manager.disciplineManager.DisciplineRequestManager.DisciplineRequestModel;
import manager.disciplineManager.DisciplineApproveManager;
import manager.disciplineManager.EyeWitnessManager;
import manager.disciplineManager.EyeWitnessManager.EyeWitnessModel;
import manager.disciplineManager.PenaltyRegistrationManager;
import manager.employeeManager.EmployeeManage;
import manager.globalUseManager.GregorianCalendarManipulation;
import manager.userManagement.SiteSecurityManager;
import net.sf.jasperreports.components.barbecue.BarcodeProviders.Int2of5Provider;

/**
 * <p>Page bean that corresponds to a similarly named JSP page.  This
 * class contains component definitions (and initialization code) for
 * all components that you have defined on this page, as well as
 * lifecycle methods and event handlers where you may add behavior
 * to respond to incoming events.</p>
 */
public class DisciplineApprovePage extends AbstractPageBean {

    // <editor-fold defaultstate="collapsed" desc="Local Variables">
    private int __placeholder;

    /**
     * <p>Automatically managed component initialization.  <strong>WARNING:</strong>
     * This method is automatically generated, so any user-specified code inserted
     * here is subject to being replaced.</p>
     */
    private void _init() throws Exception {

        loggedInEmployeeId = getSessionBean1().getEmployeeId();
        loggedInEmployeeDept = getSessionBean1().getEmpDeptId();
        userName = getSessionBean1().getUserName();
        //  populateApproverTextComponents(loggedInEmployeeId);
        disciplineRequestManager.setUserName(userName);
        disciplineApproveManager.setUserName(userName);
        pendingRequestLists = disciplineApproveManager.getRequestsToBeProcessed();
        decisionMadeByEmployeeLists = disciplineApproveManager.getDecisionMadeByEmployee();//new ArrayList<Option>();
        committeeForwardList = disciplineApproveManager.getCommeeteforwardListByApprover();
        this.disablecommentspopoUp();
        txt_DeductAmount.setDisabled(true);
        txt_Duration.setDisabled(true);

    }
    private BorderLayoutBean panelBorder1Bean = new BorderLayoutBean();

    public BorderLayoutBean getPanelBorder1Bean() {
        return panelBorder1Bean;
    }

    public void setPanelBorder1Bean(BorderLayoutBean blb) {
        this.panelBorder1Bean = blb;
    }
    private PanelLayout pnProfile = new PanelLayout();

    public CommitteeMemberRegistrationManager getCommitteeMemberRegistrationManager() {
        return committeeMemberRegistrationManager;
    }

    public void setCommitteeMemberRegistrationManager(CommitteeMemberRegistrationManager committeeMemberRegistrationManager) {
        this.committeeMemberRegistrationManager = committeeMemberRegistrationManager;
    }

    public ArrayList<CommitteeMemberModel> getCommitteeMembersList() {
        return committeeMembersList;
    }

    public void setCommitteeMembersList(ArrayList<CommitteeMemberModel> committeeMembersList) {
        this.committeeMembersList = committeeMembersList;
    }

    public int getDeciderCommitteeId() {
        return deciderCommitteeId;
    }

    public void setDeciderCommitteeId(int deciderCommitteeId) {
        this.deciderCommitteeId = deciderCommitteeId;
    }

    public PenaltyRegistrationManager getPenaltyRegistrationManager() {
        return penaltyRegistrationManager;
    }

    public void setPenaltyRegistrationManager(PenaltyRegistrationManager penaltyRegistrationManager) {
        this.penaltyRegistrationManager = penaltyRegistrationManager;
    }

    public SiteSecurityManager getSiteSecurityManager() {
        return siteSecurityManager;
    }

    public void setSiteSecurityManager(SiteSecurityManager siteSecurityManager) {
        this.siteSecurityManager = siteSecurityManager;
    }

    public int getSelectedCommitteeMemberRow() {
        return selectedCommitteeMemberRow;
    }

    public void setSelectedCommitteeMemberRow(int selectedCommitteeMemberRow) {
        this.selectedCommitteeMemberRow = selectedCommitteeMemberRow;
    }

    public PanelLayout getPnProfile() {
        return pnProfile;
    }

    public void setPnProfile(PanelLayout pl) {
        this.pnProfile = pl;
    }
    private HtmlPanelGroup pnlGrpPowerDeligationContent = new HtmlPanelGroup();

    public HtmlPanelGroup getPnlGrpPowerDeligationContent() {
        return pnlGrpPowerDeligationContent;
    }

    public void setPnlGrpPowerDeligationContent(HtmlPanelGroup hpg) {
        this.pnlGrpPowerDeligationContent = hpg;
    }
    private DefaultSelectedData selectedObjectOfPendingList = new DefaultSelectedData();
    private DefaultSelectedData selectedObjectOfDisciplineType = new DefaultSelectedData();
    private DefaultSelectedData selectedObjectPending = new DefaultSelectedData();

    public DefaultSelectedData getSelectedObjectPending() {
        return selectedObjectPending;
    }

    public void setSelectedObjectPending(DefaultSelectedData selectedObjectPending) {
        this.selectedObjectPending = selectedObjectPending;
    }

    public DefaultSelectedData getSelectedObjectOfDisciplineType() {
        return selectedObjectOfDisciplineType;
    }

    public void setSelectedObjectOfDisciplineType(DefaultSelectedData selectedObjectOfDisciplineType) {
        this.selectedObjectOfDisciplineType = selectedObjectOfDisciplineType;
    }

    public DefaultSelectedData getSelectedObjectOfPendingList() {
        return selectedObjectOfPendingList;
    }

    public void setSelectedObjectOfPendingList(DefaultSelectedData selectedObjectOfPendingList) {
        this.selectedObjectOfPendingList = selectedObjectOfPendingList;
    }
    private DefaultSelectedData selectOneMenu2Bean = new DefaultSelectedData();

    public DefaultSelectedData getSelectOneMenu2Bean() {
        return selectOneMenu2Bean;
    }

    public void setSelectOneMenu2Bean(DefaultSelectedData dsd) {
        this.selectOneMenu2Bean = dsd;
    }
    private DefaultSelectionItems selectOneMenu2DefaultItems = new DefaultSelectionItems();

    public DefaultSelectionItems getSelectOneMenu2DefaultItems() {
        return selectOneMenu2DefaultItems;
    }

    public void setSelectOneMenu2DefaultItems(DefaultSelectionItems dsi) {
        this.selectOneMenu2DefaultItems = dsi;
    }
    private DefaultSelectedData defaultSelectedData3 = new DefaultSelectedData();

    public DefaultSelectedData getDefaultSelectedData3() {
        return defaultSelectedData3;
    }

    public void setDefaultSelectedData3(DefaultSelectedData dsd) {
        this.defaultSelectedData3 = dsd;
    }
    private DefaultSelectionItems selectOneMenu1DefaultItems1 = new DefaultSelectionItems();

    public DefaultSelectionItems getSelectOneMenu1DefaultItems1() {
        return selectOneMenu1DefaultItems1;
    }

    public void setSelectOneMenu1DefaultItems1(DefaultSelectionItems dsi) {
        this.selectOneMenu1DefaultItems1 = dsi;
    }
    private DefaultSelectItemsArray selectOneMenu1DefaultItems2 = new DefaultSelectItemsArray();

    public DefaultSelectItemsArray getSelectOneMenu1DefaultItems2() {
        return selectOneMenu1DefaultItems2;
    }

    public void setSelectOneMenu1DefaultItems2(DefaultSelectItemsArray dsia) {
        this.selectOneMenu1DefaultItems2 = dsia;
    }
    private DefaultSelectItemsArray selectOneMenu1DefaultItems3 = new DefaultSelectItemsArray();

    public DefaultSelectItemsArray getSelectOneMenu1DefaultItems3() {
        return selectOneMenu1DefaultItems3;
    }

    public void setSelectOneMenu1DefaultItems3(DefaultSelectItemsArray dsia) {
        this.selectOneMenu1DefaultItems3 = dsia;
    }
    private HtmlInputText txtRequesterDepartment = new HtmlInputText();

    public HtmlInputText getTxtRequesterDepartment() {
        return txtRequesterDepartment;
    }

    public void setTxtRequesterDepartment(HtmlInputText hit) {
        this.txtRequesterDepartment = hit;
    }
    private HtmlInputText txtRequesterId = new HtmlInputText();

    public HtmlInputText getTxtRequesterId() {
        return txtRequesterId;
    }

    public void setTxtRequesterId(HtmlInputText hit) {
        this.txtRequesterId = hit;
    }
    private HtmlInputText txtRequesterFullName = new HtmlInputText();

    public HtmlInputText getTxtRequesterFullName() {
        return txtRequesterFullName;
    }

    public void setTxtRequesterFullName(HtmlInputText hit) {
        this.txtRequesterFullName = hit;
    }
    private HtmlInputText txtRequesterPosition = new HtmlInputText();

    public HtmlInputText getTxtRequesterPosition() {
        return txtRequesterPosition;
    }

    public void setTxtRequesterPosition(HtmlInputText hit) {
        this.txtRequesterPosition = hit;
    }
    private HtmlInputText txtEmployeeDepartment = new HtmlInputText();

    public HtmlInputText getTxtEmployeeDepartment() {
        return txtEmployeeDepartment;
    }

    public void setTxtEmployeeDepartment(HtmlInputText hit) {
        this.txtEmployeeDepartment = hit;
    }
    private HtmlInputText txtEmployeeId = new HtmlInputText();

    public HtmlInputText getTxtEmployeeId() {
        return txtEmployeeId;
    }

    public void setTxtEmployeeId(HtmlInputText hit) {
        this.txtEmployeeId = hit;
    }
    private HtmlInputText txtEmployeeFullName = new HtmlInputText();

    public HtmlInputText getTxtEmployeeFullName() {
        return txtEmployeeFullName;
    }

    public void setTxtEmployeeFullName(HtmlInputText hit) {
        this.txtEmployeeFullName = hit;
    }
    private HtmlInputText txtEmployeePosition = new HtmlInputText();

    public HtmlInputText getTxtEmployeePosition() {
        return txtEmployeePosition;
    }

    public void setTxtEmployeePosition(HtmlInputText hit) {
        this.txtEmployeePosition = hit;
    }
    private HtmlInputText txtDisciplineDate = new HtmlInputText();

    public HtmlInputText getTxtDisciplineDate() {
        return txtDisciplineDate;
    }

    public void setTxtDisciplineDate(HtmlInputText hit) {
        this.txtDisciplineDate = hit;
    }
    private HtmlInputText txtReportedDate = new HtmlInputText();

    public HtmlInputText getTxtReportedDate() {
        return txtReportedDate;
    }

    public void setTxtReportedDate(HtmlInputText hit) {
        this.txtReportedDate = hit;
    }
    private HtmlSelectOneMenu drlDisciplineType = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlDisciplineType() {
        return drlDisciplineType;
    }

    public void setDrlDisciplineType(HtmlSelectOneMenu hsom) {
        this.drlDisciplineType = hsom;
    }
    private HtmlInputTextarea txtaDisciplineDescription = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaDisciplineDescription() {
        return txtaDisciplineDescription;
    }

    public void setTxtaDisciplineDescription(HtmlInputTextarea hit) {
        this.txtaDisciplineDescription = hit;
    }
    private HtmlInputText txtDisciplinePreviousOccurance = new HtmlInputText();

    public HtmlInputText getTxtDisciplinePreviousOccurance() {
        return txtDisciplinePreviousOccurance;
    }

    public void setTxtDisciplinePreviousOccurance(HtmlInputText hit) {
        this.txtDisciplinePreviousOccurance = hit;
    }
    private SelectInputDate calOffenceDate = new SelectInputDate();

    public SelectInputDate getCalOffenceDate() {
        return calOffenceDate;
    }

    public void setCalOffenceDate(SelectInputDate sid) {
        this.calOffenceDate = sid;
    }
    private SelectInputDate calReportedDate = new SelectInputDate();

    public SelectInputDate getCalReportedDate() {
        return calReportedDate;
    }

    public void setCalReportedDate(SelectInputDate sid) {
        this.calReportedDate = sid;
    }
    private HtmlInputTextarea txtaDisciplineDecisionTobeTaken = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaDisciplineDecisionTobeTaken() {
        return txtaDisciplineDecisionTobeTaken;
    }

    public void setTxtaDisciplineDecisionTobeTaken(HtmlInputTextarea hit) {
        this.txtaDisciplineDecisionTobeTaken = hit;
    }
    private PanelPopup pnlPopupViewAccusedComment = new PanelPopup();

    public String getExpectedPenalty() {
        return expectedPenalty;
    }

    public void setExpectedPenalty(String expectedPenalty) {
        this.expectedPenalty = expectedPenalty;
    }

    public PanelPopup getPnlPopupViewAccusedComment() {
        return pnlPopupViewAccusedComment;
    }

    public void setPnlPopupViewAccusedComment(PanelPopup pnlPopupViewAccusedComment) {
        this.pnlPopupViewAccusedComment = pnlPopupViewAccusedComment;
    }
    private HtmlCommandButton commentsbtnClosePopupSuccessOrFailure = new HtmlCommandButton();
    private HtmlOutputLabel lblSuccessOrErrorMessage = new HtmlOutputLabel();
    private HtmlOutputLabel commenteslblSuccessOrErrorMessage = new HtmlOutputLabel();
    private PanelLayout pnlMessageBody = new PanelLayout();
    private PanelLayout commentspnlMessageBody = new PanelLayout();
    private HtmlPanelGroup panelGroupMessage = new HtmlPanelGroup();
    private HtmlOutputText comenetspnMessageTitle = new HtmlOutputText();
    private HtmlPanelGroup commentespanelGroupMessage = new HtmlPanelGroup();
    private PanelPopup pnlPopupSuccessOrFailure = new PanelPopup();
    private PanelPopup comeentespnlPopupSuccessOrFailure = new PanelPopup();

    public HtmlOutputText getComenetspnMessageTitle() {
        return comenetspnMessageTitle;
    }

    public void setComenetspnMessageTitle(HtmlOutputText comenetspnMessageTitle) {
        this.comenetspnMessageTitle = comenetspnMessageTitle;
    }

    public HtmlCommandButton getCommentsbtnClosePopupSuccessOrFailure() {
        return commentsbtnClosePopupSuccessOrFailure;
    }

    public void setCommentsbtnClosePopupSuccessOrFailure(HtmlCommandButton commentsbtnClosePopupSuccessOrFailure) {
        this.commentsbtnClosePopupSuccessOrFailure = commentsbtnClosePopupSuccessOrFailure;
    }

    public PanelLayout getCommentspnlMessageBody() {
        return commentspnlMessageBody;
    }

    public void setCommentspnlMessageBody(PanelLayout commentspnlMessageBody) {
        this.commentspnlMessageBody = commentspnlMessageBody;
    }

    public HtmlOutputLabel getCommenteslblSuccessOrErrorMessage() {
        return commenteslblSuccessOrErrorMessage;
    }

    public void setCommenteslblSuccessOrErrorMessage(HtmlOutputLabel commenteslblSuccessOrErrorMessage) {
        this.commenteslblSuccessOrErrorMessage = commenteslblSuccessOrErrorMessage;
    }

    public HtmlPanelGroup getCommentespanelGroupMessage() {
        return commentespanelGroupMessage;
    }

    public void setCommentespanelGroupMessage(HtmlPanelGroup commentespanelGroupMessage) {
        this.commentespanelGroupMessage = commentespanelGroupMessage;
    }

    public PanelPopup getComeentespnlPopupSuccessOrFailure() {
        return comeentespnlPopupSuccessOrFailure;
    }

    public void setComeentespnlPopupSuccessOrFailure(PanelPopup comeentespnlPopupSuccessOrFailure) {
        this.comeentespnlPopupSuccessOrFailure = comeentespnlPopupSuccessOrFailure;
    }

    public PanelPopup getPnlPopupSuccessOrFailure() {
        return pnlPopupSuccessOrFailure;
    }

    public String btnClosePopupSuccessOrFailure_action() {
        pnlPopupViewAccusedComment.setRendered(false);
        pnlPopupSuccessOrFailure.setRendered(false);
        return null;
    }

    public String btnClosePopupViewAccusedComment_action() {
        pnlPopupViewAccusedComment.setRendered(false);
        pnlPopupSuccessOrFailure.setRendered(false);
        return null;
    }

    public void setPnlPopupSuccessOrFailure(PanelPopup pp) {
        this.pnlPopupSuccessOrFailure = pp;
    }

    public SimpleDateFormat getDateFormat() {
        return dateFormat;
    }

    public void setDateFormat(SimpleDateFormat dateFormat) {
        this.dateFormat = dateFormat;
    }

    public String getDateOfOffence() {
        return dateOfOffence;
    }

    public void setDateOfOffence(String dateOfOffence) {
        this.dateOfOffence = dateOfOffence;
    }

    public String getDescriptionOfOffence() {
        return descriptionOfOffence;
    }

    public void setDescriptionOfOffence(String descriptionOfOffence) {
        this.descriptionOfOffence = descriptionOfOffence;
    }

    public int getDisciplineProblemId() {
        return disciplineProblemId;
    }

    public void setDisciplineProblemId(int disciplineProblemId) {
        this.disciplineProblemId = disciplineProblemId;
    }

    public DisciplineRegistrationManager getDisciplineRegistrationManager() {
        return disciplineRegistrationManager;
    }

    public void setDisciplineRegistrationManager(DisciplineRegistrationManager disciplineRegistrationManager) {
        this.disciplineRegistrationManager = disciplineRegistrationManager;
    }

    public String getIsDocumentAttached() {
        return isDocumentAttached;
    }

    public void setIsDocumentAttached(String isDocumentAttached) {
        this.isDocumentAttached = isDocumentAttached;
    }

    public String getOffenceType() {
        return offenceType;
    }

    public void setOffenceType(String offenceType) {
        this.offenceType = offenceType;
    }

    public String getOffenderId() {
        return offenderId;
    }

    public void setOffenderId(String offenderId) {
        this.offenderId = offenderId;
    }

    public int getRepititionOfOffence() {
        return repititionOfOffence;
    }

    public void setRepititionOfOffence(int repititionOfOffence) {
        this.repititionOfOffence = repititionOfOffence;
    }

    public String getReportedDate() {
        return reportedDate;
    }

    public void setReportedDate(String reportedDate) {
        this.reportedDate = reportedDate;
    }

    public String getRequestedMeasureToBeTaken() {
        return requestedMeasureToBeTaken;
    }

    public void setRequestedMeasureToBeTaken(String requestedMeasureToBeTaken) {
        this.requestedMeasureToBeTaken = requestedMeasureToBeTaken;
    }

    public String getRequesterType() {
        return requesterType;
    }

    public void setRequesterType(String requesterType) {
        this.requesterType = requesterType;
    }

    public String getCurrentStatus() {
        return currentStatus;
    }

    public void setCurrentStatus(String currentStatus) {
        this.currentStatus = currentStatus;
    }

    public DisciplineApproveManager getDisciplineApproveManager() {
        return disciplineApproveManager;
    }

    public void setDisciplineApproveManager(DisciplineApproveManager disciplineApproveManager) {
        this.disciplineApproveManager = disciplineApproveManager;
    }
    private HtmlCommandButton btnReset = new HtmlCommandButton();

    public HtmlCommandButton getBtnReset() {
        return btnReset;
    }

    public void setBtnReset(HtmlCommandButton hcb) {
        this.btnReset = hcb;
    }

    public AccusedDefenceManager getAccusedDefenceManager() {
        return accusedDefenceManager;
    }

    public void setAccusedDefenceManager(AccusedDefenceManager accusedDefenceManager) {
        this.accusedDefenceManager = accusedDefenceManager;
    }

    public ArrayList<DisciplineRequestModel> getAllCommittedOffencesOfEmployee() {
        return allCommittedOffencesOfEmployee;
    }

    public void setAllCommittedOffencesOfEmployee(ArrayList<DisciplineRequestModel> allCommittedOffencesOfEmployee) {
        this.allCommittedOffencesOfEmployee = allCommittedOffencesOfEmployee;
    }
    private PanelPopup pnlPopupAllCommittedOffences = new PanelPopup();

    public PanelPopup getPnlPopupAllCommittedOffences() {
        return pnlPopupAllCommittedOffences;
    }

    public void setPnlPopupAllCommittedOffences(PanelPopup pp) {
        this.pnlPopupAllCommittedOffences = pp;
    }
    public HtmlCommandButton LoginButton = new HtmlCommandButton();

    public HtmlCommandButton getLoginButton() {
        return LoginButton;
    }

    public void setLoginButton(HtmlCommandButton LoginButton) {
        this.LoginButton = LoginButton;
    }
    private HtmlCommandButton btnPostDecision = new HtmlCommandButton();

    public HtmlCommandButton getBtnPostDecision() {
        return btnPostDecision;
    }

    public void setBtnPostDecision(HtmlCommandButton hcb) {
        this.btnPostDecision = hcb;
    }
    private DefaultSelectedData selectObjectOfCommittee = new DefaultSelectedData();

    public DefaultSelectedData getSelectObjectOfCommittee() {
        return selectObjectOfCommittee;
    }

    public void setSelectObjectOfCommittee(DefaultSelectedData selectObjectOfCommittee) {
        this.selectObjectOfCommittee = selectObjectOfCommittee;
    }
    private DefaultSelectedData selectedDataOfPenality = new DefaultSelectedData();

    public DefaultSelectedData getSelectedDataOfPenality() {
        return selectedDataOfPenality;
    }

    public ArrayList<Option> getPenaltyTypesListOption() {
        return penaltyTypesListOption;
    }

    public void setPenaltyTypesListOption(ArrayList<Option> penaltyTypesListOption) {
        this.penaltyTypesListOption = penaltyTypesListOption;
    }

    public void setSelectedDataOfPenality(DefaultSelectedData selectedDataOfPenality) {
        this.selectedDataOfPenality = selectedDataOfPenality;
    }
    private DefaultSelectedData selectObjectOfDecisionType = new DefaultSelectedData();

    public DefaultSelectedData getSelectObjectOfDecisionType() {
        return selectObjectOfDecisionType;
    }

    public void setSelectObjectOfDecisionType(DefaultSelectedData selectObjectOfDecisionType) {
        this.selectObjectOfDecisionType = selectObjectOfDecisionType;
    }
    private DefaultSelectedData selectOneMenu1Bean = new DefaultSelectedData();

    public DefaultSelectedData getSelectOneMenu1Bean() {
        return selectOneMenu1Bean;
    }

    public void setSelectOneMenu1Bean(DefaultSelectedData dsd) {
        this.selectOneMenu1Bean = dsd;
    }
    private HtmlSelectOneMenu drlDecision = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlDecision() {
        return drlDecision;
    }

    public void setDrlDecision(HtmlSelectOneMenu hsom) {
        this.drlDecision = hsom;
    }
    private HtmlInputTextarea txtaDecisionExplanation = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaDecisionExplanation() {
        return txtaDecisionExplanation;
    }

    public void setTxtaDecisionExplanation(HtmlInputTextarea hit) {
        this.txtaDecisionExplanation = hit;
    }
    private HtmlInputTextarea txtaPenalityShouldBeGivenForThisOffence = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaPenalityShouldBeGivenForThisOffence() {
        return txtaPenalityShouldBeGivenForThisOffence;
    }

    public void setTxtaPenalityShouldBeGivenForThisOffence(HtmlInputTextarea hit) {
        this.txtaPenalityShouldBeGivenForThisOffence = hit;
    }
    private DefaultSelectedData selectOneListbox1Bean = new DefaultSelectedData();

    public DefaultSelectedData getSelectOneListbox1Bean() {
        return selectOneListbox1Bean;
    }

    public void setSelectOneListbox1Bean(DefaultSelectedData dsd) {
        this.selectOneListbox1Bean = dsd;
    }
    private HtmlCommandLink lnkToAccusedCommentPage = new HtmlCommandLink();

    public String getAgreeOnDefaultPenalty() {
        return agreeOnDefaultPenalty;
    }

    public void setAgreeOnDefaultPenalty(String agreeOnDefaultPenalty) {
        this.agreeOnDefaultPenalty = agreeOnDefaultPenalty;
    }

    public HtmlCommandLink getLnkToAccusedCommentPage() {
        return lnkToAccusedCommentPage;
    }

    public void setLnkToAccusedCommentPage(HtmlCommandLink btnToAccusedCommentPage) {
        this.lnkToAccusedCommentPage = btnToAccusedCommentPage;
    }
    private DefaultSelectedData selectOneRadio1Bean = new DefaultSelectedData();

    public DefaultSelectedData getSelectOneRadio1Bean() {
        return selectOneRadio1Bean;
    }

    public void setSelectOneRadio1Bean(DefaultSelectedData dsd) {
        this.selectOneRadio1Bean = dsd;
    }
    private DefaultSelectionItems selectOneRadio1DefaultItems = new DefaultSelectionItems();

    public DefaultSelectionItems getSelectOneRadio1DefaultItems() {
        return selectOneRadio1DefaultItems;
    }

    public void setSelectOneRadio1DefaultItems(DefaultSelectionItems dsi) {
        this.selectOneRadio1DefaultItems = dsi;
    }
    private HtmlSelectOneRadio radioGroupAgreeOnDefaultPenalty = new HtmlSelectOneRadio();

    public HtmlSelectOneRadio getRadioGroupAgreeOnDefaultPenalty() {
        return radioGroupAgreeOnDefaultPenalty;
    }

    public void setRadioGroupAgreeOnDefaultPenalty(HtmlSelectOneRadio hsor) {
        this.radioGroupAgreeOnDefaultPenalty = hsor;
    }
    private DefaultSelectedData selectBooleanCheckbox1Bean = new DefaultSelectedData();

    public DefaultSelectedData getSelectBooleanCheckbox1Bean() {
        return selectBooleanCheckbox1Bean;
    }

    public void setSelectBooleanCheckbox1Bean(DefaultSelectedData dsd) {
        this.selectBooleanCheckbox1Bean = dsd;
    }
    private HtmlSelectBooleanCheckbox ckbForwardToCommittee = new HtmlSelectBooleanCheckbox();

    public HtmlSelectBooleanCheckbox getCkbForwardToCommittee() {
        return ckbForwardToCommittee;
    }

    public void setCkbForwardToCommittee(HtmlSelectBooleanCheckbox hsbc) {
        this.ckbForwardToCommittee = hsbc;
    }
    private HtmlSelectOneMenu drlCommittee = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlCommittee() {
        return drlCommittee;
    }

    public void setDrlCommittee(HtmlSelectOneMenu hsom) {
        this.drlCommittee = hsom;
    }
    private PanelLayout pnlLayoutDecisoion = new PanelLayout();

    public PanelLayout getPnlLayoutDecisoion() {
        return pnlLayoutDecisoion;
    }

    public void setPnlLayoutDecisoion(PanelLayout pl) {
        this.pnlLayoutDecisoion = pl;
    }
    private HtmlInputTextarea txtaPenaltyAcceptance = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaPenaltyAcceptance() {
        return txtaPenaltyAcceptance;
    }

    public void setTxtaPenaltyAcceptance(HtmlInputTextarea hit) {
        this.txtaPenaltyAcceptance = hit;
    }
    private HtmlInputTextarea txtaAccusationAcceptance = new HtmlInputTextarea();

    public HtmlInputTextarea getTxtaAccusationAcceptance() {
        return txtaAccusationAcceptance;
    }

    public void setTxtaAccusationAcceptance(HtmlInputTextarea hit) {
        this.txtaAccusationAcceptance = hit;
    }
    private HtmlOutputLabel lblAccusationAcceptanceValue = new HtmlOutputLabel();

    public HtmlOutputLabel getLblAccusationAcceptanceValue() {
        return lblAccusationAcceptanceValue;
    }

    public void setLblAccusationAcceptanceValue(HtmlOutputLabel hol) {
        this.lblAccusationAcceptanceValue = hol;
    }
    private HtmlOutputLabel lblPenaltyAcceptanceValue = new HtmlOutputLabel();

    public HtmlOutputLabel getLblPenaltyAcceptanceValue() {
        return lblPenaltyAcceptanceValue;
    }

    public void setLblPenaltyAcceptanceValue(HtmlOutputLabel hol) {
        this.lblPenaltyAcceptanceValue = hol;
    }
    private HtmlCommandLink lnkViewAccusedComment = new HtmlCommandLink();

    public HtmlCommandLink getLnkViewAccusedComment() {
        return lnkViewAccusedComment;
    }

    public void setLnkViewAccusedComment(HtmlCommandLink lnkViewAccusedComment) {
        this.lnkViewAccusedComment = lnkViewAccusedComment;
    }
    private HtmlCommandLink cmdLinkViewPreviesDecisions = new HtmlCommandLink();

    public HtmlCommandLink getCmdLinkViewPreviesDecisions() {
        return cmdLinkViewPreviesDecisions;
    }

    public void setCmdLinkViewPreviesDecisions(HtmlCommandLink hcl) {
        this.cmdLinkViewPreviesDecisions = hcl;
    }
    private HtmlOutputLabel lblCommittee = new HtmlOutputLabel();

    public HtmlOutputLabel getLblCommittee() {
        return lblCommittee;
    }

    public void setLblCommittee(HtmlOutputLabel hol) {
        this.lblCommittee = hol;
    }
    private PanelPopup pnlPopupCommitteeMembers = new PanelPopup();

    public PanelPopup getPnlPopupCommitteeMembers() {
        return pnlPopupCommitteeMembers;
    }

    public void setPnlPopupCommitteeMembers(PanelPopup pp) {
        this.pnlPopupCommitteeMembers = pp;
    }
    private HtmlInputText txtDocReferenceNumber = new HtmlInputText();

    public HtmlInputText getTxtDocReferenceNumber() {
        return txtDocReferenceNumber;
    }

    public void setTxtDocReferenceNumber(HtmlInputText hit) {
        this.txtDocReferenceNumber = hit;
    }
    private HtmlOutputLabel lbDecision = new HtmlOutputLabel();

    public HtmlOutputLabel getLbDecision() {
        return lbDecision;
    }

    public void setLbDecision(HtmlOutputLabel hol) {
        this.lbDecision = hol;
    }
    private HtmlCommandLink cmdLinkConfirmCommitteeDecisions = new HtmlCommandLink();

    public HtmlCommandLink getCmdLinkConfirmCommitteeDecisions() {
        return cmdLinkConfirmCommitteeDecisions;
    }

    public void setCmdLinkConfirmCommitteeDecisions(HtmlCommandLink hcl) {
        this.cmdLinkConfirmCommitteeDecisions = hcl;
    }
    private HtmlCommandLink cmdLnkClosePopupCommitteeMembers = new HtmlCommandLink();

    public HtmlCommandLink getCmdLnkClosePopupCommitteeMembers() {
        return cmdLnkClosePopupCommitteeMembers;
    }

    public void setCmdLnkClosePopupCommitteeMembers(HtmlCommandLink hcl) {
        this.cmdLnkClosePopupCommitteeMembers = hcl;
    }
    private HtmlOutputLabel lblSignInReminder = new HtmlOutputLabel();

    public HtmlOutputLabel getLblSignInReminder() {
        return lblSignInReminder;
    }

    public void setLblSignInReminder(HtmlOutputLabel hol) {
        this.lblSignInReminder = hol;
    }
    private HtmlCommandLink lnkViewEyeWitnessComment = new HtmlCommandLink();

    public HtmlCommandLink getLnkViewEyeWitnessComment() {
        return lnkViewEyeWitnessComment;
    }
    private HtmlSelectOneMenu drlSummaryOfWitness = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlSummaryOfWitness() {
        return drlSummaryOfWitness;
    }

    public void setDrlSummaryOfWitness(HtmlSelectOneMenu drlSummaryOfWitness) {
        this.drlSummaryOfWitness = drlSummaryOfWitness;
    }

    public ArrayList<EyeWitnessModel> getEyeWitnessesList() {
        return eyeWitnessesList;
    }

    public void setEyeWitnessesList(ArrayList<EyeWitnessModel> eyeWitnessesList) {
        this.eyeWitnessesList = eyeWitnessesList;
    }

    public void setLnkViewEyeWitnessComment(HtmlCommandLink hcl) {
        this.lnkViewEyeWitnessComment = hcl;
    }
    private HtmlSelectOneMenu drlNewPenalty = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrlNewPenalty() {
        return drlNewPenalty;
    }

    public EyeWitnessManager getEyeWitnessManager() {
        return eyeWitnessManager;
    }

    public void setEyeWitnessManager(EyeWitnessManager eyeWitnessManager) {
        this.eyeWitnessManager = eyeWitnessManager;
    }

    public ArrayList<Option> getSummaryList() {
        return summaryList;
    }

    public void setSummaryList(ArrayList<Option> summaryList) {
        this.summaryList = summaryList;
    }

    public void setDrlNewPenalty(HtmlSelectOneMenu hsom) {
        this.drlNewPenalty = hsom;
    }
    private PanelPopup pnlEyeWitnessesRegistration = new PanelPopup();

    public PanelPopup getPnlEyeWitnessesRegistration() {
        return pnlEyeWitnessesRegistration;
    }

    public void setPnlEyeWitnessesRegistration(PanelPopup pp) {
        this.pnlEyeWitnessesRegistration = pp;
    }
    private DefaultTableDataProvider defaultTableDataProvider = new DefaultTableDataProvider();

    public DefaultTableDataProvider getDefaultTableDataProvider() {
        return defaultTableDataProvider;
    }

    public void setDefaultTableDataProvider(DefaultTableDataProvider dtdp) {
        this.defaultTableDataProvider = dtdp;
    }
    private HtmlOutputText loginConfirmed1 = new HtmlOutputText();

    public HtmlOutputText getLoginConfirmed1() {
        return loginConfirmed1;
    }

    public void setLoginConfirmed1(HtmlOutputText hot) {
        this.loginConfirmed1 = hot;
    }
    private PopupBean panelPopup1Bean = new PopupBean();

    public PopupBean getPanelPopup1Bean() {
        return panelPopup1Bean;
    }

    public void setPanelPopup1Bean(PopupBean pb) {
        this.panelPopup1Bean = pb;
    }
    private PanelPopup panelPopupMessageForCommeteComentes = new PanelPopup();

    public PanelPopup getPanelPopupMessageForCommeteComentes() {
        return panelPopupMessageForCommeteComentes;
    }

    public void setPanelPopupMessageForCommeteComentes(PanelPopup pp) {
        this.panelPopupMessageForCommeteComentes = pp;
    }
    private javax.faces.component.html.HtmlInputText employeeID_textField = new javax.faces.component.html.HtmlInputText();

    public javax.faces.component.html.HtmlInputText getEmployeeID_textField() {
        return employeeID_textField;
    }

    public void setEmployeeID_textField(javax.faces.component.html.HtmlInputText hit) {
        this.employeeID_textField = hit;
    }
    private javax.faces.component.html.HtmlInputText employeeName_textField = new javax.faces.component.html.HtmlInputText();

    public javax.faces.component.html.HtmlInputText getEmployeeName_textField() {
        return employeeName_textField;
    }

    public void setEmployeeName_textField(javax.faces.component.html.HtmlInputText hit) {
        this.employeeName_textField = hit;
    }
    private javax.faces.component.html.HtmlInputTextarea responsiblity_textArea = new javax.faces.component.html.HtmlInputTextarea();

    public javax.faces.component.html.HtmlInputTextarea getResponsiblity_textArea() {
        return responsiblity_textArea;
    }

    public void setResponsiblity_textArea(javax.faces.component.html.HtmlInputTextarea hit) {
        this.responsiblity_textArea = hit;
    }
    private HtmlInputSecret password_secretField = new HtmlInputSecret();

    public HtmlInputSecret getPassword_secretField() {
        return password_secretField;
    }

    public void setPassword_secretField(HtmlInputSecret his) {
        this.password_secretField = his;
    }
    private javax.faces.component.html.HtmlInputText userName_textField = new javax.faces.component.html.HtmlInputText();

    public javax.faces.component.html.HtmlInputText getUserName_textField() {
        return userName_textField;
    }

    public void setUserName_textField(javax.faces.component.html.HtmlInputText hit) {
        this.userName_textField = hit;
    }
    private HtmlCommandLink cmdview_Committee_Comments = new HtmlCommandLink();

    public HtmlCommandLink getCmdview_Committee_Comments() {
        return cmdview_Committee_Comments;
    }

    public void setCmdview_Committee_Comments(HtmlCommandLink hcl) {
        this.cmdview_Committee_Comments = hcl;
    }
    private PanelPopup pnlPopupComeeteeComenets = new PanelPopup();

    public PanelPopup getPnlPopupComeeteeComenets() {
        return pnlPopupComeeteeComenets;
    }

    public void setPnlPopupComeeteeComenets(PanelPopup pp) {
        this.pnlPopupComeeteeComenets = pp;
    }
    private HtmlPanelGrid panelGridPopupViewCommiteeCommentes = new HtmlPanelGrid();

    public HtmlPanelGrid getPanelGridPopupViewCommiteeCommentes() {
        return panelGridPopupViewCommiteeCommentes;
    }

    public void setPanelGridPopupViewCommiteeCommentes(HtmlPanelGrid hpg) {
        this.panelGridPopupViewCommiteeCommentes = hpg;
    }
    private com.icesoft.faces.component.ext.HtmlOutputText otxtViewCommeeteCommentesPopupHeader1 = new com.icesoft.faces.component.ext.HtmlOutputText();

    public com.icesoft.faces.component.ext.HtmlOutputText getOtxtViewCommeeteCommentesPopupHeader1() {
        return otxtViewCommeeteCommentesPopupHeader1;
    }

    public void setOtxtViewCommeeteCommentesPopupHeader1(com.icesoft.faces.component.ext.HtmlOutputText hot) {
        this.otxtViewCommeeteCommentesPopupHeader1 = hot;
    }
    private HtmlCommandButton btnClosePopupCommeeteComeentes = new HtmlCommandButton();

    public HtmlCommandButton getBtnClosePopupCommeeteComeentes() {
        return btnClosePopupCommeeteComeentes;
    }

    public void setBtnClosePopupCommeeteComeentes(HtmlCommandButton hcb) {
        this.btnClosePopupCommeeteComeentes = hcb;
    }
    private PanelLayout pnlLayoutCommeeteComentes = new PanelLayout();

    public PanelLayout getPnlLayoutCommeeteComentes() {
        return pnlLayoutCommeeteComentes;
    }

    public void setPnlLayoutCommeeteComentes(PanelLayout pl) {
        this.pnlLayoutCommeeteComentes = pl;
    }
    private PanelLayout pnlLayoutPopupCommeteeCommentes = new PanelLayout();

    public PanelLayout getPnlLayoutPopupCommeteeCommentes() {
        return pnlLayoutPopupCommeteeCommentes;
    }

    public void setPnlLayoutPopupCommeteeCommentes(PanelLayout pl) {
        this.pnlLayoutPopupCommeteeCommentes = pl;
    }
    private HtmlDataTable dataTableCommetesComentes = new HtmlDataTable();

    public HtmlDataTable getDataTableCommetesComentes() {
        return dataTableCommetesComentes;
    }

    public void setDataTableCommetesComentes(HtmlDataTable hdt) {
        this.dataTableCommetesComentes = hdt;
    }
    private UIColumn colCommeentsGivenDay = new UIColumn();

    public UIColumn getColCommeentsGivenDay() {
        return colCommeentsGivenDay;
    }

    public void setColCommeentsGivenDay(UIColumn uic) {
        this.colCommeentsGivenDay = uic;
    }
    private javax.faces.component.html.HtmlInputText txt_CommeentsGivenDay = new javax.faces.component.html.HtmlInputText();

    public javax.faces.component.html.HtmlInputText getTxt_CommeentsGivenDay() {
        return txt_CommeentsGivenDay;
    }

    public void setTxt_CommeentsGivenDay(javax.faces.component.html.HtmlInputText hit) {
        this.txt_CommeentsGivenDay = hit;
    }
    private HtmlInputText txt_DeductAmount = new HtmlInputText();

    public HtmlInputText getTxt_DeductAmount() {
        return txt_DeductAmount;
    }

    public void setTxt_DeductAmount(HtmlInputText hit) {
        this.txt_DeductAmount = hit;
    }
    private HtmlInputText txt_Duration = new HtmlInputText();

    public HtmlInputText getTxt_Duration() {
        return txt_Duration;
    }

    public void setTxt_Duration(HtmlInputText hit) {
        this.txt_Duration = hit;
    }
    private DefaultSelectedData defaultSelectedData4 = new DefaultSelectedData();

    public DefaultSelectedData getDefaultSelectedData4() {
        return defaultSelectedData4;
    }

    public void setDefaultSelectedData4(DefaultSelectedData dsd) {
        this.defaultSelectedData4 = dsd;
    }
    private javax.faces.component.html.HtmlSelectOneMenu drl_suggestedPenality = new javax.faces.component.html.HtmlSelectOneMenu();

    public javax.faces.component.html.HtmlSelectOneMenu getDrl_suggestedPenality() {
        return drl_suggestedPenality;
    }

    public void setDrl_suggestedPenality(javax.faces.component.html.HtmlSelectOneMenu hsom) {
        this.drl_suggestedPenality = hsom;
    }
    private PopupBean panelPopup1Bean1 = new PopupBean();

    public PopupBean getPanelPopup1Bean1() {
        return panelPopup1Bean1;
    }

    public void setPanelPopup1Bean1(PopupBean pb) {
        this.panelPopup1Bean1 = pb;
    }
    private PanelPopup panelPopup_CommeeteChairMan = new PanelPopup();

    public PanelPopup getPanelPopup_CommeeteChairMan() {
        return panelPopup_CommeeteChairMan;
    }

    public void setPanelPopup_CommeeteChairMan(PanelPopup pp) {
        this.panelPopup_CommeeteChairMan = pp;
    }
    private PanelLayout pnlMessageBodyAllChairMan = new PanelLayout();

    public PanelLayout getPnlMessageBodyAllChairMan() {
        return pnlMessageBodyAllChairMan;
    }

    public void setPnlMessageBodyAllChairMan(PanelLayout pl) {
        this.pnlMessageBodyAllChairMan = pl;
    }
    private HtmlInputTextarea txt_ChairMan_Commentes = new HtmlInputTextarea();

    public HtmlInputTextarea getTxt_ChairMan_Commentes() {
        return txt_ChairMan_Commentes;
    }

    public void setTxt_ChairMan_Commentes(HtmlInputTextarea hit) {
        this.txt_ChairMan_Commentes = hit;
    }
    private DefaultSelectedData defaultSelectedData5 = new DefaultSelectedData();

    public DefaultSelectedData getDefaultSelectedData5() {
        return defaultSelectedData5;
    }

    public void setDefaultSelectedData5(DefaultSelectedData dsd) {
        this.defaultSelectedData5 = dsd;
    }
    private DefaultSelectionItems selectOneMenu1DefaultItems4 = new DefaultSelectionItems();

    public DefaultSelectionItems getSelectOneMenu1DefaultItems4() {
        return selectOneMenu1DefaultItems4;
    }

    public void setSelectOneMenu1DefaultItems4(DefaultSelectionItems dsi) {
        this.selectOneMenu1DefaultItems4 = dsi;
    }
    private DefaultSelectItemsArray selectOneMenu1DefaultItems5 = new DefaultSelectItemsArray();

    public DefaultSelectItemsArray getSelectOneMenu1DefaultItems5() {
        return selectOneMenu1DefaultItems5;
    }

    public void setSelectOneMenu1DefaultItems5(DefaultSelectItemsArray dsia) {
        this.selectOneMenu1DefaultItems5 = dsia;
    }
    private DefaultSelectItemsArray selectOneMenu1DefaultItems6 = new DefaultSelectItemsArray();

    public DefaultSelectItemsArray getSelectOneMenu1DefaultItems6() {
        return selectOneMenu1DefaultItems6;
    }

    public void setSelectOneMenu1DefaultItems6(DefaultSelectItemsArray dsia) {
        this.selectOneMenu1DefaultItems6 = dsia;
    }
    private HtmlSelectOneMenu drl_ChairMan_suggetedPenality = new HtmlSelectOneMenu();

    public HtmlSelectOneMenu getDrl_ChairMan_suggetedPenality() {
        return drl_ChairMan_suggetedPenality;
    }

    public void setDrl_ChairMan_suggetedPenality(HtmlSelectOneMenu hsom) {
        this.drl_ChairMan_suggetedPenality = hsom;
    }
    private HtmlInputText txt_ChairMan_deductAmoun = new HtmlInputText();

    public HtmlInputText getTxt_ChairMan_deductAmoun() {
        return txt_ChairMan_deductAmoun;
    }

    public void setTxt_ChairMan_deductAmoun(HtmlInputText hit) {
        this.txt_ChairMan_deductAmoun = hit;
    }
    private HtmlInputText txt_chairMan_Duration = new HtmlInputText();

    public HtmlInputText getTxt_chairMan_Duration() {
        return txt_chairMan_Duration;
    }

    public void setTxt_chairMan_Duration(HtmlInputText hit) {
        this.txt_chairMan_Duration = hit;
    }


    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Local Variables">
    /**
     * <p>Construct a new Page bean instance.</p>
     */
    public DisciplineApprovePage() {
    }

    /**
     * <p>Callback method that is called whenever a page is navigated to,
     * either directly via a URL, or indirectly via page navigation.
     * Customize this method to acquire resources that will be needed
     * for event handlers and lifecycle methods, whether or not this
     * page is performing post back processing.</p>
     *
     * <p>Note that, if the current request is a postback, the property
     * values of the components do <strong>not</strong> represent any
     * values submitted with this request.  Instead, they represent the
     * property values that were saved for this view when it was rendered.</p>
     */
    public void init() {
        // txt_CommeentsGivenDay.setValue("this is test ");
        // Perform initializations inherited from our superclass
        super.init();
        // Perform application initialization that must complete
        // *before* managed components are initialized
        // TODO - add your own initialiation code here

        // <editor-fold defaultstate="collapsed" desc="Managed Component Initialization">
        // Initialize automatically managed components
        // *Note* - this logic should NOT be modified
        try {
            _init();
        } catch (Exception e) {
            log("Page1 Initialization Failure", e);
            throw e instanceof FacesException ? (FacesException) e : new FacesException(e);
        }

    // </editor-fold>
    // Perform application initialization that must complete
    // *after* managed components are initialized
    // TODO - add your own initialization code here
    }

    /**
     * <p>Callback method that is called after the component tree has been
     * restored, but before any event processing takes place.  This method
     * will <strong>only</strong> be called on a postback request that
     * is processing a form submit.  Customize this method to allocate
     * resources that will be required in your event handlers.</p>
     */
    public void preprocess() {
    }

    /**
     * <p>Callback method that is called just before rendering takes place.
     * This method will <strong>only</strong> be called for the page that
     * will actually be rendered (and not, for example, on a page that
     * handled a postback and then navigated to a different page).  Customize
     * this method to allocate resources that will be required for rendering
     * this page.</p>
     */
    public void prerender() {
    }

    /**
     * <p>Callback method that is called after rendering is completed for
     * this request, if <code>init()</code> was called (regardless of whether
     * or not this was the page that was actually rendered).  Customize this
     * method to release resources acquired in the <code>init()</code>,
     * <code>preprocess()</code>, or <code>prerender()</code> methods (or
     * acquired during execution of an event handler).</p>
     */
    public void destroy() {
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected ApplicationBean1 getApplicationBean1() {
        return (ApplicationBean1) getBean("ApplicationBean1");
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected RequestBean1 getRequestBean1() {
        return (RequestBean1) getBean("RequestBean1");
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected SessionBean1 getSessionBean1() {
        return (SessionBean1) getBean("SessionBean1");
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    protected CustomValidations getCustomValidations() {
        return (CustomValidations) getBean("CustomValidations");
    } // </editor-fold>
/////////////////////////////////////////////////////////////////////////////////////////////
    String loggedInEmployeeId;
    String loggedInEmployeeDept;
    String disciplinedEmployeeId;
    String userName;
    //CommtteeComments commentes = new CommtteeComments();
    EmployeeManage employeeManager = new EmployeeManage();
    EyeWitnessManager eyeWitnessManager = new EyeWitnessManager();
    DisciplineRequestManager disciplineRequestManager = new DisciplineRequestManager();
    DisciplineApproveManager disciplineApproveManager = new DisciplineApproveManager();
    DisciplineRegistrationManager disciplineRegistrationManager = new DisciplineRegistrationManager();
    CommitteeMemberModel newCommentes = new CommitteeMemberModel();
    PenaltyRegistrationManager penaltyRegistrationManager = new PenaltyRegistrationManager();
    SiteSecurityManager siteSecurityManager = new SiteSecurityManager();
    // CommitteeManager committeeManager = new CommitteeManager();
    CommitteeMemberRegistrationManager committeeMemberRegistrationManager = new CommitteeMemberRegistrationManager();
    AccusedDefenceManager accusedDefenceManager = new AccusedDefenceManager();
    DisciplineRequestModel disciplineRequestModel = new DisciplineRequestModel();
    ArrayList<DisciplineRequestModel> allCommittedOffencesOfEmployee = new ArrayList<DisciplineRequestModel>();
//    ArrayList<HashMap> committeeMembersList = new ArrayList<HashMap>();
    // ArrayList<CommtteeComments> committeeCommentes = new ArrayList<CommtteeComments>();
    ArrayList<CommitteeMemberModel> committeeMembersList = new ArrayList<CommitteeMemberModel>();
    ArrayList<EyeWitnessModel> eyeWitnessesList = new ArrayList<EyeWitnessModel>();
    ArrayList<Option> disciplineTypesList = disciplineRequestManager.getDisciplineTypes();
    ArrayList<Option> availableDecisionsToMake = new ArrayList<Option>();//disciplineApproveManager.getAvailableDecisionToMake();
    ArrayList<SelectItem> committeeLists = disciplineApproveManager.getActiveDesciplineCommittees();// new ArrayList<Option>();
    ArrayList<Option> pendingRequestLists = new ArrayList<Option>();//disciplineRequestManager.getPendingRequests();
    ArrayList<Option> decisionMadeByEmployeeLists = new ArrayList<Option>();
    ArrayList<Option> committeeForwardList = new ArrayList<Option>();
    ArrayList<Option> penaltyTypesListOption = penaltyRegistrationManager.getPenaltyTypesOption();//
    ArrayList<Option> summaryList = eyeWitnessManager.getEyeWitnessSummaryTypes();
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    ArrayList<RequestHistoryModel> decisionsMadeOnRequest = new ArrayList<RequestHistoryModel>();
    ArrayList<CommeeteeCommentsGiven> comeeteeCommentsGive = new ArrayList<CommeeteeCommentsGiven>();
    public String IMMEDIATEBOSS = DisciplineRequestManager.REQUERSTER_TYPE_IMMEDIATEBOSS;
    public String ANOTHEREMPLOYEE = DisciplineRequestManager.REQUERSTER_TYPE_ANOTHEREMPLOYEE;
    public String NOTEMPLOYEE = DisciplineRequestManager.REQUERSTER_TYPE_NOTEMPLOYEE;
    int disciplineProblemId;// DISCIPLINE_PROBLEM_ID
    int disciplineProcessedId;
    public double salary;
    public int duration = 0;
    public int penaliyedDays = 0;
    String newPenalityProposed = null;//This is the penality that the approver propose for the discipline committee
    String requesterType = null;//REQUESTER_TYPE
    String requesterId = null;    //REQUESTER_ID
    String offenderId = null;//OFFENDER_ID always employee
    String dateOfOffence = null;//DATE_OF_OFFENCE//when does it happen
    String reportedDate = null;//REPORTED_DATE//reported to the hrms about the discipline Problem
    String offenceType = null;// OFFENCE_TYPE,//if it is registerd in the table HR_DISCIPLINE_TYPE, ELSE "Other"
    int repititionOfOffence = -1;//REPITITION_OF_OFFENCE//how many times does it occured before the phase out time
    String descriptionOfOffence = null;//DESCRIPTION_OF_OFFENCE//details
    String approverGivenCommeents = null;//This is the Approval given Commeents
    String requestedMeasureToBeTaken = null;//REQUESTED_MEASURE_TO_BE_TAKEN
    String currentStatus = null;//STATUS
    // String reportddate=null;
    String isDocumentAttached = null;//IS_DOCUMENT_ATTACHED
    String agreeOnDefaultPenalty = null;
    String expectedPenalty;
    int deciderCommitteeId;

    private boolean populateRequesterTextComponents(String employeeId) {
        HashMap empInfoHashMap = employeeManager.readEmployeeBasicInfo(employeeId);
        if (empInfoHashMap != null) {
            if (empInfoHashMap.get("employeeId").toString().equals("")) {//if no resultset found
                showSuccessOrFailureMessage(false, "NO EMPLOYEE FOUND WITH ID : " + employeeId);
                return false;
            } else {
                requesterId = empInfoHashMap.get("employeeId").toString();
                txtRequesterDepartment.setValue(empInfoHashMap.get("employeeDepartmentName"));
                txtRequesterFullName.setValue(empInfoHashMap.get("employeeFullName"));
                txtRequesterId.setValue(employeeId);
                txtRequesterPosition.setValue(empInfoHashMap.get("employeePosition"));
                return true;
            }
        } else {
            showSuccessOrFailureMessage(false, "EXCEPTION OCCURED");
            return false;
        }
    }

    private boolean populateEmployeeTextComponents(String employeeId) {
        HashMap empInfoHashMap = employeeManager.readEmployeeBasicInfo(employeeId);
        if (empInfoHashMap != null) {
            if (empInfoHashMap.get("employeeId").toString().equals("")) {//if no resultset found
                showSuccessOrFailureMessage(false, "NO EMPLOYEE FOUND WITH ID : " + employeeId);
                return false;
            } else {
                requesterId = empInfoHashMap.get("employeeId").toString();
                txtEmployeeDepartment.setValue(empInfoHashMap.get("employeeDepartmentName"));
                txtEmployeeFullName.setValue(empInfoHashMap.get("employeeFullName"));
                txtEmployeeId.setValue(employeeId);
                txtEmployeePosition.setValue(empInfoHashMap.get("employeePosition"));
                return true;
            }
        } else {
            showSuccessOrFailureMessage(false, "EXCEPTION OCCURED");
            return false;
        }
    }

    private void fillExpectedPenalty(int requestId, String offenceType, int repititionOfOffence, String currentStatus) {
        System.out.println("fillExpectedPenalty : " + offenceType + "\nrepititionOfOffence : " + repititionOfOffence);

        String penaltyAttributes[] = penaltyRegistrationManager.getPenaltyOfOffence(offenceType, repititionOfOffence).split(":::");
        txtaPenalityShouldBeGivenForThisOffence.setValue(penaltyAttributes[1]);
        if (currentStatus.equals(DisciplineApproveManager.INITIAL_STATE_DISCIPLINE)) {
            drlNewPenalty.setValue(penaltyAttributes[0]);
        } else {
            drlNewPenalty.setValue(disciplineApproveManager.getNewPenaltyProposedOnRequest(1));
        }
    }

    private boolean populateDisciplineTextComponents(DisciplineRequestModel disciplineRequestModel) {
        repititionOfOffence = disciplineRequestModel.getRepititionOfOffence() + 1;
        txtDisciplineDate.setValue(disciplineRequestModel.getDateOfOffence());
        txtReportedDate.setValue(disciplineRequestModel.getReportedDate());//reset date
        txtaDisciplineDescription.setValue(disciplineRequestModel.getDescriptionOfOffence());
        txtaDisciplineDecisionTobeTaken.setValue(disciplineRequestModel.getRequestedMeasureToBeTaken());
        txtaPenalityShouldBeGivenForThisOffence.setValue(disciplineRequestModel.getExpectedPenalityToBeGiven());
        txt_DeductAmount.setValue(disciplineRequestModel.getDeductAmount());
        txt_Duration.setValue(disciplineRequestModel.getDeductionDuration() + " " + "Month");
        txtDisciplinePreviousOccurance.setValue(repititionOfOffence);
        txtDocReferenceNumber.setValue(disciplineRequestModel.getDocumentReferenceNumber());
        currentStatus = disciplineRequestModel.getStatus();
        offenceType = disciplineRequestModel.getOffenceType();
        setSelectedDisciplineType(offenceType);

        //fillExpectedPenalty(disciplineRequestModel.getDisciplineProblemId(), offenceType, repititionOfOffence, currentStatus);
        return true;
    }

    public boolean setSelectedDisciplineType(String disciplineType) {
        for (Option lookingFor : disciplineTypesList) {
            if (lookingFor.getValue().toString().startsWith(disciplineType)) {
                drlDisciplineType.setValue(lookingFor.getValue().toString());
                return true;
            }
        }
        return false;
    }

    public boolean setSelectedPenaltyType(String penaltyType) {
        for (Option lookingFor : penaltyTypesListOption) {
            if (lookingFor.getValue().toString().startsWith(penaltyType)) {
                drlNewPenalty.setValue(lookingFor.getValue().toString());
                return true;
            }
        }
        return false;
    }

    private void populateDecisionHistory(int requestId) {
        decisionsMadeOnRequest = disciplineApproveManager.getRequestHistory(requestId);
        if (decisionsMadeOnRequest.size() > 0) {
            cmdLinkViewPreviesDecisions.setRendered(true);
        } else {
            cmdLinkViewPreviesDecisions.setRendered(false);
        // makePageReadyForUpdate();
        }
    }

    private void populateComeeteeComeents(int diciplineId) {

        comeeteeCommentsGive = disciplineApproveManager.getCommiteeComentes(diciplineId);

        if (comeeteeCommentsGive.size() > 0) {
            cmdview_Committee_Comments.setRendered(true);
            cmdLinkConfirmCommitteeDecisions.setDisabled(true);

        } else {
            cmdview_Committee_Comments.setRendered(false);
        }

    }

    private void disablecommentspopoUp() {
        employeeID_textField.setDisabled(true);
        employeeName_textField.setDisabled(true);
        responsiblity_textArea.setDisabled(true);
        txt_CommeentsGivenDay.setDisabled(true);
    }

    private void clearRequesterTextComponents() {
        txtRequesterId.setValue(null);
        txtRequesterDepartment.setValue(null);
        txtRequesterFullName.setValue(null);
        txtRequesterPosition.setValue(null);
        txtRequesterId.setDisabled(true);
        requesterId = null;
    }

    private void clearDisciplineTextComponents() {
        txtDocReferenceNumber.setValue(null);
        txtDisciplineDate.setValue(null);
        txtaDisciplineDescription.setValue(null);
        txtaDisciplineDecisionTobeTaken.setValue(null);
        txtReportedDate.setValue(dateFormat.format(new Date()));//reset date
        txtDisciplinePreviousOccurance.setValue(null);
        drlDisciplineType.resetValue();
    }

    private void clearDecisionComponents() {
        txtaDecisionExplanation.setValue(null);
        drlDecision.resetValue();
        radioGroupAgreeOnDefaultPenalty.resetValue();
        drlCommittee.resetValue();
        ckbForwardToCommittee.setSelected(false);
    }

    private void clearEmployeeTextComponents() {
        txtEmployeeId.setValue(null);
        txtEmployeeDepartment.setValue(null);
        txtEmployeeFullName.setValue(null);
        txtEmployeePosition.setValue(null);
    }

    private void clearAllComponents() {

        clearDisciplineTextComponents();
        clearRequesterTextComponents();
        clearEmployeeTextComponents();
        selectedObjectPending.setSelectedObject(null);
        pendingRequestLists = disciplineApproveManager.getRequestsToBeProcessed();
    //  pendingRequestLists = disciplineRequestManager.getPendingRequests();
    }

    private void disableDiscionComponents() {
//       radioGroupAgreeOnDefaultPenalty.setDisabled(true);
//       txtaDecisionExplanation.setDisabled(true);
//       drlDecision.setDisabled(true);
//       ckbForwardToCommittee.setDisabled(true);
//       btnPostDecision.setDisabled(true);
//       drlCommittee.setDisabled(true);
//       drlNewPenalty.setDisabled(true);
//       ckbForwardToCommittee.setDisabled(true);
    }

    private void disableForWardToCommeeteDiscionComponents() {
        radioGroupAgreeOnDefaultPenalty.setDisabled(true);
        txtaDecisionExplanation.setDisabled(true);
        drlDecision.setDisabled(true);
        ckbForwardToCommittee.setDisabled(true);
        btnPostDecision.setDisabled(true);
        drlCommittee.setDisabled(true);
        drlNewPenalty.setDisabled(true);
        ckbForwardToCommittee.setDisabled(true);
    }

    private void enableDiscionComponents() {
        radioGroupAgreeOnDefaultPenalty.setDisabled(false);
        txtaDecisionExplanation.setDisabled(false);
        drlDecision.setDisabled(false);
        ckbForwardToCommittee.setDisabled(false);
        btnPostDecision.setDisabled(false);
        drlCommittee.setDisabled(false);
        ckbForwardToCommittee.setDisabled(false);
    }

    public String convertPenaltyValueToDescription(String value) {
        String description = "";
        if (value.equals("FAP")) {
            description = "Fully Accepted";
        } else if (value.equals("PAP")) {
            description = "Partially Accepted";
        } else if (value.equals("DAP")) {
            description = "Dont Accepted";
        }
        return description;
    }

    public String convertAccusationValueToDescription(String value) {
        String description = "";
        if (value.equals("FAA")) {
            description = "Fully Accepted";
        } else if (value.equals("PAA")) {
            description = "Partially Accepted";
        } else if (value.equals("DAA")) {
            description = "Dont Accepted";
        }
        return description;
    }

    private void populateAccusedComment(ArrayList<AccusedDefenceModel> accusedDefenceModelList) {
        if (accusedDefenceModelList.size() > 0) {//if comment posted, display it
            AccusedDefenceModel currentComment = accusedDefenceModelList.get(0);
            txtaPenaltyAcceptance.setValue(currentComment.getDescriptionOfAccusation().toString());
            txtaAccusationAcceptance.setValue(currentComment.getDescriptionOfPenalty().toString());
            lblAccusationAcceptanceValue.setValue(convertAccusationValueToDescription(currentComment.getAcceptAccusation().toString()));
            lblPenaltyAcceptanceValue.setValue(convertPenaltyValueToDescription(currentComment.getAcceptPenalty().toString()));
        }
    }

    private void populateAllComponents(DisciplineRequestModel disciplineRequestModel) {
        populateRequesterTextComponents(disciplineRequestModel.getRequesterId());
        populateEmployeeTextComponents(disciplineRequestModel.getOffenderId());
        populateDisciplineTextComponents(disciplineRequestModel);
        populateDecisionHistory(disciplineRequestModel.getDisciplineProblemId());
        populateComeeteeComeents(disciplineRequestModel.getDisciplineProblemId());
    }

    private boolean validateDecision() {
        if (txtaDecisionExplanation.getValue() == null) {
            showSuccessOrFailureMessage(false, "GIVE COMMENT AND/OR SELECT FIRST");
            return false;
        } else if (ckbForwardToCommittee.isSelected() && drlCommittee.getValue().equals("-1")) {
            showSuccessOrFailureMessage(false, "SELECT COMMITTEE");
            return false;
        } else if ((!ckbForwardToCommittee.isSelected()) && drlDecision.getValue().equals("-1")) {
            showSuccessOrFailureMessage(false, "SELECT DECISION");
            return false;
        }
        //  else if (agreeOnDefaultPenalty == null) {
//            showSuccessOrFailureMessage(false, "SELECT YOUR AGREEMENT ON DEFAULT PENALTY");
//            return false;
//           } else if (drlNewPenalty.getValue().toString().equals("-1")) {
//                showSuccessOrFailureMessage(false, "SELECT NEW PENALTY ");
//                  return false;
//        }

        return true;
    }

    public String btnPostDecision_action() {
        if (validateDecision()) {
            String decision = "";
            if (ckbForwardToCommittee.isSelected()) {
                decision = drlCommittee.getValue().toString() + "$$" + currentStatus;
            } else {
                decision = drlDecision.getValue().toString();
            }
            int newPenalty = Integer.parseInt(drlNewPenalty.getValue().toString());
            if (decision.equals(DisciplineApproveManager.DISCIPLINE_DECISION_APPROVE) && cmdLinkConfirmCommitteeDecisions.isRendered()) {
                showSuccessOrFailureMessage(true, "AS COMMITTEE, YOU CAN ONLY FORWARD YOUR DECISION! YOU CAN NOT APPROVE");
            } //            else if (disciplineApproveManager.saveDecision(disciplineProblemId, loggedInEmployeeId, txtaDecisionExplanation.getValue().toString(), decision, newPenalty, currentStatus, agreeOnDefaultPenalty)) {
            //               // disciplineApproveManager.clearOnPending(disciplineProblemId);
            //                showSuccessOrFailureMessage(true, "DECISION POSTED SUCCESSFULLY");
            //                clearAllComponents();
            //                pendingRequestLists = disciplineApproveManager.getRequestsToBeProcessed();
            //            //pendingRequestLists = disciplineRequestManager.getPendingRequests();
            //            }
            else {
                showSuccessOrFailureMessage(false, "!SORRY POSTING DECISION FAILED");
            }
        }
        return null;
    }

    public String txtDeligateeId_action() {
        //return null means stay on the same page
        return null;
    }

    public String btnReset_action() {
        clearAllComponents();
        btnPostDecision.setDisabled(true);
        return null;
    }

    public void showSuccessOrFailureMessage(boolean success, String messageToDisplay, String fadeTime) {
        lblSuccessOrErrorMessage.setStyle(success ? "color: green; font-size: 12px; font-weight: bold;text-align: center; vertical-align: middle" : "color: red; font-size: 12px; font-weight: bold;text-align: center; vertical-align: middle");
        lblSuccessOrErrorMessage.setValue(messageToDisplay);
        commenteslblSuccessOrErrorMessage.setValue(messageToDisplay);
        lblSuccessOrErrorMessage.setVisible(true);
        pnlPopupSuccessOrFailure.setAutoCentre(true);
        pnlPopupSuccessOrFailure.setRendered(true);
        panelPopupMessageForCommeteComentes.setRendered(true);
        String val = "message";
        //  String fadeTime = (success ? "3000" : "8000");
        String javaScriptText = "$j(document).ready(function(){ $j('." + val + "').show();" +
                " $j('." + val + "').fadeOut(" + fadeTime + ");" + "});";
        JavascriptContext.addJavascriptCall(FacesContext.getCurrentInstance(), javaScriptText);
    }

    public void showSuccessOrFailureMessage(boolean success, String messageToDisplay) {
        String fadeTime = (success ? "5000" : "9000");
        showSuccessOrFailureMessage(success, messageToDisplay, fadeTime);
    }

    public ArrayList<CommeeteeCommentsGiven> getComeeteeCommentsGive() {
        return comeeteeCommentsGive;
    }

    public void setComeeteeCommentsGive(ArrayList<CommeeteeCommentsGiven> comeeteeCommentsGive) {
        this.comeeteeCommentsGive = comeeteeCommentsGive;
    }

    public int get__placeholder() {
        return __placeholder;
    }

    public void set__placeholder(int __placeholder) {
        this.__placeholder = __placeholder;
    }

    public ArrayList<Option> getCommitteeForwardList() {
        return committeeForwardList;
    }

    public void setCommitteeForwardList(ArrayList<Option> committeeForwardList) {
        this.committeeForwardList = committeeForwardList;
    }

    public int getDisciplineProcessedId() {
        return disciplineProcessedId;
    }

    public void setDisciplineProcessedId(int disciplineProcessedId) {
        this.disciplineProcessedId = disciplineProcessedId;
    }

    public String getNewPenalityProposed() {
        return newPenalityProposed;
    }

    public void setNewPenalityProposed(String newPenalityProposed) {
        this.newPenalityProposed = newPenalityProposed;
    }

//    public ArrayList<CommtteeComments> getCommitteeCommentes() {
//        return committeeCommentes;
//    }
//
//    public void setCommitteeCommentes(ArrayList<CommtteeComments> CommitteeCommentes) {
//        this.committeeCommentes = CommitteeCommentes;
//    }
    public String getDisciplinedEmployeeId() {
        return disciplinedEmployeeId;
    }

    public void setDisciplinedEmployeeId(String disciplinedEmployeeId) {
        this.disciplinedEmployeeId = disciplinedEmployeeId;
    }

    public EmployeeManage getEmployeeManager() {
        return employeeManager;
    }

    public void setEmployeeManager(EmployeeManage employeeManager) {
        this.employeeManager = employeeManager;
    }

    public HtmlOutputLabel getLblSuccessOrErrorMessage() {
        return lblSuccessOrErrorMessage;
    }

    public void setLblSuccessOrErrorMessage(HtmlOutputLabel lblSuccessOrErrorMessage) {
        this.lblSuccessOrErrorMessage = lblSuccessOrErrorMessage;
    }

    public String getLoggedInEmployeeId() {
        return loggedInEmployeeId;
    }

    public void setLoggedInEmployeeId(String loggedInEmployeeId) {
        this.loggedInEmployeeId = loggedInEmployeeId;
    }

    public HtmlPanelGroup getPanelGroupMessage() {
        return panelGroupMessage;
    }

    public ArrayList<RequestHistoryModel> getDecisionsMadeOnRequest() {
        return decisionsMadeOnRequest;
    }

    public void setDecisionsMadeOnRequest(ArrayList<RequestHistoryModel> decisionsMadeOnRequest) {
        this.decisionsMadeOnRequest = decisionsMadeOnRequest;
    }

    public String getLoggedInEmployeeDept() {
        return loggedInEmployeeDept;
    }

    public void setLoggedInEmployeeDept(String loggedInEmployeeDept) {
        this.loggedInEmployeeDept = loggedInEmployeeDept;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }
    private HtmlDataTable dataTable = new HtmlDataTable();

    public HtmlDataTable getDataTable() {
        return dataTable;
    }

    public void setDataTable(HtmlDataTable dataTable) {
        this.dataTable = dataTable;
    }

    public void setPanelGroupMessage(HtmlPanelGroup panelGroupMessage) {
        this.panelGroupMessage = panelGroupMessage;
    }

    public PanelLayout getPnlMessageBody() {
        return pnlMessageBody;
    }

    public void setPnlMessageBody(PanelLayout pnlMessageBody) {
        this.pnlMessageBody = pnlMessageBody;
    }

    public String getRequesterId() {
        return requesterId;
    }
    private PanelPopup pnlPopupViewPrevieousDecisions = new PanelPopup();

    public PanelPopup getPnlPopupViewPrevieousDecisions() {
        return pnlPopupViewPrevieousDecisions;
    }

    public void setPnlPopupViewPrevieousDecisions(PanelPopup pnlPopupViewPrevieousDecisions) {
        this.pnlPopupViewPrevieousDecisions = pnlPopupViewPrevieousDecisions;
    }

    public void setRequesterId(String requesterId) {
        this.requesterId = requesterId;
    }

    public ArrayList<Option> getPendingRequestLists() {
        return pendingRequestLists;
    }

    public void setPendingRequestLists(ArrayList<Option> pendingRequestLists) {
        this.pendingRequestLists = pendingRequestLists;
    }

    public DisciplineRequestManager getDisciplineRequestManager() {
        return disciplineRequestManager;
    }

    public ArrayList<Option> getDecisionMadeByEmployeeLists() {
        return decisionMadeByEmployeeLists;
    }

    public void setDecisionMadeByEmployeeLists(ArrayList<Option> decisionMadeByEmployeeLists) {
        this.decisionMadeByEmployeeLists = decisionMadeByEmployeeLists;
    }

    public void setDisciplineRequestManager(DisciplineRequestManager disciplineRequestManager) {
        this.disciplineRequestManager = disciplineRequestManager;
    }

    public String getApproverGivenCommeents() {
        return approverGivenCommeents;
    }

    public void setApproverGivenCommeents(String approverGivenCommeents) {
        this.approverGivenCommeents = approverGivenCommeents;
    }

    public String getANOTHEREMPLOYEE() {
        return ANOTHEREMPLOYEE;
    }

    public void setANOTHEREMPLOYEE(String ANOTHEREMPLOYEE) {
        this.ANOTHEREMPLOYEE = ANOTHEREMPLOYEE;
    }

    public String getIMMEDIATEBOSS() {
        return IMMEDIATEBOSS;
    }

    public void setIMMEDIATEBOSS(String IMMEDIATEBOSS) {
        this.IMMEDIATEBOSS = IMMEDIATEBOSS;
    }

    public String getNOTEMPLOYEE() {
        return NOTEMPLOYEE;
    }

    public void setNOTEMPLOYEE(String NOTEMPLOYEE) {
        this.NOTEMPLOYEE = NOTEMPLOYEE;
    }

    public ArrayList<SelectItem> getCommitteeLists() {
        return committeeLists;
    }

    public void setCommitteeLists(ArrayList<SelectItem> committeeLists) {
        this.committeeLists = committeeLists;
    }

    public ArrayList<Option> getAvailableDecisionsToMake() {
        return availableDecisionsToMake;
    }

    public void setAvailableDecisionsToMake(ArrayList<Option> availableDecisionsToMake) {
        this.availableDecisionsToMake = availableDecisionsToMake;
    }

    public DisciplineRequestModel getDisciplineRequestModel() {
        return disciplineRequestModel;
    }

    public void setDisciplineRequestModel(DisciplineRequestModel disciplineRequestModel) {
        this.disciplineRequestModel = disciplineRequestModel;
    }

    public ArrayList<Option> getDisciplineTypesList() {
        return disciplineTypesList;
    }

    public void setDisciplineTypesList(ArrayList<Option> disciplineTypesList) {
        this.disciplineTypesList = disciplineTypesList;
    }

    public String btnSaveOrUpdate_action() {

        return null;
    }

    public String btnClosePopupAllCommittedOffences_action() {
        pnlPopupAllCommittedOffences.setRendered(false);
        return null;
    }
    public String btnClosePopupChairMan_action() {
        panelPopup_CommeeteChairMan.setRendered(false);
        return null;
    }

    public void makePageReadyForDecision() {
        drlCommittee.setRendered(false);
        lblCommittee.setRendered(false);
        drlDecision.setRendered(true);
        lbDecision.setRendered(true);
        lnkToAccusedCommentPage.setRendered(false);
        lnkViewAccusedComment.setRendered(true);
        availableDecisionsToMake = disciplineApproveManager.getAvailableDecisionsToMake(currentStatus);
        makePageReadyForSave();
    }

    private void makePageReadyToForwardToCommitte() {
        drlCommittee.setRendered(true);
        lblCommittee.setRendered(true);
        drlDecision.setRendered(false);
        lbDecision.setRendered(false);
        makePageReadyForSave();
    }

    private void makePageReadyForSave() {
        btnPostDecision.setRendered(true);
        btnPostDecision.setDisabled(false);
        ckbForwardToCommittee.setDisabled(false);
        drlDecision.setDisabled(false);
        radioGroupAgreeOnDefaultPenalty.setDisabled(false);
        txtaDecisionExplanation.setDisabled(false);
        pnlLayoutDecisoion.setRendered(true);

    }

    private void makePageReadyForNavigationToAccusedComment() {
        disableDiscionComponents();
        lnkToAccusedCommentPage.setRendered(true);
        lnkViewAccusedComment.setRendered(false);
        btnPostDecision.setDisabled(true);
        lblAccusationAcceptanceValue.setValue("");
        lblPenaltyAcceptanceValue.setValue("");
    }

    public void makePageReadyForView() {
        lnkToAccusedCommentPage.setRendered(true);
        lnkViewAccusedComment.setRendered(false);
        btnPostDecision.setRendered(false);
        ckbForwardToCommittee.setDisabled(true);
    }

    private void renderPreviosDescisionLink(String currentStatus) {
        if (!currentStatus.equals(DisciplineApproveManager.INITIAL_STATE_DISCIPLINE)) {
            populateDecisionHistoryTable(disciplineProblemId);
            cmdLinkViewPreviesDecisions.setRendered(true);
        } else {
            cmdLinkViewPreviesDecisions.setRendered(false);
        }
    }

    private void renderCommeeteComentesLink() {

        populateComeeteeComeents(disciplineProblemId);

    }

    private void renderCommitteeLink(int requestId, String currentStatus) {
        deciderCommitteeId = disciplineApproveManager.getForwardedToCommittee(requestId, currentStatus);
        if (deciderCommitteeId != -1) {//if forwareded to committee

            cmdLinkConfirmCommitteeDecisions.setRendered(true);
        } else {
            enableDiscionComponents();
            cmdLinkConfirmCommitteeDecisions.setRendered(false);
        }
    }

    private void renderAccusedCommentLink(int disciplineProblemId) {
        ArrayList<AccusedDefenceModel> accusedDefenceModelList = accusedDefenceManager.getDisciplineIssuedFromRequestId(disciplineProblemId);
        if (accusedDefenceModelList == null) {
        } else if (accusedDefenceModelList.size() > 0) {
            populateAccusedComment(accusedDefenceModelList);
            availableDecisionsToMake = disciplineApproveManager.getAvailableDecisionsToMake(disciplineProblemId, currentStatus);
            makePageReadyForSave();
            btnPostDecision.setDisabled(false);
            lnkToAccusedCommentPage.setRendered(false);
            lnkViewAccusedComment.setRendered(true);
        } else {//no comment psoted yet
            makePageReadyForNavigationToAccusedComment();
        }
    }

    public void selectPending_processValueChange(ValueChangeEvent vce) {

        if (vce != null) {
            String[] requestInfos = vce.getNewValue().toString().split("--");
            disciplineProblemId = Integer.parseInt(requestInfos[0]);//
            requesterId = requestInfos[1];
            currentStatus = requestInfos[2];

            // disciplineRequestModel = disciplineRequestManager.getDisciplineIssued(disciplineProblemId);
            populateAllComponents(disciplineRequestModel);
            clearDecisionComponents();
            renderPreviosDescisionLink(currentStatus);
            renderCommitteeLink(disciplineProblemId, currentStatus);
            renderAccusedCommentLink(disciplineProblemId);

        } else {
            showSuccessOrFailureMessage(false, "THE REPORTED DISCIPLINE PROBLEM IS OUT OF 30 DAYS /n YOU CAN’T PROCESS ");
        }


    }

    public void selectHistory_processValueChange(ValueChangeEvent vce) {
        String decisionAttributs[] = vce.getNewValue().toString().split("--");
        disciplineProblemId =
                Integer.parseInt(decisionAttributs[1]);
        txtaDecisionExplanation.setValue(decisionAttributs[2]);
        offenceType = decisionAttributs[6];
        offenderId = decisionAttributs[7];
        drlDecision.setValue(decisionAttributs[2]);
        txtaDecisionExplanation.setDisabled(true);
        //  disciplineRequestModel = disciplineRequestManager.getDisciplineIssued(disciplineProblemId);
        populateAllComponents(disciplineRequestModel);
        drlDecision.setDisabled(true);
        // ckbForwardToCommittee.setDisabled(true);
        btnPostDecision.setDisabled(true);
        drlNewPenalty.setDisabled(false);
        int displineId = Integer.parseInt(decisionAttributs[0]);//
        int requestId = Integer.parseInt(decisionAttributs[5]);
        String stat = decisionAttributs[4];//
        renderCommitteeLink(requestId, stat);
    }

    public String lnkDisciplineTypesRegistrationPage_action() {
        return "DisciplineTypes";
    }

    public String lnkDisciplineRequestPage_action() {
        return "DisciplineRequest";
    }

    public String lnkToAccusedCommentPage_action() {
        AccusedDefencePage offenderDefencePage = new AccusedDefencePage();
        offenderDefencePage.setUserName(userName);
        offenderDefencePage.setDisciplineProblemId(disciplineProblemId);
        //offenderDefencePage.populateAllComponents(offenceType, disciplineProblemId);
        return "AccusedDefence";
    }

    public String cmdLinkViewAllOffences_action() {
        allCommittedOffencesOfEmployee = disciplineRequestManager.getComittedOffencesOfEmployee(txtEmployeeId.getValue().toString());
        pnlPopupAllCommittedOffences.setRendered(true);
        return null;
    }

    public String cmdLinkViewPreviesDecisions_action() {
        pnlPopupViewPrevieousDecisions.setRendered(true);
        return null;
    }

    public String btnCloseViewPreviesDecisions_action() {
        pnlPopupViewPrevieousDecisions.setRendered(false);
        drlDecision.setDisabled(false);
        return null;
    }

    private boolean populateDecisionHistoryTable(int leaveRequestId) {
        decisionsMadeOnRequest = disciplineApproveManager.getRequestHistory(leaveRequestId);
        return true;
    }

    private boolean populateComeeteeComentesTable(int DisplineRequestId) {
        comeeteeCommentsGive = disciplineApproveManager.getCommiteeComentes(DisplineRequestId);
        return true;
    }

    public void radioGroupAgreeOnDefaultPenalty_processValueChange(ValueChangeEvent vce) {
        if (vce.getNewValue().toString().equals("Fair")) {

            drlNewPenalty.setDisabled(true);
            ckbForwardToCommittee.setDisabled(true);
            this.makePageReadyForDecision();
        } else if (vce.getNewValue().toString().equals("Exagurated") && drlNewPenalty.getValue().toString() == null) {
            showSuccessOrFailureMessage(false, "SELECT YOUR OTHER PENALITY");
            drlNewPenalty.setDisabled(false);
        } else if (vce.getNewValue().toString().equals("TooSmall") && drlNewPenalty.getValue().toString() == null) {
            showSuccessOrFailureMessage(false, "SELECT YOUR OTHER PENALITY");
            drlNewPenalty.setDisabled(false);
        } else {
            drlNewPenalty.setDisabled(false);
        }

        agreeOnDefaultPenalty = vce.getNewValue().toString();
    }

    public void ckbForwardToCommittee_processValueChange(ValueChangeEvent vce) {
        if (ckbForwardToCommittee.isSelected()) {
            makePageReadyToForwardToCommitte();
        } else {
            makePageReadyForDecision();
        }

    }

    public String cmdLinkConfirmCommitteeDecisions_action() {

        committeeMembersList = committeeMemberRegistrationManager.getAllCommitteeMembers(deciderCommitteeId);
        System.out.print("deciderCommitteeId ::: " + deciderCommitteeId);
        lblSignInReminder.setValue("Sign in using your username");
        pnlPopupCommitteeMembers.setRendered(true);
        return null;
    }
    String savedStatus = "Done";
    int flage = 0;

    public String btnPopupForColumnMemberLogIn_action() {
        try {
            if (selectedCommitteeMemberRow != -1) {
                String memberEmployeeId = committeeMembersList.get(selectedCommitteeMemberRow).getEmployeeId();
                String memberUserName = committeeMembersList.get(selectedCommitteeMemberRow).getUserName();
                String memberPassWord = committeeMembersList.get(selectedCommitteeMemberRow).getPassWord();
                String memberComentes = committeeMembersList.get(selectedCommitteeMemberRow).getCommeentesGiven();
                String memberFullName = committeeMembersList.get(selectedCommitteeMemberRow).getEmployeeFullName();
                String memberResponsiblity = committeeMembersList.get(selectedCommitteeMemberRow).getResponsiblity();
                String commentgivenDay =committeeMembersList.get(selectedCommitteeMemberRow).getCommeentGivenDay();

                String suggestedPenality=committeeMembersList.get(selectedCommitteeMemberRow).getSuggestedPenality();
                int diciplineProblemId = disciplineProblemId;
                int counter = committeeMembersList.size();

                String status = "New";


                if (siteSecurityManager.isValidUser(memberUserName, memberPassWord, memberEmployeeId)) {
                    flage++;

                    disciplineApproveManager.NewSaveCommitteeComeentes(memberEmployeeId, memberFullName, memberResponsiblity, memberComentes, diciplineProblemId, memberUserName, memberPassWord, status, savedStatus, commentgivenDay,suggestedPenality);


                    //  disciplineApproveManager.NewSaveCommitteeComeentes(memberEmployeeId, memberFullName, memberResponsiblity, memberComentes,diciplineProblemId, memberUserName, memberPassWord, status,savedStatus);


                    showSuccessOrFailureMessage(true, "YOUR COMMEENTES SAVING SUCCESSFULL");
                    password_secretField.resetValue();
                    userName_textField.resetValue();

                    committeeMembersList.get(selectedCommitteeMemberRow).getUserName().replaceAll(committeeMembersList.get(selectedCommitteeMemberRow).getUserName(), "");

                    committeeMembersList.get(selectedCommitteeMemberRow).setLogInConfirmed("Confirmed");

                } else {

                    showSuccessOrFailureMessage(false, "ERROR OCCURES WHILE YOU SAVING YOUR COMMENTES ");

                    committeeMembersList.get(selectedCommitteeMemberRow).setLogInConfirmed("Invalid");

                }

            }
//                  JOptionPane.showMessageDialog(null,  flage);

        } catch (NullPointerException npe) {
        }
        return null;
    }

    public String lnkViewAccusedComment_action() {
        pnlPopupViewAccusedComment.setRendered(true);
        return null;
    }

    public String lnkViewEyeWitnessComment_action() {
        if (disciplineProblemId != -1) {
            eyeWitnessesList = eyeWitnessManager.getEyeWitnessesList(disciplineProblemId);
            pnlEyeWitnessesRegistration.setRendered(true);
        }

        return null;
    }

    public String btnClosePopupEyeWitnesses_action() {
        pnlEyeWitnessesRegistration.setRendered(false);
        return null;
    }
    int selectedCommitteeMemberRow = -1;
    int selectedCommitteeCommentesRow = -1;

    public void rowSelectorCommitteeMember_processMyEvent(RowSelectorEvent rse) {
        selectedCommitteeMemberRow = rse.getRow();
    }

    public boolean isEnoughCommitteeNumbersSigned() {
        int counterCheck = 0;
        int totalSize = committeeMembersList.size();
        for (CommitteeMemberModel current : committeeMembersList) {
            if (current.getLogInConfirmed() != null && current.getLogInConfirmed().equals("Confirmed")) {
                counterCheck++;
            }

        }

        if ((counterCheck == 0) || (totalSize / counterCheck >= 2)) {//less than or equal to 50% confirmed
            lblSignInReminder.setValue("Note: It can not be approved now." +
                    " Only " + counterCheck + " out of " + totalSize + " confirmed. ");
            cmdLnkClosePopupCommitteeMembers.setRendered(true);
            return false;
        } else {//if more than 50% confirmed
            lblSignInReminder.setValue("Note: Greater than 50% approved." +
                    " Only " + counterCheck + " out of " + totalSize + " confirmed. ");
            enableDiscionComponents();

            return true;
        }

    }

    public String btnClosePopupCommitteeMembers_action() {
        if (isEnoughCommitteeNumbersSigned()) {
            pnlPopupCommitteeMembers.setRendered(false);
            pnlPopupSuccessOrFailure.setRendered(false);
        }

        return null;
    }

    public String cmdLnkClosePopupCommitteeMembers_action() {
        cmdLnkClosePopupCommitteeMembers.setRendered(false);
        pnlPopupCommitteeMembers.setRendered(false);
        pnlPopupSuccessOrFailure.setRendered(false);
        return null;
    }
// <editor-fold defaultstate="collapsed" desc="Links">

    public String lnkDisciplineRequest_action() {
        return "DisciplineIssue";
    }

    public String lnkDisciplineApprove_action() {
        return "DisciplineApprove";
    }

    public String lnkAccusedDefence_action() {
        return "AccusedDefence";
    }

    public String lnkEyeWitness_action() {
        return "EyeWitness";
    }

    public String lnkCommitteeMembers_action() {
        return "CommitteeMembers";
    }

    public String lnkDisciplinePenalty_action() {
        return "PenaltyTypes";
    }

    public String lnkCommittee_action() {
        return "Committeee";
    }

    public String btnDisciplinePenalty_action() {
        return "DisciplinePenalty";
    }

    public String btnPenaltyType_action() {
        return "PenaltyTypes";
    }

    public String getSavedStatus() {
        return savedStatus;
    }

    public void setSavedStatus(String savedStatus) {
        this.savedStatus = savedStatus;
    }

    /*selection listener is used when a row is selected on the data table component
     *@param e RowSelectorEvent */
    public int selectedIndex;

    public void rowSelector1_processAction(RowSelectorEvent rse) {
        int selectedRowIndex = rse.getRow();
        selectedIndex =
                selectedRowIndex;
    }

    public String commentsbtnClosePopupSuccessOrFailure_action() {

        panelPopupMessageForCommeteComentes.setRendered(false);
        return null;
    }

    public String LoginButton_action() {

        return null;
    }

    public void btnClosePopupCommeeteComeentes_processAction(ActionEvent ae) {
        pnlPopupComeeteeComenets.setRendered(false);
    }

    public String cmdview_Committee_Comments_action() {

        String currentDay = dateFormat.format(new Date());
        String dbDay =
                disciplineApproveManager.getCommeentsGivenDay(disciplineProblemId);
        if (GregorianCalendarManipulation.calaculateDateDifference(dbDay, currentDay) <= 30) {
            pnlPopupComeeteeComenets.setRendered(true);
            makePageReadyForDecision();

        } else {
            showSuccessOrFailureMessage(false, "COMMITTEE COMMENTS ONLY VALIDE FOR 30 DAYS\n COMMENTS OUT OF DAY");
            comeeteeCommentsGive.clear();
        }

        return null;
    }

    public void selectCommeete_processValueChange(ValueChangeEvent vce) {

        if (vce != null) {
            String[] requestInfos = vce.getNewValue().toString().split("--");
            disciplineProblemId =
                    Integer.parseInt(requestInfos[0]);//
            requesterId =
                    requestInfos[1];
            offenceType = requestInfos[2];
            offenderId = requestInfos[3];
            currentStatus =
                    requestInfos[4];
            approverGivenCommeents = requestInfos[5];
            disciplineProcessedId = Integer.parseInt(requestInfos[6]);
            newPenalityProposed = requestInfos[7];

            salary =
                    disciplineRequestManager.getEmployeeSalary(offenderId);
            disciplineRequestModel =
                    disciplineRequestManager.getDisciplineIssued(offenceType, disciplineProblemId);
            duration =
                    disciplineRequestModel.getDeductionDuration();
            penaliyedDays = Integer.parseInt(disciplineRequestModel.getPenalizedDays());
            if (penaliyedDays == 0) {
                disciplineRequestModel.setDeductAmount(0.0);
            } else {
                double dalySalary = (salary / 26);
                double deduction = (dalySalary * penaliyedDays);
                double lastDeduction = (deduction / duration);
                disciplineRequestModel.setDeductAmount(lastDeduction);
            }

            txtaDecisionExplanation.setValue(requestInfos[5]);
            drlNewPenalty.setValue(newPenalityProposed);
            populateAllComponents(disciplineRequestModel);
            // clearDecisionComponents();
            disableForWardToCommeeteDiscionComponents();

            renderPreviosDescisionLink(currentStatus);
            renderCommitteeLink(disciplineProblemId, currentStatus);
            renderAccusedCommentLink(disciplineProblemId);

        }
    }

    public String btn_ChairMan_Post_action() {
        String commentes;
        String savedStaus=null;
        String suggetedPenality;
        String penality =  drl_ChairMan_suggetedPenality.getValue().toString().split("-")[1];
        //JOptionPane.showMessageDialog(null,penality );
        double dedctionAmount;
        String duration;
        commentes=txt_ChairMan_Commentes.getValue().toString();
        suggetedPenality=drl_ChairMan_suggetedPenality.getValue().toString();
        dedctionAmount=Double.parseDouble(txt_ChairMan_deductAmoun.getValue().toString());
        duration=txt_chairMan_Duration.getValue().toString();
       
        if(disciplineApproveManager.SaveChairManCommeents(disciplineProblemId,commentes,suggetedPenality,dedctionAmount,duration,savedStaus)){

                showSuccessOrFailureMessage(true, " YOUR COMMEENTES IS SUCCESSFULY SAVED ");

        }
        else{
                showSuccessOrFailureMessage(false, " SORRY ERROR OCCUR WHILE YOUR SAVING YOUR COMMEENTES ");
           }
        
        //return null means stay on the same page
        return null;
    }

    public void drl_ChairMan_suggetedPenality_processValueChange(ValueChangeEvent vce) {
        String penalityID;
        String []PenalityName=null;
        String penality[] =vce.getNewValue().toString().split(":");
        penalityID=penality[0];
    
        PenalityName[0]=penalityID.split("-")[0];
        String test= PenalityName[0];
        
        JOptionPane.showMessageDialog(null, penalityID+" jhtjtorotjorjto"+test);
    }

   
    // </editor-fold >
}
>>>>>>> .r420
