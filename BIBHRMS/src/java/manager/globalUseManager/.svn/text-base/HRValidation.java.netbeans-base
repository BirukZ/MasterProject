/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package manager.globalUseManager;

/**
 *
 * @author thecode
 */
public class HRValidation {

    public final static int NO_PATTERN = 0;
    public final static int NAME_PATTERN = 1;
    public final static int PHONE_PATTERN = 2;
    public final static int EMAIL_PATTERN = 3;
    public final static int WEBSITE_PATTERN = 4;
    public final static int REMARK_PATTERN = 5;
    public final static int FLOAT_PATTERN = 6;
    public final static int DATE_PATTERN = 7;
    public final static int TEXT_PATTERN = 8;
    public final static int PERCENT_PATTERN = 9;
    public final static int POBOX_PATTERN = 10;
    public final static int HOUSE_NUMBER_PATTERN = 11;
    public final static int TIME_PATTERN = 12;
    public final static int YEAR_PATTERN = 13;
    public final static int FULL_NAME_PATTERN = 14;
    public final static int MONEY_PATTERN = 15;
    public final static int SALARY_PATTERN = 16;
    public final static int NUMBER_PATTERN = 17;
    public final static int DOUBLE_PATTERN = 18;
    public final static int LIST_PATTERN = 19;
    public final static int CNAME_PATTERN = 20;
    public final static int FILE_PATH = 21;
    public final static int INT_FLOTING_NUMBER = 22;
    public final static int GRADE_PATTERN = 23;
    public final static int DATE_PATTERN2 = 24;

    private static boolean isPatternMatch(String data, int pattern) {
        boolean result = false;
        if (data != null) {
            switch (pattern) {
                case DATE_PATTERN://YYYY-MM-DD OR YYYY-MM-DD FORMAT USE BOTH E.C AND G.C
                    result = data.matches("[1-9]{1}[0-9]{3}((\\/)|(-))(((([0]{1}[1-9]{1})|" +
                            "([1]{1}[0-2]{1}))((\\/)|(-))(((([0]{1})|([1-2]{1}))[0-9]{1})|([3]{1}[0])))|" +
                            "([1]{1}[3]{1}((\\/)|(-))(([0]{1})[1-6]{1}|[1-6]{1})))");
                    break;
                case EMAIL_PATTERN:
                    result = data.matches("[a-zA-Z0-9-\\.]+@[a-zA-Z]{2,10}+\\.[a-zA-Z ]" +
                            "{3}+$|^[a-zA-Z0-9-\\.]+@[a-zA-Z]+\\.[a-zA-Z]{2,5}+\\.[a-zA-Z ]{3}");
                    break;
                case FLOAT_PATTERN:
                    result = data.matches("[0-9]{1,10}\\.?[0-9]{0,10}");
                    break;
                case DOUBLE_PATTERN:
                    result = data.matches("[0-9]*\\.[0-9]*|[0-9]*|[0-9]*\\.[0-9]*Ee[0-9]*");
                    break;
                case NAME_PATTERN:
                    result = data.matches("[A-Za-z- ]{3,50}");
                    break;
                case PHONE_PATTERN:
                    result = data.matches("^\\+?251\\-?\\-?[1-9][0-9]{2}\\-?[0-9]{6}|$|" +
                            "^[0][1-9][0-9]{2}\\-?[0-9]{6}|$|" +
                            "^\\+?[0-9]{1,3}\\-?\\-?[0-9]{3}\\-?[0-9]{6}$");
                    break;
                case REMARK_PATTERN:
                    result = data.matches("[a-zA-Z0-9., \\-]{0,200}");
                    break;
                case TEXT_PATTERN:
                    result = data.matches("[a-zA-Z0-9!,\\+\\/ \\.\\-]{0,150}");
                    break;
                case WEBSITE_PATTERN:
                    result = data.matches("^[w]{3}+\\.[a-zA-Z0-9-]+\\.[a-zA-Z]{2,10}+\\.[a-zA-Z ]" +
                            "{2}+$|^[w]{3}+\\.[a-zA-Z0-9-]+\\.[a-zA-Z ]{2,10}+$");
                    break;
                case PERCENT_PATTERN:
                    result = data.matches("(([0])||([1-9]{1}[0-9]?))");
                    break;
                case POBOX_PATTERN:
                    result = data.matches("^[0-9]{1,16}+[a-zA-Z]{1,20}+[0-9 ]+$|^[0-9 ]+$");
                    break;
                case TIME_PATTERN:
                    result = data.matches("^[0-1]?[1-9]:[0-5][0-9]$");
                    break;
                case YEAR_PATTERN:
                    result = data.matches("[0-9]{4}");
                    break;
                case FULL_NAME_PATTERN:
                    result = data.matches("[a-zA-z \\.]{2,50}");
                    break;
                case HOUSE_NUMBER_PATTERN:
                    result = data.matches("[0-9]{1,10}");
                    break;
                case MONEY_PATTERN:
//                    result = data.matches("[0-9]{1,20}\\.?[0-9]{0,10}");
                    result = data.matches("(([0]{1}\\.[0-9]{1,8})||([1-9]{1}[0-9]{0,20}\\.[0-9]{1,8})||([1-9]{1}[0-9]{0,20})||([0]))");
                    break;
                case SALARY_PATTERN:
                    result = data.matches("(([1-9]{1}[0-9]{2,20})||([1-9]{1}[0-9]{2,20}\\.[0]?[0-9]{1,3}))");
                    break;
                case NUMBER_PATTERN:
                    result = data.matches("^[0-9 ]+$");
                    break;
                case LIST_PATTERN:
                    result = data.matches("[A-Za-z,. ]{2,100}");
                    break;
                case CNAME_PATTERN:
                    result = data.matches("[A-Za-z. ]{2,100}");
                    break;
                case FILE_PATH:
                    result = data.matches("([a-zA-Z]:)?(\\\\[a-zA-Z0-9_.-]+)+\\\\?");
                    break;
                case INT_FLOTING_NUMBER:
                    result = data.matches("^\\d{1,5}(\\.\\d{1,2})?$");
                    break;
                case GRADE_PATTERN:
                    result = data.matches("[A-F+-]{1,3}");
                    break;
                case DATE_PATTERN2:
                    result = data.matches("^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$");
                    break;


                default:
                    result = false;
            }
        }
        return result;
    }

    /*
     * this method will validate the data on a given component
     * with the patterns and
     * @returns:
     * 1. 0 the data entered is not null and valid
     * 2. 1 value is null
     * 3. 2 the data entered is not valid
     * */
    public static int validateData(Object data, int pattern, boolean required) {
        int result = 0;
        String value = String.valueOf(data);

        /*
         * select Country --- vendor page
         * data==null --- req pay material code
         * */

        if (value.isEmpty() || data == null) {// this value can't be empty
            if (required == true) {
                result = 1;
            }
        } else if (pattern != NO_PATTERN) {// check for format error
            if (required == true && value.isEmpty()) {
                result = 1;
            } else if (isPatternMatch(value, pattern) == true) { // no format error
                result = 0;
            } else { // format error
                result = 2;
            }
        }
        return result;
    }

    /*
     * this method will validate the data on a given component
     * with the patterns and
     * @returns:
     * 1. 0 the data entered is not null and valid
     * 2. 1 value is null
     * 3. 2 the data entered is not valid
     * */
    public static int validateDataOnly(Object data, int pattern) {
        int result = 0;
        String value = String.valueOf(data);

        /*
         * select Country --- vendor page
         * data==null --- req pay material code
         * */
        if (pattern != NO_PATTERN) {// check for format error
            if (isPatternMatch(value, pattern) == true) { // no format error
                result = 0;
            } else { // format error
                result = 2;
            }
        }
        return result;
    }
    /*
     * this method will validate the data on a given component
     * is null/empty or not
     * @returns:
     * 1. True the data entered is not null/empty
     * 2. false value is null or empty
     * */

    public static boolean validateRequired(Object data) {
        boolean result = true;
        String value = String.valueOf(data);

        /*
         * select Country --- vendor page
         * data==null --- req pay material code
         * */
        if (data == null || value.isEmpty()) {// this value can't be empty
            result = false;
        }
        return result;
    }
public static void main(String arg[]){
    if(HRValidation.isPatternMatch("A++", HRValidation.GRADE_PATTERN)){
        System.out.println("ok");
    }else{
         System.out.println("not");
    }
}
   
}
