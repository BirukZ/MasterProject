<<<<<<< .mine
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package manager.globalUseManager;

import java.text.ParseException;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
/*
 * StringDateManipulation.java
 *
 * Created on April 3, 2007, 4:01 AM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

/**This class is to manipulate the date strings which comes from
 *the textfield objects ( which in turn comes from the EthCalendar Object )
 *This class mainly calculate the difference in year in months and in days
 *and have 3 methods corrospondingly
 *
 * @author Administrator
 */
public class StringDateManipulation {

    /** Creates a new instance of StringDateManipulation */
    public StringDateManipulation() {
    }

    /**This method calculates the 'year' difference between two date strings
     *and returns the number
     *@param date1 is a String date (in yyyy-mm-dd )
     *@param date2 is a String date (in yyyy-mm-dd )
     *@see #differnceInMonths
     *@see #differenceInDays
     *@return returns an int value which is the difference between the years
     *
     */
    public static int differenceInYears(String date1, String date2) {
        String year1 = date1.substring(0, date1.indexOf('-'));
        String year2 = date2.substring(0, date2.indexOf('-'));
        int yearDiff = Integer.parseInt(year1) - Integer.parseInt(year2);

        return yearDiff;
    }

    /**
     *
     * @param _date
     * @return
     */
    public static String arrangeDateFormat(String _date) {
        String day;
        String month;
        String year;
        day = _date.substring(0, _date.indexOf('/'));
        month = _date.substring(_date.indexOf('/') + 1, _date.lastIndexOf('/'));
        year = _date.substring(_date.lastIndexOf('/') + 1);
        _date = year + "-" + month + "-" + day;
        return _date;
    }

    /**This method clalusates the difference between two dates in months
     *Unlike differenceInMonths it considers the years as months
     *_date1 and _date2 must be String type and in yyyy-MM-dd format
     *@param _date1
     * @param _date2
     * @return returns (((_date1.year - _date2.year) * 12 ) + _date1.month) - date2.month
     */
    public static int datesDifferenceInMonths(String _date1, String _date2) {
        return (((getYear(_date1) - getYear(_date2)) * 12) + getMonth(_date1)) - getMonth(_date2);
    }

    /**Extracts the year value from _date
     *@param _date a String date in yyyy-MM-dd format
     *@return returns the first for charachters as integer
     */
    public static int getYear(String _date) {
        return Integer.parseInt(_date.substring(0, _date.indexOf('-')));
    }

    /**Extracts the month value from _date
     *@param _date a string date in yyyy-MM-dd format
     *@return returns the MM from yyyy-MM-dd as integer
     */
    public static int getMonth(String _date) {
        return Integer.parseInt(_date.substring(_date.indexOf('-') + 1, _date.lastIndexOf('-')));
    }

    /**Extracts the date value form _date
     *@param _date a string date in yyyy-MM-dd format
     *@return returns the dd from yyyy-MM-dd as integer
     */
    public static int getDate(String _date) {
        return Integer.parseInt(_date.substring(_date.lastIndexOf('-') + 1));
    }

    /**
     * converts yyyy-mm-dd to <h1>monthNameInAmharic dd, yyyy</h1> to be easily readable
     * @param  date  the date in ethiopian calander
     */
    public static String convertDateToString(String date) {
        String dateName[] = {"መስከረ�?", "ጥቅ�?ት", "ህዳር", "ታህሳስ", "ጥር", "የካቲት", "መጋቢት", "ሚያ�?ያ", "�?ንቦት", "ሰኔ", "ሀ�?ሌ", "�?ሀሴ", "ጳጉሜ"};
        return dateName[getMonth(date) - 1] + " " + Integer.toString(getDate(date)) + ", " + Integer.toString(getYear(date));
    }

    /**This method calculates the 'month' difference between two date strings
     *and returns +ve if date1 > date2 else returns -ve
     *@param date1 is a String date (in yyyy-mm-dd )
     *@param date2 is a String date (in yyyy-mm-dd )
     *@see #differnceInYears
     *@see #differenceInDays
     *@return returns an int value which is the difference between the months
     *
     */
    public static int differenceInMonths(String date1, String date2) {
        String month1 = date1.substring(date1.indexOf('-') + 1, date1.lastIndexOf('-'));
        String month2 = date2.substring(date2.indexOf('-') + 1, date2.lastIndexOf('-'));
        int monthDiff = Integer.parseInt(month1) - Integer.parseInt(month2);

        return monthDiff;
    }

    /**This method calculates the 'day' difference between two date strings
     *and returns the number
     *@param date1 is a String date (in yyyy-mm-dd )
     *@param date2 is a String date (in yyyy-mm-dd )
     *@see #differnceInMonths , #differenceYears
     *@return returns an int value which is the difference between the days
     *
     */
    public static int differenceInDays(String date1, String date2) {
        String day1 = date1.substring(date1.lastIndexOf('-') + 1);
        String day2 = date2.substring(date2.lastIndexOf('-') + 1);
        int dayDiff = Integer.parseInt(day1) - Integer.parseInt(day2);

        return dayDiff;
    }

    /**Computes for the next day in Ethiopian calendar
     *@param _date the initial string date in yyyy-MM-dd format
     *@return returns the next day's date in yyyy-MM-dd format
     */
    public static String nextDayInEC(String _date) {
        String _day = String.valueOf(getDate(_date));
        String _month = String.valueOf(getMonth(_date));
        String _year = String.valueOf(getYear(_date));
        int day = getDate(_date);
        int month = getMonth(_date);
        day++;
        if (day <= 30) {

            _day = String.valueOf(day);
        } else if (day > 30) {
            _day = "1";
            month++;
            if (month > 12) {
                int year = Integer.parseInt(_year);
                year++; // next year
                _year = String.valueOf(year);
                month = 1;  // first month
            } else if (month < 10) {
                _month = "0" + String.valueOf(month);
            } else {
                _month = String.valueOf(month);
            }
        }
        if (_day.length() < 2) {
            _day = "0" + _day;
        }
        if (_month.length() < 2) {
            _month = "0" + _month;
        }

        // construct date
        String _nextDayDate = _year + "-" + _month + "-" + _day;

        return _nextDayDate;
    }

    /**Computes for the next day in Ethiopian calendar
     *@param _date the initial string date in yyyy-MM-dd format
     *@return returns the next day's date in yyyy-MM-dd format
     */
    public static String previousDayInEC(String _date) {
        String _day = String.valueOf(getDate(_date));
        String _month = String.valueOf(getMonth(_date));
        String _year = String.valueOf(getYear(_date));
        int day = getDate(_date);
        int month = getMonth(_date);
        day--;
        if (day >= 1) {
            _day = String.valueOf(day);
        } else if (day < 1) {
            _day = "30";
            month--;
            if (month < 1) {
                int year = Integer.parseInt(_year);
                year--; // next year
                _year = String.valueOf(year);
                month = 12;  // first month
            } else if (month > 1 && month < 10) {
                _month = "0" + String.valueOf(month);
            } else {
                _month = String.valueOf(month);
            }
        }
        // construct date
        String _previousDay = _year + "-" + _month + "-" + _day;

        return _previousDay;
    }

    /**Computes for the next month in Ethiopian calendar (Eliminating Poagmea)
     *@param _date the initial string date in yyyy-MM-dd format
     *@return returns the next month's date in yyyy-MM-dd format
     */
    public static String nextMonthInEC(String _date) {
        String _month = _date.substring(_date.indexOf('-') + 1,
                _date.lastIndexOf('-'));
        int month = Integer.parseInt(_month);
        String _year = _date.substring(0, _date.indexOf('-'));
        month++;    // increament the month
        if (month > 12) {
            int year = Integer.parseInt(_year);
            year++; // next year
            _year = String.valueOf(year);
            month = 1;  // first month
        }
        if (month < 10) {
            _month = "0" + String.valueOf(month);
        } else {
            _month = String.valueOf(month);
        }
        // construct date
        String _nextMonthsDate = _year + "-" + _month + "-" +
                _date.substring(_date.lastIndexOf('-') + 1);

        return _nextMonthsDate;
    }

//    public static String toDayInGc() {
//        return null;
//    }

    /**reads the date of the client machien and change it to Ethiopian date
     *@param todayInGC the current date in GC
     *@return returns the current date in EC with 'yyyy-MM-dd' format
     *
     */
    public static String todayInEC(String todayInGC) {

        long noYear = 0;
        currentYear = year1999;     // starting date's year
        currentMonth = year1999_1stMonth;
        currentDay = year1999_1stDay;
        currentDate = year1999_1stDate;
        // number of milliseconds
        long noOfDaysFromStart = 0;//Date.valueOf(todayInGC).getTime() - Date.valueOf("2006-09-11").getTime();


        noOfDaysFromStart /= (1000 * 60 * 60 * 24); //   number of days

//           System.out.println(noOfDaysFromStart);
        //Move years
//        noYear = noOfDaysFromStart / 365;   // number of years in the gap
        noYear = (4 * noOfDaysFromStart) / ((4 * 365) + 1);   // number of years in the gap

        currentYear += noYear;

        noOfDaysFromStart %= 365;

        if (noOfDaysFromStart < (noYear / 4)) {
            currentYear--;
            noOfDaysFromStart += 365;
        }

        noOfDaysFromStart -= (noYear / 4);


        //Move months
        if ((noOfDaysFromStart % 30) == 0) {
            currentMonth = (noOfDaysFromStart / 30);
        } else {
            currentMonth += (noOfDaysFromStart / 30);
        }


        //move days
        if ((noOfDaysFromStart % 30) == 0) {
            currentDate = 30;
        } else {
            currentDate = (noOfDaysFromStart % 30);
        }
        String dateString = null;

        String _dateSeparator = "-";
        String _monthSeparator = "-";
        if (currentDate < 10) {
            _dateSeparator = "-0";
        }
        if (currentMonth < 10) {
            _monthSeparator = "-0";
        }

        dateString = currentYear + _monthSeparator + currentMonth + _dateSeparator + currentDate;

        return dateString;
    }

    /**Changes the current date in GC to String format yyyy-MM-dd
     *@return returns the java.util.Date() as yyyy-MM-dd
     */
    public static String currentDateInGC() {
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date curDate = new java.util.Date();

        return format.format(curDate);
    }

    /**Calls the method toDayInEc(currentDateInGC())
     *@return
     * @returns toDayInEc(currentDateInGC())
     *@see #currentDateInGC()
     *@see #todayInEC(String todayInGC)
     */
    public static String toDayInEc() {
        return todayInEC(currentDateInGC());
    }

    /**
     * compute and return the closest integer numeber
     * @param doubleNum <code>double</code> number
     * @return an integer number close to doubleNum
     */
    public static int getIntPart(double doubleNum) {
        int intPart = 0;
        if (doubleNum < -0.0000001) {
            intPart = (int) Math.ceil(doubleNum - 0.0000001);
        } else {
            intPart = (int) Math.floor(doubleNum + 0.0000001);
        }
        return intPart;
    }

    /**
     * returns name of the week
     * @param date
     * @return returns Week Name
     */
    public static String getWeekDayName(String date) {
        String[] weekdays = {"ማክሰኞ", "ረብዑ", "�?ሙስ", "አርብ", "ቅዳሜ", "እ�?ድ", " ሰኞ"};
        java.util.GregorianCalendar calendar = new java.util.GregorianCalendar();
        //here date has first to be converted to dateInGC, first create a method to do this task
        //date=dateInGC(date);
        calendar.set(getYear(date), getMonth(date), getDate(date));
        String dateName = weekdays[calendar.get(java.util.Calendar.DAY_OF_WEEK) - 1];
        return dateName;
    }

    /**
     * Change the given date in gregorian calendar to Hijri Calender date, or
     * Islamic Calender.
     * (Note: Hijri Calender is a lunar calendar based on 12 lunar months in
     * a year of 354 or 355 days.)
     *@param date the date in gregorian date
     * @return returns the gregorian date in hijri with 'yyyy-MM-dd' format
     *
     */
    public static String todayInHC(String date) {
//        String dateString = null;
//        int thisYearGC = getYear(today);
//        int thisYearInHC = ((int) ((thisYearGC - 622) / 0.97)) + 1;
        int _date = StringDateManipulation.getDate(date);
        int _month = StringDateManipulation.getMonth(date);
        int _year = StringDateManipulation.getYear(date);
        int jd = 0;//Julian days
        if ((_year > 1582) || ((_year == 1582) && (_month > 10)) || ((_year == 1582) && (_month == 10) && (_date > 14))) {
            jd = getIntPart((1461 * (_year + 4800 + getIntPart((_month - 14) / 12))) / 4) + getIntPart((367 * (_month - 2 - 12 * (getIntPart((_month - 14) / 12)))) / 12) -
                    getIntPart((3 * (getIntPart((_year + 4900 + getIntPart((_month - 14) / 12)) / 100))) / 4) + _date - 32075;
        } else {
            jd = 367 * _year - getIntPart((7 * (_year + 5001 + getIntPart((_month - 9) / 7))) / 4) + getIntPart((275 * _month) / 9) + _date + 1729777;
        }
        int l = jd - 1948440 + 10632;
        int n = getIntPart((l - 1) / 10631);
        l = l - 10631 * n + 354;
        int j = (getIntPart((10985 - l) / 5316)) * (getIntPart((50 * l) / 17719)) + (getIntPart(l / 5670)) * (getIntPart((43 * l) / 15238));
        l = l - (getIntPart((30 - j) / 15)) * (getIntPart((17719 * j) / 50)) - (getIntPart(j / 16)) * (getIntPart((15238 * j) / 43)) + 29;
        _month = getIntPart((24 * l) / 709);
        _date = l - getIntPart((709 * _month) / 24);
        _year = 30 * n + j - 30;
        date = String.valueOf(_year) + "-" + String.valueOf(_month) + "-" + String.valueOf(_date);
        return date;
    }

    /**Changes the current date in GC to String format yyyy-MM-dd
     *@return returns the java.util.Date() as yyyy-MM-dd
     */
    public static String convertTodayInGCtoHC() {
        return todayInHC(currentDateInGC());
    }

    /**Changes the current date in GC to String format yyyy-MM-dd
     *@return returns the java.util.Date() as yyyy-MM-dd
     */
    public static String convertTodayInECtoHC() {
        return todayInHC(toDayInEc());
    }

    /**This method compares _date with today, the method just calls compareDate(todayInEc(), _date)
     *@param _date is a String date (in yyyy-mm-dd )
     *@see #compareDate
     *@see #todayInEC
     *@return returns compareDate(todayInEc(), _date)
     *
     */
    public static int compareWithToday(String _date) {
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        return compareDate(todayInEC(format.format(new java.util.Date())), _date);
    }

    /**extracts the date value from _date
     *(Note : _date must be in 'yyyy-MM-dd' format)
     *@param _date the date from wich the date is to be extracted
     *@return returns an integer representative of the date
     */
     public static String toDayInGc() {
        return currentDateInGC();
    }

    public static int extractDate(String _date) {
        return Integer.parseInt(_date.substring(_date.indexOf('-') + 1));
    }

    /**extracts the year value from _date
     *(Note : _date must be in 'yyyy-MM-dd' format)
     *@param _date the date from wich the year is to be extracted
     *@return returns an integer representative of the year
     */
    public static int extractYear(String _date) {
        return Integer.parseInt(_date.substring(0, _date.indexOf('-')));
    }

    /**extracts the month value from _date
     *(Note : _date must be in 'yyyy-MM-dd' format)
     *@param _date the date from wich the month is to be extracted
     *@return returns an integer representative of the month
     */
    public static int extractMonth(String _date) {
        return Integer.parseInt(_date.substring(_date.indexOf('-') + 1, _date.lastIndexOf('-')));
    }

    /**This method compares two date strings
     *@param date1 is a String date (in yyyy-mm-dd )
     *@param date2 is a String date (in yyyy-mm-dd )
     *@see #differnceInMonths , #differenceYears , #differenceInDays
     *@return returns 1 if date1 &gt; date2, -1 if date1 &lt; date2 and/or
     *  0 if date1 == date2
     *
     */
    public static int compareDate(String date1, String date2) {
        int flag = 0;
        if (differenceInYears(date1, date2) > 0) {
            flag = 1;
        } else if (differenceInYears(date1, date2) < 0) {
            flag = -1;
        } else if (differenceInYears(date1, date2) == 0) {

            if (differenceInMonths(date1, date2) > 0) {
                flag = 1;
            } else if (differenceInMonths(date1, date2) < 0) {
                flag = -1;
            } else if (differenceInMonths(date1, date2) == 0) {

                if (differenceInDays(date1, date2) > 0) {
                    flag = 1;
                } else if (differenceInDays(date1, date2) < 0) {
                    flag = -1;
                } else if (differenceInDays(date1, date2) == 0) {
                    flag = 0;
                }
            }
        }

        return flag;
    }

    /**
     *
     * @param date1
     * @param date2
     * @return
     */
//    public static int compareDateDifference(String date1, String date2) {
//        try {
//            int yearDiff = differenceInYears(date2, date1);
//            int monthDiff = differenceInMonths(date2, date1);
//            int dayDiff = differenceInDays(date2, date1);
//            int yearDiffInDays = 0;
//            int monthDiffInDays = 0;
//            int i = 0;
//            int year = Integer.parseInt(date2.split("-")[0]);
//            int preYear = Integer.parseInt(date1.split("-")[0]);
//            int month = Integer.parseInt(date2.split("-")[1]);
//            int day = Integer.parseInt(date2.split("-")[2]);
//            for (int j = preYear; j < year; j++) {
//                if ((j % 4 == 0)) {
//                    i = i + 1;
//                }
//            }
//            if (month == 13 && day == 6) {
//                i = i + 1;
//            }
//            yearDiffInDays = (yearDiff * 365) + i;
//            monthDiffInDays = monthDiff * 30;
//            int totalDiffInDays = yearDiffInDays + monthDiffInDays + dayDiff;
//            return totalDiffInDays;
//        } catch (Exception ex) {
//            ex.printStackTrace();
//
//        }
//        return 0;
//    }
    public  boolean checkSunday(String appliedDate)  {
 //JOptionPane.showMessageDialog(null, appliedDate);
//        SimpleDateFormat dateformatter = new SimpleDateFormat("yyyy-MM-dd");
      
            DateFormat formatter;
          Date startDate;
            formatter = new SimpleDateFormat("yyyy-MM-dd");
        try {
            startDate = (Date) formatter.parse(appliedDate);           
            Calendar startCal = Calendar.getInstance();

            startCal.setTime(startDate);

           // startCal.add(Calendar.DAY_OF_MONTH, 1);


            if (startCal.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) {
                return true;
            } else {
                return false;
            }
          } catch (ParseException ex) {
            Logger.getLogger(StringDateManipulation.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
//            }
      
    }

    public static int compareDateDifference(String date1, String date2) {
        try {
            int yearDiff = differenceInYears(date2, date1);
            int monthDiff = differenceInMonths(date2, date1);
            int dayDiff = differenceInDays(date2, date1);
            int yearDiffInDays = 0;
            int monthDiffInDays = 0;
            int totalDiffInDays = 0;
            int i = 0;
            int k = 30;
            int m = 0;
            int preYearDay = 0;
            int YearDay = 0;
            int yearDifference = 0;
            int year = Integer.parseInt(date2.split("-")[0]);
            int preYear = Integer.parseInt(date1.split("-")[0]);
            int month = Integer.parseInt(date2.split("-")[1]);
            int preMonth = Integer.parseInt(date1.split("-")[1]);
            int preDay = Integer.parseInt(date1.split("-")[2]);
            int day = Integer.parseInt(date2.split("-")[2]);
//            for (int j = preYear + 1; j <  year; j++) {
//
//                if ((j % 4 == 0)) {
//                    i = i + 1;
//                }
//
//            }
//            for (int m = preYear;m < year; m++){
//            if((preYear<year) && (year % 4 == 0)){
//
//            }

//            if(preMonth<=month){
//
//                for (int j = preMonth; j < month; j++) {
//                if (j==1||j==3||j==5||j==7||j==8||j==10||j==12) {
//                    k = k + 1;
//                   }else if (j==2){
//                      if(preYear % 4==0){
//                        k=k-1;
//                      }else
//                        k=k-2;
//                      }
//
//                  }
//               } else {
////               for (int j = preMonth; j > month; j--) {
////                if (j==1||j==3||j==5||j==7||j==8||j==10||j==12) {
////                    k = k + 1;
////                   }else if (j==2){//||month==3
////                      if(preYear % 4==0){
////                        k = k - 1;
////                      }else
////                        k = k - 2;
////                      }
////
////                  }
//
//                for (int j = preMonth; j > month; j--) {
//                if (j==1||j==3||j==5||j==7||j==8||j==10||j==12) {
//                    k = k + 1;
//                   }else if (j==2){//||month==3
//                      if(preYear % 4==0){
//                        k = k - 1;
//                      }else
//                        k = k - 2;
//                      }
//
//                  }
//               }
            //days in month in previous year
            if ((preMonth != month) || (preYear != year)) {
                if (preMonth == 1 || preMonth == 3 || preMonth == 5 || preMonth == 7 || preMonth == 8 || preMonth == 10 || preMonth == 12) {
                    preYearDay = 31 - preDay;
                } else if (preMonth == 2) {
                    if (preYear % 4 == 0) {
                        preYearDay = 29 - preDay;
                    } else {
                        preYearDay = 28 - preDay;
                    }

                } else {
                    preYearDay = 30 - preDay;
                }
            } else {
                preYearDay = preDay;
            }
            //days in middle years
            if (preYear < year) {
                for (int y = preYear + 1; y < year; y++) {
                    if (y % 4 == 0) {
                        yearDifference = yearDifference + 366;
                    } else {
                        yearDifference = yearDifference + 365;
                    }
                }
            }
            //days in month in current year

            YearDay = day;



            if ((preYear != year)) {
                for (int j = preMonth + 1; j <= 12; j++) {
                    if (j == 1 || j == 3 || j == 5 || j == 7 || j == 8 || j == 10 || j == 12) {
                        k = k + 1;
                    } else if (j == 2) {
                        if (preYear % 4 == 0) {
                            k = k - 1;
                        } else {
                            k = k - 2;
                        }
                    }
                    m = m + k;
                    k = 30;
                }
                for (int j = 1; j < month; j++) {
                    if (j == 1 || j == 3 || j == 5 || j == 7 || j == 8 || j == 10 || j == 12) {
                        k = k + 1;
                    } else if (j == 2) {
                        if (year % 4 == 0) {
                            k = k - 1;
                        } else {
                            k = k - 2;
                        }
                    }
                    m = m + k;
                    k = 30;
                }

            } else {
                for (int j = preMonth + 1; j < month; j++) {  // ??????????????????????
                    if (j == 1 || j == 3 || j == 5 || j == 7 || j == 8 || j == 10 || j == 12) {
                        k = k + 1;
                    } else if (j == 2) {
                        if ((year % 4 == 0) || (preYear % 4 == 0)) {
                            k = k - 1;
                        } else {
                            k = k - 2;
                        }
                    }
                    m = m + k;
                    k = 30;
                }
            }

//
//            if(preMonth<=month){
//
//                for (int j = preMonth; j < month; j++) {
//                if (j==1||j==3||j==5||j==7||j==8||j==10||j==12) {
//                    k = k + 1;
//                   }else if (j==2){
//                      if(preYear % 4==0){
//                        k=k-1;
//                      }else
//                        k=k-2;
//                      }
//
//                  }
//               } else {
////               for (int j = preMonth; j > month; j--) {
////                if (j==1||j==3||j==5||j==7||j==8||j==10||j==12) {
////                    k = k + 1;
////                   }else if (j==2){//||month==3
////                      if(preYear % 4==0){
////                        k = k - 1;
////                      }else
////                        k = k - 2;
////                      }
////
////                  }
//
//                for (int j = preMonth; j > month; j--) {
//                if (j==1||j==3||j==5||j==7||j==8||j==10||j==12) {
//                    k = k - 1;
//                   }else if (j==2){//||month==3
//                      if(preYear % 4==0){
//                        k = k + 1;
//                      }else
//                        k = k + 2;
//                      }
//
//                  }
//               }
//


//            }



//            }
//                monthDiff=monthDiff+12;

//            if (month == 13 && day == 6) {
//                i = i + 1;
//            }
//            yearDiffInDays = (yearDiff * 365) + i;
//            monthDiffInDays = (monthDiff * 30) + k;
            monthDiffInDays = m;
//            if(monthDiff!=0){
//            if(month==4||month==6||month==9||month==11)
//            {monthDiffInDays = monthDiff * 30;}
//            else if(month==1||month==3||month==5||month==7||month==8||month==10||month==12)
//            {monthDiffInDays = monthDiff * 31;}
//            else{
//              if(year%4==0){
//                  monthDiffInDays = monthDiff * 29;
//              }else{
//                  monthDiffInDays = monthDiff * 28;
//              }
//            }
//           }
//            int totalDiffInDays = yearDiffInDays + monthDiffInDays + dayDifference1;
            if ((preMonth != month) || (preYear != year)) {
                totalDiffInDays = yearDifference + monthDiffInDays + preYearDay + YearDay;
            } else {
                totalDiffInDays = YearDay - preYearDay;
            }
            return totalDiffInDays;
        } catch (Exception ex) {
            ex.printStackTrace();

        }
        return 0;
    }

    public static int calculateYearDifferenceBetweenTwoDates(String date1, String date2) {
        int dateDifference = StringDateManipulation.compareDateDifference(date1, date2);
        int i = 0;
        for (int j = StringDateManipulation.getYear(date1); j < StringDateManipulation.getYear(date2); j++) {
            if ((j % 4 == 0)) {
                i++;
            }
        }
        int totalServiceInYears = dateDifference / 365 - i;
        return totalServiceInYears;
    }
    public static long getTwoComparisonofDatesValue(String date1, String date2) {
        try {
            Calendar calendar1 = Calendar.getInstance();
            Calendar calendar2 = Calendar.getInstance();
            calendar1.set(StringDateManipulation.getYear(date1),
                    StringDateManipulation.getMonth(date1),
                    StringDateManipulation.getDate(date1));
            calendar2.set(StringDateManipulation.getYear(date2),
                    StringDateManipulation.getMonth(date2),
                    StringDateManipulation.getDate(date2));
            long milliseconds1 = calendar1.getTimeInMillis();
            long milliseconds2 = calendar2.getTimeInMillis();
            long diff = milliseconds2 - milliseconds1;
            long diffDays = diff / (24 * 60 * 60 * 1000);
//            System.out.println("Time in days: " + diffDays + " days.");
            return diffDays;
        } catch (Exception e) {
            return 0;
        }
    }
    /**
     * The method reads accepts two dates and calculates the year
     * difference between the two dates. It may be used to calculate the age
     * if date1=birth_date and date2=today
     * date2>date1
     */
//    public static int calculateYearDifferenceBetweenTwoDates(String date1, String date2) {
//        int dateDifference = StringDateManipulation.compareDateDifference(date1, date2);
//        int i = 0;
//        for (int j = StringDateManipulation.getYear(date1); j < StringDateManipulation.getYear(date2); j++) {
//            if ((j % 4 == 0)) {
//                i++;
//            }
//        }
//        int totalServiceInYears = dateDifference / 365 - i;
//        return totalServiceInYears;
//    }

//    public static void main(String str[]) {
//        StringDateManipulation man = new StringDateManipulation();
//        DateFormat fo = new SimpleDateFormat("yyyy-MM-dd");
//
//        System.out.println("today in EC : " + man.todayInEC(fo.format(new java.util.Date())));
//        System.out.println("today in GC : " + fo.format(new java.util.Date()));
//    }
    /**
     *
     */
    /**
     *
     */
    /**
     *
     */
    /**
     *
     */
    public static long currentYear,  currentMonth,  currentDay,  currentDate;
    static long year1999 = 1999,  year1999_1stDate = 1,  year1999_1stMonth = 1,  year1999_1stDay = 1;
    //String date;
//    public static void main(String arg[]) throws ParseException{
//        StringDateManipulation stringDateManipulation=new StringDateManipulation();
//    }
}
=======
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package manager.globalUseManager;

import java.text.ParseException;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
/*
 * StringDateManipulation.java
 *
 * Created on April 3, 2007, 4:01 AM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

/**This class is to manipulate the date strings which comes from
 *the textfield objects ( which in turn comes from the EthCalendar Object )
 *This class mainly calculate the difference in year in months and in days
 *and have 3 methods corrospondingly
 *
 * @author Administrator
 */
public class StringDateManipulation {

    /** Creates a new instance of StringDateManipulation */
    public StringDateManipulation() {
    }

    /**This method calculates the 'year' difference between two date strings
     *and returns the number
     *@param date1 is a String date (in yyyy-mm-dd )
     *@param date2 is a String date (in yyyy-mm-dd )
     *@see #differnceInMonths
     *@see #differenceInDays
     *@return returns an int value which is the difference between the years
     *
     */
    public static int differenceInYears(String date1, String date2) {
        String year1 = date1.substring(0, date1.indexOf('-'));
        String year2 = date2.substring(0, date2.indexOf('-'));
        int yearDiff = Integer.parseInt(year1) - Integer.parseInt(year2);

        return yearDiff;
    }

    /**
     *
     * @param _date
     * @return
     */
    public static String arrangeDateFormat(String _date) {
        String day;
        String month;
        String year;
        day = _date.substring(0, _date.indexOf('/'));
        month = _date.substring(_date.indexOf('/') + 1, _date.lastIndexOf('/'));
        year = _date.substring(_date.lastIndexOf('/') + 1);
        _date = year + "-" + month + "-" + day;
        return _date;
    }

    /**This method clalusates the difference between two dates in months
     *Unlike differenceInMonths it considers the years as months
     *_date1 and _date2 must be String type and in yyyy-MM-dd format
     *@param _date1
     * @param _date2
     * @return returns (((_date1.year - _date2.year) * 12 ) + _date1.month) - date2.month
     */
    public static int datesDifferenceInMonths(String _date1, String _date2) {
        return (((getYear(_date1) - getYear(_date2)) * 12) + getMonth(_date1)) - getMonth(_date2);
    }

    /**Extracts the year value from _date
     *@param _date a String date in yyyy-MM-dd format
     *@return returns the first for charachters as integer
     */
    public static int getYear(String _date) {
        return Integer.parseInt(_date.substring(0, _date.indexOf('-')));
    }

    /**Extracts the month value from _date
     *@param _date a string date in yyyy-MM-dd format
     *@return returns the MM from yyyy-MM-dd as integer
     */
    public static int getMonth(String _date) {
        return Integer.parseInt(_date.substring(_date.indexOf('-') + 1, _date.lastIndexOf('-')));
    }

    /**Extracts the date value form _date
     *@param _date a string date in yyyy-MM-dd format
     *@return returns the dd from yyyy-MM-dd as integer
     */
    public static int getDate(String _date) {
        return Integer.parseInt(_date.substring(_date.lastIndexOf('-') + 1));
    }

    /**
     * converts yyyy-mm-dd to <h1>monthNameInAmharic dd, yyyy</h1> to be easily readable
     * @param  date  the date in ethiopian calander
     */
    public static String convertDateToString(String date) {
        String dateName[] = {"መስከረ�?", "ጥቅ�?ት", "ህዳር", "ታህሳስ", "ጥር", "የካቲት", "መጋቢት", "ሚያ�?ያ", "�?ንቦት", "ሰኔ", "ሀ�?ሌ", "�?ሀሴ", "ጳጉሜ"};
        return dateName[getMonth(date) - 1] + " " + Integer.toString(getDate(date)) + ", " + Integer.toString(getYear(date));
    }

    /**This method calculates the 'month' difference between two date strings
     *and returns +ve if date1 > date2 else returns -ve
     *@param date1 is a String date (in yyyy-mm-dd )
     *@param date2 is a String date (in yyyy-mm-dd )
     *@see #differnceInYears
     *@see #differenceInDays
     *@return returns an int value which is the difference between the months
     *
     */
    public static int differenceInMonths(String date1, String date2) {
        String month1 = date1.substring(date1.indexOf('-') + 1, date1.lastIndexOf('-'));
        String month2 = date2.substring(date2.indexOf('-') + 1, date2.lastIndexOf('-'));
        int monthDiff = Integer.parseInt(month1) - Integer.parseInt(month2);

        return monthDiff;
    }

    /**This method calculates the 'day' difference between two date strings
     *and returns the number
     *@param date1 is a String date (in yyyy-mm-dd )
     *@param date2 is a String date (in yyyy-mm-dd )
     *@see #differnceInMonths , #differenceYears
     *@return returns an int value which is the difference between the days
     *
     */
    public static int differenceInDays(String date1, String date2) {
        String day1 = date1.substring(date1.lastIndexOf('-') + 1);
        String day2 = date2.substring(date2.lastIndexOf('-') + 1);
        int dayDiff = Integer.parseInt(day1) - Integer.parseInt(day2);

        return dayDiff;
    }

    /**Computes for the next day in Ethiopian calendar
     *@param _date the initial string date in yyyy-MM-dd format
     *@return returns the next day's date in yyyy-MM-dd format
     */
    public static String nextDayInEC(String _date) {
        String _day = String.valueOf(getDate(_date));
        String _month = String.valueOf(getMonth(_date));
        String _year = String.valueOf(getYear(_date));
        int day = getDate(_date);
        int month = getMonth(_date);
        day++;
        if (day <= 30) {

            _day = String.valueOf(day);
        } else if (day > 30) {
            _day = "1";
            month++;
            if (month > 12) {
                int year = Integer.parseInt(_year);
                year++; // next year
                _year = String.valueOf(year);
                month = 1;  // first month
            } else if (month < 10) {
                _month = "0" + String.valueOf(month);
            } else {
                _month = String.valueOf(month);
            }
        }
        if (_day.length() < 2) {
            _day = "0" + _day;
        }
        if (_month.length() < 2) {
            _month = "0" + _month;
        }

        // construct date
        String _nextDayDate = _year + "-" + _month + "-" + _day;

        return _nextDayDate;
    }

    /**Computes for the next day in Ethiopian calendar
     *@param _date the initial string date in yyyy-MM-dd format
     *@return returns the next day's date in yyyy-MM-dd format
     */
    public static String previousDayInEC(String _date) {
        String _day = String.valueOf(getDate(_date));
        String _month = String.valueOf(getMonth(_date));
        String _year = String.valueOf(getYear(_date));
        int day = getDate(_date);
        int month = getMonth(_date);
        day--;
        if (day >= 1) {
            _day = String.valueOf(day);
        } else if (day < 1) {
            _day = "30";
            month--;
            if (month < 1) {
                int year = Integer.parseInt(_year);
                year--; // next year
                _year = String.valueOf(year);
                month = 12;  // first month
            } else if (month > 1 && month < 10) {
                _month = "0" + String.valueOf(month);
            } else {
                _month = String.valueOf(month);
            }
        }
        // construct date
        String _previousDay = _year + "-" + _month + "-" + _day;

        return _previousDay;
    }

    /**Computes for the next month in Ethiopian calendar (Eliminating Poagmea)
     *@param _date the initial string date in yyyy-MM-dd format
     *@return returns the next month's date in yyyy-MM-dd format
     */
    public static String nextMonthInEC(String _date) {
        String _month = _date.substring(_date.indexOf('-') + 1,
                _date.lastIndexOf('-'));
        int month = Integer.parseInt(_month);
        String _year = _date.substring(0, _date.indexOf('-'));
        month++;    // increament the month
        if (month > 12) {
            int year = Integer.parseInt(_year);
            year++; // next year
            _year = String.valueOf(year);
            month = 1;  // first month
        }
        if (month < 10) {
            _month = "0" + String.valueOf(month);
        } else {
            _month = String.valueOf(month);
        }
        // construct date
        String _nextMonthsDate = _year + "-" + _month + "-" +
                _date.substring(_date.lastIndexOf('-') + 1);

        return _nextMonthsDate;
    }

  
    /**reads the date of the client machien and change it to Ethiopian date
     *@param todayInGC the current date in GC
     *@return returns the current date in EC with 'yyyy-MM-dd' format
     *
     */
    public static String todayInEC(String todayInGC) {

        long noYear = 0;
        currentYear = year1999;     // starting date's year
        currentMonth = year1999_1stMonth;
        currentDay = year1999_1stDay;
        currentDate = year1999_1stDate;
        // number of milliseconds
        long noOfDaysFromStart = 0;//Date.valueOf(todayInGC).getTime() - Date.valueOf("2006-09-11").getTime();


        noOfDaysFromStart /= (1000 * 60 * 60 * 24); //   number of days

//           System.out.println(noOfDaysFromStart);
        //Move years
//        noYear = noOfDaysFromStart / 365;   // number of years in the gap
        noYear = (4 * noOfDaysFromStart) / ((4 * 365) + 1);   // number of years in the gap

        currentYear += noYear;

        noOfDaysFromStart %= 365;

        if (noOfDaysFromStart < (noYear / 4)) {
            currentYear--;
            noOfDaysFromStart += 365;
        }

        noOfDaysFromStart -= (noYear / 4);


        //Move months
        if ((noOfDaysFromStart % 30) == 0) {
            currentMonth = (noOfDaysFromStart / 30);
        } else {
            currentMonth += (noOfDaysFromStart / 30);
        }


        //move days
        if ((noOfDaysFromStart % 30) == 0) {
            currentDate = 30;
        } else {
            currentDate = (noOfDaysFromStart % 30);
        }
        String dateString = null;

        String _dateSeparator = "-";
        String _monthSeparator = "-";
        if (currentDate < 10) {
            _dateSeparator = "-0";
        }
        if (currentMonth < 10) {
            _monthSeparator = "-0";
        }

        dateString = currentYear + _monthSeparator + currentMonth + _dateSeparator + currentDate;

        return dateString;
    }

    /**Changes the current date in GC to String format yyyy-MM-dd
     *@return returns the java.util.Date() as yyyy-MM-dd
     */
    public static String currentDateInGC() {
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date curDate = new java.util.Date();

        return format.format(curDate);
    }

    /**Calls the method toDayInEc(currentDateInGC())
     *@return
     * @returns toDayInEc(currentDateInGC())
     *@see #currentDateInGC()
     *@see #todayInEC(String todayInGC)
     */
    public static String toDayInEc() {
        return todayInEC(currentDateInGC());
    }

    /**
     * compute and return the closest integer numeber
     * @param doubleNum <code>double</code> number
     * @return an integer number close to doubleNum
     */
    public static int getIntPart(double doubleNum) {
        int intPart = 0;
        if (doubleNum < -0.0000001) {
            intPart = (int) Math.ceil(doubleNum - 0.0000001);
        } else {
            intPart = (int) Math.floor(doubleNum + 0.0000001);
        }
        return intPart;
    }

    /**
     * returns name of the week
     * @param date
     * @return returns Week Name
     */
    public static String getWeekDayName(String date) {
        String[] weekdays = {"ማክሰኞ", "ረብዑ", "�?ሙስ", "አርብ", "ቅዳሜ", "እ�?ድ", " ሰኞ"};
        java.util.GregorianCalendar calendar = new java.util.GregorianCalendar();
        //here date has first to be converted to dateInGC, first create a method to do this task
        //date=dateInGC(date);
        calendar.set(getYear(date), getMonth(date), getDate(date));
        String dateName = weekdays[calendar.get(java.util.Calendar.DAY_OF_WEEK) - 1];
        return dateName;
    }

    /**
     * Change the given date in gregorian calendar to Hijri Calender date, or
     * Islamic Calender.
     * (Note: Hijri Calender is a lunar calendar based on 12 lunar months in
     * a year of 354 or 355 days.)
     *@param date the date in gregorian date
     * @return returns the gregorian date in hijri with 'yyyy-MM-dd' format
     *
     */
    public static String todayInHC(String date) {
//        String dateString = null;
//        int thisYearGC = getYear(today);
//        JOptionPane.showMessageDialog(null, thisYearGC);
//        int thisYearInHC = ((int) ((thisYearGC - 622) / 0.97)) + 1;
//        JOptionPane.showMessageDialog(null, thisYearInHC);
        int _date = StringDateManipulation.getDate(date);
        int _month = StringDateManipulation.getMonth(date);
        int _year = StringDateManipulation.getYear(date);
        int jd = 0;//Julian days
        if ((_year > 1582) || ((_year == 1582) && (_month > 10)) || ((_year == 1582) && (_month == 10) && (_date > 14))) {
            jd = getIntPart((1461 * (_year + 4800 + getIntPart((_month - 14) / 12))) / 4) + getIntPart((367 * (_month - 2 - 12 * (getIntPart((_month - 14) / 12)))) / 12) -
                    getIntPart((3 * (getIntPart((_year + 4900 + getIntPart((_month - 14) / 12)) / 100))) / 4) + _date - 32075;
        } else {
            jd = 367 * _year - getIntPart((7 * (_year + 5001 + getIntPart((_month - 9) / 7))) / 4) + getIntPart((275 * _month) / 9) + _date + 1729777;
        }
        int l = jd - 1948440 + 10632;
        int n = getIntPart((l - 1) / 10631);
        l = l - 10631 * n + 354;
        int j = (getIntPart((10985 - l) / 5316)) * (getIntPart((50 * l) / 17719)) + (getIntPart(l / 5670)) * (getIntPart((43 * l) / 15238));
        l = l - (getIntPart((30 - j) / 15)) * (getIntPart((17719 * j) / 50)) - (getIntPart(j / 16)) * (getIntPart((15238 * j) / 43)) + 29;
        _month = getIntPart((24 * l) / 709);
        _date = l - getIntPart((709 * _month) / 24);
        _year = 30 * n + j - 30;
        date = String.valueOf(_year) + "-" + String.valueOf(_month) + "-" + String.valueOf(_date);
        return date;
    }

    /**Changes the current date in GC to String format yyyy-MM-dd
     *@return returns the java.util.Date() as yyyy-MM-dd
     */
    public static String convertTodayInGCtoHC() {
        return todayInHC(currentDateInGC());
    }

    /**Changes the current date in GC to String format yyyy-MM-dd
     *@return returns the java.util.Date() as yyyy-MM-dd
     */
    public static String convertTodayInECtoHC() {
        return todayInHC(toDayInEc());
    }

    /**This method compares _date with today, the method just calls compareDate(todayInEc(), _date)
     *@param _date is a String date (in yyyy-mm-dd )
     *@see #compareDate
     *@see #todayInEC
     *@return returns compareDate(todayInEc(), _date)
     *
     */
    public static int compareWithToday(String _date) {
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        return compareDate(todayInEC(format.format(new java.util.Date())), _date);
    }

    /**extracts the date value from _date
     *(Note : _date must be in 'yyyy-MM-dd' format)
     *@param _date the date from wich the date is to be extracted
     *@return returns an integer representative of the date
     */
     public static String toDayInGc() {
        return currentDateInGC();
    }

    public static int extractDate(String _date) {
        return Integer.parseInt(_date.substring(_date.indexOf('-') + 1));
    }

    /**extracts the year value from _date
     *(Note : _date must be in 'yyyy-MM-dd' format)
     *@param _date the date from wich the year is to be extracted
     *@return returns an integer representative of the year
     */
    public static int extractYear(String _date) {
        return Integer.parseInt(_date.substring(0, _date.indexOf('-')));
    }

    /**extracts the month value from _date
     *(Note : _date must be in 'yyyy-MM-dd' format)
     *@param _date the date from wich the month is to be extracted
     *@return returns an integer representative of the month
     */
    public static int extractMonth(String _date) {
        return Integer.parseInt(_date.substring(_date.indexOf('-') + 1, _date.lastIndexOf('-')));
    }

    /**This method compares two date strings
     *@param date1 is a String date (in yyyy-mm-dd )
     *@param date2 is a String date (in yyyy-mm-dd )
     *@see #differnceInMonths , #differenceYears , #differenceInDays
     *@return returns 1 if date1 &gt; date2, -1 if date1 &lt; date2 and/or
     *  0 if date1 == date2
     *
     */
    public static int compareDate(String date1, String date2) {
        int flag = 0;
        if (differenceInYears(date1, date2) > 0) {
            flag = 1;
        } else if (differenceInYears(date1, date2) < 0) {
            flag = -1;
        } else if (differenceInYears(date1, date2) == 0) {

            if (differenceInMonths(date1, date2) > 0) {
                flag = 1;
            } else if (differenceInMonths(date1, date2) < 0) {
                flag = -1;
            } else if (differenceInMonths(date1, date2) == 0) {

                if (differenceInDays(date1, date2) > 0) {
                    flag = 1;
                } else if (differenceInDays(date1, date2) < 0) {
                    flag = -1;
                } else if (differenceInDays(date1, date2) == 0) {
                    flag = 0;
                }
            }
        }

        return flag;
    }

    /**
     *
     * @param date1
     * @param date2
     * @return
     */
//    public static int compareDateDifference(String date1, String date2) {
//        try {
//            int yearDiff = differenceInYears(date2, date1);
//            int monthDiff = differenceInMonths(date2, date1);
//            int dayDiff = differenceInDays(date2, date1);
//            int yearDiffInDays = 0;
//            int monthDiffInDays = 0;
//            int i = 0;
//            int year = Integer.parseInt(date2.split("-")[0]);
//            int preYear = Integer.parseInt(date1.split("-")[0]);
//            int month = Integer.parseInt(date2.split("-")[1]);
//            int day = Integer.parseInt(date2.split("-")[2]);
//            for (int j = preYear; j < year; j++) {
//                if ((j % 4 == 0)) {
//                    i = i + 1;
//                }
//            }
//            if (month == 13 && day == 6) {
//                i = i + 1;
//            }
//            yearDiffInDays = (yearDiff * 365) + i;
//            monthDiffInDays = monthDiff * 30;
//            int totalDiffInDays = yearDiffInDays + monthDiffInDays + dayDiff;
//            return totalDiffInDays;
//        } catch (Exception ex) {
//            ex.printStackTrace();
//
//        }
//        return 0;
//    }
    public  boolean checkSunday(String appliedDate)  {
 //JOptionPane.showMessageDialog(null, appliedDate);
//        SimpleDateFormat dateformatter = new SimpleDateFormat("yyyy-MM-dd");
      
            DateFormat formatter;
          Date startDate;
            formatter = new SimpleDateFormat("yyyy-MM-dd");
        try {
            startDate = (Date) formatter.parse(appliedDate);           
            Calendar startCal = Calendar.getInstance();

            startCal.setTime(startDate);

           // startCal.add(Calendar.DAY_OF_MONTH, 1);


            if (startCal.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) {
                return true;
            } else {
                return false;
            }
          } catch (ParseException ex) {
            Logger.getLogger(StringDateManipulation.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
//            }
      
    }

    public static int compareDateDifference(String date1, String date2) {
        try {
            int yearDiff = differenceInYears(date2, date1);
            int monthDiff = differenceInMonths(date2, date1);
            int dayDiff = differenceInDays(date2, date1);
            int yearDiffInDays = 0;
            int monthDiffInDays = 0;
            int totalDiffInDays = 0;
            int i = 0;
            int k = 30;
            int m = 0;
            int preYearDay = 0;
            int YearDay = 0;
            int yearDifference = 0;
            int year = Integer.parseInt(date2.split("-")[0]);
            int preYear = Integer.parseInt(date1.split("-")[0]);
            int month = Integer.parseInt(date2.split("-")[1]);
            int preMonth = Integer.parseInt(date1.split("-")[1]);
            int preDay = Integer.parseInt(date1.split("-")[2]);
            int day = Integer.parseInt(date2.split("-")[2]);
//            for (int j = preYear + 1; j <  year; j++) {
//
//                if ((j % 4 == 0)) {
//                    i = i + 1;
//                }
//
//            }
//            for (int m = preYear;m < year; m++){
//            if((preYear<year) && (year % 4 == 0)){
//
//            }

//            if(preMonth<=month){
//
//                for (int j = preMonth; j < month; j++) {
//                if (j==1||j==3||j==5||j==7||j==8||j==10||j==12) {
//                    k = k + 1;
//                   }else if (j==2){
//                      if(preYear % 4==0){
//                        k=k-1;
//                      }else
//                        k=k-2;
//                      }
//
//                  }
//               } else {
////               for (int j = preMonth; j > month; j--) {
////                if (j==1||j==3||j==5||j==7||j==8||j==10||j==12) {
////                    k = k + 1;
////                   }else if (j==2){//||month==3
////                      if(preYear % 4==0){
////                        k = k - 1;
////                      }else
////                        k = k - 2;
////                      }
////
////                  }
//
//                for (int j = preMonth; j > month; j--) {
//                if (j==1||j==3||j==5||j==7||j==8||j==10||j==12) {
//                    k = k + 1;
//                   }else if (j==2){//||month==3
//                      if(preYear % 4==0){
//                        k = k - 1;
//                      }else
//                        k = k - 2;
//                      }
//
//                  }
//               }
            //days in month in previous year
            if ((preMonth != month) || (preYear != year)) {
                if (preMonth == 1 || preMonth == 3 || preMonth == 5 || preMonth == 7 || preMonth == 8 || preMonth == 10 || preMonth == 12) {
                    preYearDay = 31 - preDay;
                } else if (preMonth == 2) {
                    if (preYear % 4 == 0) {
                        preYearDay = 29 - preDay;
                    } else {
                        preYearDay = 28 - preDay;
                    }

                } else {
                    preYearDay = 30 - preDay;
                }
            } else {
                preYearDay = preDay;
            }
            //days in middle years
            if (preYear < year) {
                for (int y = preYear + 1; y < year; y++) {
                    if (y % 4 == 0) {
                        yearDifference = yearDifference + 366;
                    } else {
                        yearDifference = yearDifference + 365;
                    }
                }
            }
            //days in month in current year

            YearDay = day;



            if ((preYear != year)) {
                for (int j = preMonth + 1; j <= 12; j++) {
                    if (j == 1 || j == 3 || j == 5 || j == 7 || j == 8 || j == 10 || j == 12) {
                        k = k + 1;
                    } else if (j == 2) {
                        if (preYear % 4 == 0) {
                            k = k - 1;
                        } else {
                            k = k - 2;
                        }
                    }
                    m = m + k;
                    k = 30;
                }
                for (int j = 1; j < month; j++) {
                    if (j == 1 || j == 3 || j == 5 || j == 7 || j == 8 || j == 10 || j == 12) {
                        k = k + 1;
                    } else if (j == 2) {
                        if (year % 4 == 0) {
                            k = k - 1;
                        } else {
                            k = k - 2;
                        }
                    }
                    m = m + k;
                    k = 30;
                }

            } else {
                for (int j = preMonth + 1; j < month; j++) {  // ??????????????????????
                    if (j == 1 || j == 3 || j == 5 || j == 7 || j == 8 || j == 10 || j == 12) {
                        k = k + 1;
                    } else if (j == 2) {
                        if ((year % 4 == 0) || (preYear % 4 == 0)) {
                            k = k - 1;
                        } else {
                            k = k - 2;
                        }
                    }
                    m = m + k;
                    k = 30;
                }
            }

//
//            if(preMonth<=month){
//
//                for (int j = preMonth; j < month; j++) {
//                if (j==1||j==3||j==5||j==7||j==8||j==10||j==12) {
//                    k = k + 1;
//                   }else if (j==2){
//                      if(preYear % 4==0){
//                        k=k-1;
//                      }else
//                        k=k-2;
//                      }
//
//                  }
//               } else {
////               for (int j = preMonth; j > month; j--) {
////                if (j==1||j==3||j==5||j==7||j==8||j==10||j==12) {
////                    k = k + 1;
////                   }else if (j==2){//||month==3
////                      if(preYear % 4==0){
////                        k = k - 1;
////                      }else
////                        k = k - 2;
////                      }
////
////                  }
//
//                for (int j = preMonth; j > month; j--) {
//                if (j==1||j==3||j==5||j==7||j==8||j==10||j==12) {
//                    k = k - 1;
//                   }else if (j==2){//||month==3
//                      if(preYear % 4==0){
//                        k = k + 1;
//                      }else
//                        k = k + 2;
//                      }
//
//                  }
//               }
//


//            }



//            }
//                monthDiff=monthDiff+12;

//            if (month == 13 && day == 6) {
//                i = i + 1;
//            }
//            yearDiffInDays = (yearDiff * 365) + i;
//            monthDiffInDays = (monthDiff * 30) + k;
            monthDiffInDays = m;
//            if(monthDiff!=0){
//            if(month==4||month==6||month==9||month==11)
//            {monthDiffInDays = monthDiff * 30;}
//            else if(month==1||month==3||month==5||month==7||month==8||month==10||month==12)
//            {monthDiffInDays = monthDiff * 31;}
//            else{
//              if(year%4==0){
//                  monthDiffInDays = monthDiff * 29;
//              }else{
//                  monthDiffInDays = monthDiff * 28;
//              }
//            }
//           }
//            int totalDiffInDays = yearDiffInDays + monthDiffInDays + dayDifference1;
            if ((preMonth != month) || (preYear != year)) {
                totalDiffInDays = yearDifference + monthDiffInDays + preYearDay + YearDay;
            } else {
                totalDiffInDays = YearDay - preYearDay;
            }
            return totalDiffInDays;
        } catch (Exception ex) {
            ex.printStackTrace();

        }
        return 0;
    }

    public static int calculateYearDifferenceBetweenTwoDates(String date1, String date2) {
        int dateDifference = StringDateManipulation.compareDateDifference(date1, date2);
        int i = 0;
        for (int j = StringDateManipulation.getYear(date1); j < StringDateManipulation.getYear(date2); j++) {
            if ((j % 4 == 0)) {
                i++;
            }
        }
        int totalServiceInYears = dateDifference / 365 - i;
        return totalServiceInYears;
    }
    public static long getTwoComparisonofDatesValue(String date1, String date2) {
        try {
            Calendar calendar1 = Calendar.getInstance();
            Calendar calendar2 = Calendar.getInstance();
            calendar1.set(StringDateManipulation.getYear(date1),
                    StringDateManipulation.getMonth(date1),
                    StringDateManipulation.getDate(date1));
            calendar2.set(StringDateManipulation.getYear(date2),
                    StringDateManipulation.getMonth(date2),
                    StringDateManipulation.getDate(date2));
            long milliseconds1 = calendar1.getTimeInMillis();
            long milliseconds2 = calendar2.getTimeInMillis();
            long diff = milliseconds2 - milliseconds1;
            long diffDays = diff / (24 * 60 * 60 * 1000);
//            System.out.println("Time in days: " + diffDays + " days.");
            return diffDays;
        } catch (Exception e) {
            return 0;
        }
    }
    /**
     * The method reads accepts two dates and calculates the year
     * difference between the two dates. It may be used to calculate the age
     * if date1=birth_date and date2=today
     * date2>date1
     */
//    public static int calculateYearDifferenceBetweenTwoDates(String date1, String date2) {
//        int dateDifference = StringDateManipulation.compareDateDifference(date1, date2);
//        int i = 0;
//        for (int j = StringDateManipulation.getYear(date1); j < StringDateManipulation.getYear(date2); j++) {
//            if ((j % 4 == 0)) {
//                i++;
//            }
//        }
//        int totalServiceInYears = dateDifference / 365 - i;
//        return totalServiceInYears;
//    }

//    public static void main(String str[]) {
//        StringDateManipulation man = new StringDateManipulation();
//        DateFormat fo = new SimpleDateFormat("yyyy-MM-dd");
//
//        System.out.println("today in EC : " + man.todayInEC(fo.format(new java.util.Date())));
//        System.out.println("today in GC : " + fo.format(new java.util.Date()));
//    }
    /**
     *
     */
    /**
     *
     */
    /**
     *
     */
    /**
     *
     */
    public static long currentYear,  currentMonth,  currentDay,  currentDate;
    static long year1999 = 1999,  year1999_1stDate = 1,  year1999_1stMonth = 1,  year1999_1stDay = 1;
    //String date;
//    public static void main(String arg[]) throws ParseException{
//        StringDateManipulation stringDateManipulation=new StringDateManipulation();
//        JOptionPane.showMessageDialog(null, stringDateManipulation.checkSunday("2013-06-23"));
//    }
}
>>>>>>> .r1379
