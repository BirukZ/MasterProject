/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package manager.leaveManager;

import entity.leaveEntity.LeaveBalanceEntity;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.faces.model.SelectItem;
import manager.globalUseManager.JodanTimeCalender;
import manager.globalUseManager.StringDateManipulation;

/**
 *
 * @author ONEJAVA
 */
public class LeaveBalanceManager {

    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    private JodanTimeCalender jodanTimeCalender = new JodanTimeCalender();
    private LeaveBalanceEntity leaveBalanceEntity = new LeaveBalanceEntity();

    public LeaveBalanceManager() {
    }

    public ArrayList<SelectItem> pysicalLeaveYear() {
        String date = jodanTimeCalender.currentDateFinder();
        ArrayList<SelectItem> listOfYear = new ArrayList<SelectItem>();
        int phisicalLeaveYear = StringDateManipulation.getYear(date);
        int month = StringDateManipulation.getMonth(date);
        if (month >= 11) {
            phisicalLeaveYear += 1;
        }
        try {
            for (int i = 1; i < 5; i++) {
                listOfYear.add(new SelectItem(Integer.toString(phisicalLeaveYear), Integer.toString(phisicalLeaveYear)));
                phisicalLeaveYear -= 1;
            }
            listOfYear.add(0, new SelectItem(null, "-- Select Pysical Year --"));

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        return listOfYear;

    }
     public ArrayList<SelectItem> getPysicalLeaveYear() {
        String date = jodanTimeCalender.currentDateFinder();
        ArrayList<SelectItem> listOfYear = new ArrayList<SelectItem>();
        int phisicalLeaveYear = StringDateManipulation.getYear(date);
        int month = StringDateManipulation.getMonth(date);
        if (month >= 11) {
            phisicalLeaveYear += 2;
        }
        try {
            for (int i = 1; i < 3; i++) {
                listOfYear.add(new SelectItem(Integer.toString(phisicalLeaveYear), Integer.toString(phisicalLeaveYear)));
                phisicalLeaveYear -= 1;
            }
            listOfYear.add(0, new SelectItem(null, "-- Select Pysical Year --"));

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        return listOfYear;

    }
       public ArrayList<SelectItem> getScheduleLeaveYear() {
        String date = jodanTimeCalender.currentDateFinder();
        ArrayList<SelectItem> listOfYear = new ArrayList<SelectItem>();
        int phisicalLeaveYear = StringDateManipulation.getYear(date);
        int month = StringDateManipulation.getMonth(date);
         phisicalLeaveYear += 1;
        try {
            for (int i = 1; i < 3; i++) {
                listOfYear.add(new SelectItem(Integer.toString(phisicalLeaveYear),
                        Integer.toString(phisicalLeaveYear)));
                phisicalLeaveYear -= 1;
            }
            listOfYear.add(0, new SelectItem(null, "-- Select Pysical Year --"));

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        return listOfYear;

    }

    public boolean saveLeaveBalance(ArrayList<HashMap> leaveBalance) {
        try {
            return leaveBalanceEntity.saveLeaveBalanceNewTransfer(leaveBalance);
        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        }
    }
       public boolean saveLeaveBalanceINBank(ArrayList<HashMap> leaveBalance) {
        try {
            return leaveBalanceEntity.saveLeaveBalanceINBank(leaveBalance);
        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        }
    }

    public boolean updateLeaveBalance(ArrayList<HashMap> leaveBalance) {
        try {
            return leaveBalanceEntity.updateLeaveBalanceNewTransfer(leaveBalance);
        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        }
    }

    public boolean deleteEmployeeLeaveBalance(String leaveBalanceId) {
        try {
            return leaveBalanceEntity.deleteEmployeeLeaveBalance(leaveBalanceId);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }

    }

    public ArrayList<HashMap> listOfEmployeeLeaveBalance() {
        try {
            int year = 0;
            year = StringDateManipulation.getYear(StringDateManipulation.toDayInEc());
            year -= 2;
            return leaveBalanceEntity.listOfEmployeeLeaveBalance(Integer.toString(year));
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public ArrayList<HashMap> listOfEmployeeFromReserveLeave() {
        try {
            int year = 0;
            year = StringDateManipulation.getYear(StringDateManipulation.toDayInEc());
            year -= 2;
            return leaveBalanceEntity.listOfEmployeeFromReserveLeave(Integer.toString(year));
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public ArrayList<HashMap> listOfEmployeeLeaveBalance(String employeeID) {
        try {
            int year = 0;
            year = StringDateManipulation.getYear(StringDateManipulation.toDayInEc());
            year -= 2;
            return leaveBalanceEntity.listOfEmployeeLeaveBalance(Integer.toString(year), employeeID);
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public ArrayList<HashMap> listOfEmployeeFromReserveLeave(String employeeID) {
        try {
            int year = 0;
            year = StringDateManipulation.getYear(StringDateManipulation.toDayInEc());
            year -= 2;
            return leaveBalanceEntity.listOfEmployeeFromReserveLeave(Integer.toString(year), employeeID);
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public ArrayList<HashMap> listOfEmployee(String year) {
        try {
            return leaveBalanceEntity.listOfEmployee(year);
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }

    }
      public ArrayList<HashMap> listOfEmployeeforRemaingLeave(String year) {
        try {
            return leaveBalanceEntity.listOfEmpRem(year);
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }

    }

    public float readEmployeeLeaveBalance(String leaveYear, String employeeId) {
        try {
            return leaveBalanceEntity.readEmployeeLeaveBalanceAvilebelInTheYear(leaveYear, employeeId);
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }

    public boolean isRegisterThisYear(String leaveYear, String employeeId) {
        try {
            return leaveBalanceEntity.isRegisterThisYear(leaveYear, employeeId);
        } catch (Exception e) {
            e.printStackTrace();
            return true;
        }
    }

    public boolean saveLeaveSchdule(HashMap leaveBalance) {
        return leaveBalanceEntity.saveLeaveSchdule(leaveBalance);
    }

 

    public boolean delteLeaveSchduleEmployee(int scheduleId, String empID) {
        return leaveBalanceEntity.delteLeaveSchduleEmployee(scheduleId, empID);
    }

    public boolean approveLeaveSchedule(ArrayList<HashMap> leaveBalance, int status) {
        try {
            return leaveBalanceEntity.approveLeaveSchedule(leaveBalance, status);
        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        }
    }

}
