
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package entity.overTimeEntity;

import connectionProvider.ConnectionManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import manager.overTimeManager.OverTimeRequestManager.OverTimeRequestModel;
import oracle.jdbc.rowset.OracleCachedRowSet;

/**
 *
 * @author mekete
 */
public class OverTimeAttendanceEntity extends ConnectionManager {

    Connection _con = null;
    PreparedStatement _ps = null;
    ResultSet _rs = null;

    public void releaseResources() throws SQLException {
        if (_rs != null) {
            _rs.close();
        }
        if (_ps != null) {
            _ps.close();
        }
        if (_con != null) {
            closePooledConnections(_con);
        }
    }

    public ResultSet selectRequestAttendance(int overTimeAttendanceId) throws SQLException {
        String _selectQuery = " SELECT * FROM HR_OVER_TIME_ATTENDANCE " +
                " WHERE HR_OVER_TIME_ATTENDANCE_ID = ? ";
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_selectQuery);
            _ps.setInt(1, overTimeAttendanceId);
            _rs = _ps.executeQuery();
            OracleCachedRowSet ocrs = new OracleCachedRowSet();
            ocrs.populate(_rs);
            return (ResultSet) ocrs;
        } finally {
            releaseResources();
        }
    }

    public ResultSet selectRequestAttendanceEmployee(int overTimeAttendanceId) throws SQLException {
        String _selectQuery = " SELECT * FROM HR_OVER_TIME_ATTEND_EMPLOYEE " +
                " WHERE OT_ATTENDANCE_ID = ? ";
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_selectQuery);
            _ps.setInt(1, overTimeAttendanceId);
            _rs = _ps.executeQuery();
            OracleCachedRowSet ocrs = new OracleCachedRowSet();
            ocrs.populate(_rs);
            return (ResultSet) ocrs;
        } finally {
            releaseResources();
        }
    }

    /**
     * for the drop down select item
     */
    public ResultSet selectAttendanceHistoryEmployee(String userName) throws SQLException {
        String _selectQuery = " SELECT HR_OVER_TIME_REQUEST.OVER_TIME_REQUEST_ID,HR_OVER_TIME_REQUEST.REQUESTER_ID,HR_OVER_TIME_REQUEST.STATUS, " +//from HR_OVER_TIME_REQUEST
                " HR_OVER_TIME_ATTENDANCE.HR_OVER_TIME_ATTENDANCE_ID,  HR_OVER_TIME_ATTENDANCE.ATTENDANCE_DATE " +
                " FROM HR_OVER_TIME_ATTENDANCE, HR_OVER_TIME_REQUEST " +
                " WHERE HR_OVER_TIME_ATTENDANCE.USER_NAME = ? " +
                " AND HR_OVER_TIME_ATTENDANCE.REQUEST_ID = HR_OVER_TIME_REQUEST.OVER_TIME_REQUEST_ID AND HR_OVER_TIME_REQUEST.ATTENDANCE_TAKEN ='YES' " +
                " ORDER BY HR_OVER_TIME_ATTENDANCE.HR_OVER_TIME_ATTENDANCE_ID DESC ";
//                " ORDER BY HR_OVER_TIME_REQUEST.REQUESTER_ID ASC ";

        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_selectQuery);
            _ps.setString(1, userName);
            _rs = _ps.executeQuery();
            OracleCachedRowSet ocrs = new OracleCachedRowSet();
            ocrs.populate(_rs);
            return (ResultSet) ocrs;
        } finally {
            releaseResources();
        }
    }

    public ResultSet selectApprovedOverTimeRequestsAttendance(String employeeId, String user) throws SQLException {

        String _selectQuery = "SELECT HR_OVER_TIME_REQUEST.OVER_TIME_REQUEST_ID, " +
                "  HR_OVER_TIME_REQUEST.REQUESTER_ID, " +
                "  HR_OVER_TIME_REQUEST.STATUS, " +
                "  HR_OVER_TIME_ATTENDANCE.HR_OVER_TIME_ATTENDANCE_ID, " +
                "  HR_OVER_TIME_ATTENDANCE.ATTENDANCE_DATE " +
                "FROM HR_OVER_TIME_ATTENDANCE, " +
                "  HR_OVER_TIME_REQUEST, " +
                "  HR_OVER_TIME_ATTEND_EMPLOYEE " +
                "WHERE HR_OVER_TIME_ATTENDANCE.USER_NAME          ='" + user + "' " +
                "AND HR_OVER_TIME_ATTEND_EMPLOYEE.OT_ATTENDANCE_ID=hr_over_time_attendance.hr_over_time_attendance_id " +
                "AND HR_OVER_TIME_ATTENDANCE.REQUEST_ID           = HR_OVER_TIME_REQUEST.OVER_TIME_REQUEST_ID " +
                "AND HR_OVER_TIME_ATTEND_EMPLOYEE.OT_APPROVED     <>'YES' " +
                "ORDER BY HR_OVER_TIME_ATTENDANCE.HR_OVER_TIME_ATTENDANCE_ID DESC";
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_selectQuery);
            _rs = _ps.executeQuery();
            return _rs;
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public ResultSet selectApprovedAttendance(String employeeId, String user) {

        String _selectQuery = "SELECT HR_OVER_TIME_REQUEST.OVER_TIME_REQUEST_ID, " +
                "  HR_OVER_TIME_REQUEST.REQUESTER_ID, " +
                "  HR_OVER_TIME_REQUEST.STATUS, " +
                "  HR_OVER_TIME_ATTENDANCE.HR_OVER_TIME_ATTENDANCE_ID, " +
                "  HR_OVER_TIME_ATTENDANCE.ATTENDANCE_DATE " +
                "FROM HR_OVER_TIME_ATTENDANCE, " +
                "  HR_OVER_TIME_REQUEST, " +
                "  HR_OVER_TIME_ATTEND_EMPLOYEE " +
                "WHERE HR_OVER_TIME_ATTENDANCE.USER_NAME          = '" + user + "' " +
                //                "AND HR_OVER_TIME_REQUEST.REQUESTER_ID            = '" +employeeId+ "' " +
                "AND HR_OVER_TIME_ATTEND_EMPLOYEE.OT_ATTENDANCE_ID=hr_over_time_attendance.hr_over_time_attendance_id " +
                "AND HR_OVER_TIME_ATTENDANCE.REQUEST_ID           = HR_OVER_TIME_REQUEST.OVER_TIME_REQUEST_ID " +
                "AND HR_OVER_TIME_ATTEND_EMPLOYEE.OT_APPROVED     ='YES' " +
                "ORDER BY HR_OVER_TIME_ATTENDANCE.HR_OVER_TIME_ATTENDANCE_ID DESC";
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_selectQuery);
            _rs = _ps.executeQuery();
            return _rs;
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }

    /**
     * for the drop down select item
     */
    public ResultSet selectAttendanceHistoryEmployee(int requestId) throws SQLException {
        String _selectQuery = " SELECT HR_OVER_TIME_REQUEST.OVER_TIME_REQUEST_ID,HR_OVER_TIME_REQUEST.REQUESTER_ID,HR_OVER_TIME_REQUEST.STATUS, " +//from HR_OVER_TIME_REQUEST
                " HR_OVER_TIME_ATTENDANCE.HR_OVER_TIME_ATTENDANCE_ID,  HR_OVER_TIME_ATTENDANCE.ATTENDANCE_DATE " +
                " FROM HR_OVER_TIME_ATTENDANCE, HR_OVER_TIME_REQUEST " +
                " WHERE HR_OVER_TIME_REQUEST.OVER_TIME_REQUEST_ID = ? " +
                " AND HR_OVER_TIME_ATTENDANCE.REQUEST_ID = HR_OVER_TIME_REQUEST.OVER_TIME_REQUEST_ID " +
                " ORDER BY HR_OVER_TIME_ATTENDANCE.HR_OVER_TIME_ATTENDANCE_ID DESC ";

        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_selectQuery);
            _ps.setInt(1, requestId);
            _rs = _ps.executeQuery();
            OracleCachedRowSet ocrs = new OracleCachedRowSet();
            ocrs.populate(_rs);
            return (ResultSet) ocrs;
        } finally {
            releaseResources();
        }
    }

    public ResultSet selectAttendedEmployeeAndTimeList(int overTimeAttendanceId) throws SQLException {

        String _selectQuery = " SELECT " +
                " HR_OVER_TIME_ATTENDANCE_ID, REQUEST_ID, ATTENDANCE_DATE,  HR_OVER_TIME_ATTENDANCE.USER_NAME, HR_OVER_TIME_ATTENDANCE.TIME_STAMP, " +//from HR_OVER_TIME_ATTENDANCE
                " OT_ATTENDANCE_EMPLOYEE_ID, HR_OVER_TIME_ATTEND_EMPLOYEE.RATE AS OVER_TIME_FACTOR,  OT_ATTENDANCE_ID, HR_OVER_TIME_ATTEND_EMPLOYEE.EMPLOYEE_ID, START_TIME, END_TIME, RATE,ATTENDED, " +//from  HR_OVER_TIME_ATTEND_EMPLOYEE
                " FIRST_NAME,MIDDLE_NAME, LAST_NAME " +//from VW_EMPLOYEE_BY_DEPARTMENT_LIST
                " FROM HR_OVER_TIME_ATTENDANCE, HR_OVER_TIME_ATTEND_EMPLOYEE, VW_EMPLOYEE_BY_DEPARTMENT_LIST " +
                " WHERE   HR_OVER_TIME_ATTENDANCE_ID = OT_ATTENDANCE_ID " +
                " AND VW_EMPLOYEE_BY_DEPARTMENT_LIST.EMP_ID = HR_OVER_TIME_ATTEND_EMPLOYEE.EMPLOYEE_ID " +
                " AND HR_OVER_TIME_ATTENDANCE.HR_OVER_TIME_ATTENDANCE_ID= " + overTimeAttendanceId;
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_selectQuery);
            _rs = _ps.executeQuery();
            OracleCachedRowSet ocrs = new OracleCachedRowSet();
            ocrs.populate(_rs);
            return (ResultSet) ocrs;
        } finally {
            releaseResources();
        }
    }

    public ResultSet selectAttendedEmployeeForApprove(int overTimeAttendanceId) throws SQLException {

        String _selectQuery = " SELECT " +
                " HR_OVER_TIME_ATTENDANCE_ID, REQUEST_ID, ATTENDANCE_DATE,  HR_OVER_TIME_ATTENDANCE.USER_NAME, HR_OVER_TIME_ATTENDANCE.TIME_STAMP, " +//from HR_OVER_TIME_ATTENDANCE
                " OT_ATTENDANCE_EMPLOYEE_ID, HR_OVER_TIME_ATTEND_EMPLOYEE.RATE AS OVER_TIME_FACTOR,  OT_ATTENDANCE_ID, HR_OVER_TIME_ATTEND_EMPLOYEE.EMPLOYEE_ID, START_TIME, END_TIME, RATE,ATTENDED, " +//from  HR_OVER_TIME_ATTEND_EMPLOYEE
                " FIRST_NAME,MIDDLE_NAME, LAST_NAME " +//from VW_EMPLOYEE_BY_DEPARTMENT_LIST
                " FROM HR_OVER_TIME_ATTENDANCE, HR_OVER_TIME_ATTEND_EMPLOYEE, VW_EMPLOYEE_BY_DEPARTMENT_LIST " +
                " WHERE   HR_OVER_TIME_ATTENDANCE_ID = OT_ATTENDANCE_ID AND ATTENDED='YES'" +
                " AND VW_EMPLOYEE_BY_DEPARTMENT_LIST.EMP_ID = HR_OVER_TIME_ATTEND_EMPLOYEE.EMPLOYEE_ID " +
                " AND HR_OVER_TIME_ATTENDANCE.HR_OVER_TIME_ATTENDANCE_ID= " + overTimeAttendanceId;
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_selectQuery);
            _rs = _ps.executeQuery();
            OracleCachedRowSet ocrs = new OracleCachedRowSet();
            ocrs.populate(_rs);
            return (ResultSet) ocrs;
        } finally {
            releaseResources();
        }
    }

    public boolean insertOverTimeAttendance(ArrayList<OverTimeRequestModel> employeeAndTimeList, int requestId, String userName, String timeStamp, String attendaceDate) throws SQLException {
        String _insertAttendanceQuery = "INSERT INTO HR_OVER_TIME_ATTENDANCE " +
                " (HR_OVER_TIME_ATTENDANCE_ID , REQUEST_ID, ATTENDANCE_DATE,  USER_NAME, TIME_STAMP ) " +
                " VALUES (HR_OVER_TIME_ATTENDANCE_SEQ.NEXTVAL, " +
                " ?,?,?,?) ";
        String _insertEmployeesListQuery = "INSERT INTO HR_OVER_TIME_ATTEND_EMPLOYEE " +
                " (OT_ATTENDANCE_EMPLOYEE_ID,OT_ATTENDANCE_ID, EMPLOYEE_ID, START_TIME, END_TIME, RATE, ATTENDED )" +
                " VALUES (HR_OVER_TIME_ATTEND_EMP_SEQ.NEXTVAL, HR_OVER_TIME_ATTENDANCE_SEQ.CURRVAL ,  " +
                " ?,?,?,?,? ) ";
        String _updateAttendanceTaken = "UPDATE  HR_OVER_TIME_REQUEST " +
                " SET  ATTENDANCE_TAKEN =? " +
                " WHERE OVER_TIME_REQUEST_ID =? ";
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_insertAttendanceQuery);
            _ps.setInt(1, requestId);
//            _ps.setString(2, employeeAndTimeList.get(0).getAttendanceDate());
            _ps.setString(2, attendaceDate);
            _ps.setString(3, userName);
            _ps.setString(4, timeStamp);
            _ps.executeUpdate();
            //============================================================================
            _ps = _con.prepareStatement(_insertEmployeesListQuery);
            int lengthOfList = employeeAndTimeList.size();
            for (int counter = 0; counter < lengthOfList; counter++) {
                _ps.setString(1, employeeAndTimeList.get(counter).getEmployeeId());
                _ps.setString(2, employeeAndTimeList.get(counter).getStartTime());
                _ps.setString(3, employeeAndTimeList.get(counter).getEndTime());
                _ps.setDouble(4, employeeAndTimeList.get(counter).getOverTimeFactor());
                _ps.setString(5, employeeAndTimeList.get(counter).isSelected() ? "YES" : "NO");
                _ps.addBatch();
            }
            _ps.executeBatch();
            _ps = _con.prepareStatement(_updateAttendanceTaken);
            _ps.setString(1, "YES");
            _ps.setInt(2, requestId);
            _ps.executeUpdate();
            return true;
        } finally {
            releaseResources();
        }
    }

    public boolean updateOverTimeAttendanceEmployee(ArrayList<OverTimeRequestModel> employeeAndTimeList) throws SQLException {
        String _insertEmployeesListQuery = "UPDATE  HR_OVER_TIME_ATTEND_EMPLOYEE " +
                " SET  EMPLOYEE_ID =? ,  START_TIME =? , END_TIME = ? , ATTENDED = ? " +
                " WHERE OT_ATTENDANCE_EMPLOYEE_ID =? ";
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_insertEmployeesListQuery);
            int lengthOfList = employeeAndTimeList.size();
            for (int counter = 0; counter < lengthOfList; counter++) {
                _ps.setString(1, employeeAndTimeList.get(counter).getEmployeeId());
                _ps.setString(2, employeeAndTimeList.get(counter).getStartTime());
                _ps.setString(3, employeeAndTimeList.get(counter).getEndTime());
                // _ps.setDouble(4, employeeAndTimeList.get(counter).getOverTimeFactor());
                _ps.setString(4, employeeAndTimeList.get(counter).isSelected() ? "YES" : "NO");
                _ps.setInt(5, employeeAndTimeList.get(counter).getOverTimeEmployeeId());
                _ps.addBatch();
            }
            _ps.executeBatch();
            return true;
        } finally {
            releaseResources();
        }
    }

    public boolean updateOverTimeAttendanceEmployeeApproov(ArrayList<OverTimeRequestModel> employeeAndTimeList, int APoverTimeAttendanceId) {
        String _insertEmployeesListQuery = "UPDATE  HR_OVER_TIME_ATTEND_EMPLOYEE SET  OT_APPROVED =?" +
                " WHERE EMPLOYEE_ID =? AND OT_ATTENDANCE_EMPLOYEE_ID=?";
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_insertEmployeesListQuery);
            int lengthOfList = employeeAndTimeList.size();
            for (int counter = 0; counter < lengthOfList; counter++) {
                _ps.setString(1, employeeAndTimeList.get(counter).isSelected() ? "YES" : "NO");
                _ps.setString(2, employeeAndTimeList.get(counter).getEmployeeId());
                _ps.setInt(3, employeeAndTimeList.get(counter).getOverTimeEmployeeId());

                _ps.addBatch();
            }
            _ps.executeBatch();
            return true;
        } catch (Exception ex) {
            ex.printStackTrace();
            return false;
        }
    }
}
