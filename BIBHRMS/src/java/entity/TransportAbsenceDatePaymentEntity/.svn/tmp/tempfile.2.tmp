/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package entity.TransportAbsenceDatePaymentEntity;

import connectionProvider.ConnectionManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import manager.TransportAbsenceDatePaymentManager.TransportAbsenceDatePaymentModel;
import oracle.jdbc.rowset.OracleCachedRowSet;

/**
 *
 * @author Henok
 */
public class TransportAbsenceDateRegistrationEntity extends ConnectionManager {

    Connection _con = null;
    PreparedStatement _ps = null;
    ResultSet _rs = null;

    public void releaseResources() throws SQLException {
        if (_rs != null) {
            _rs.close();
        }
        if (_ps != null) {
            _ps.close();
        }
        if (_con != null) {
            closePooledConnections(_con);
        }
    }

    public ResultSet selectAllServiceList() throws SQLException {
        String _selectQuery = " SELECT * FROM HR_LU_TRANSPORT_SERVIVE ";
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_selectQuery);
            _rs = _ps.executeQuery();
            OracleCachedRowSet ocrs = new OracleCachedRowSet();
            ocrs.populate(_rs);
            return (ResultSet) ocrs;
        } finally {
            releaseResources();
        }
    }

    public int insertTransportAbsenceDate(ArrayList<TransportAbsenceDatePaymentModel> transportAbsentDateList) throws SQLException {

        String _insertEmployeesListQuery = "INSERT INTO HR_TRANSPORT_ABSENCE_DATE " +
                //" (OVER_TIME_EMPLOYEE_ID,REQUEST_ID,EMPLOYEE_ID,START_DATE,START_TIME,END_DATE,END_TIME,OVER_TIME_FACTOR)" +
                " (ABSENCE_ID,SERVICE_ID,SHIFT,INOROUT,ABSENCE_DATE)" +
                " VALUES (HR_OVER_TIME_EMPLOYEE_SEQ.NEXTVAL," +
                " ?,?,?,?) ";
        try {
                       //////////////////////////////////
            _con = getConnection();
            PreparedStatement _ps2 = _con.prepareStatement(_insertEmployeesListQuery);
            int lengthOfList = transportAbsentDateList.size();
            for (int counter = 0; counter < lengthOfList; counter++) {
                _ps2.setString(1, transportAbsentDateList.get(counter).getServiceId());
//                _ps2.setString(2, employeeAndTimeList.get(counter).getServiceName());
                _ps2.setString(2, transportAbsentDateList.get(counter).getShift());
                _ps2.setString(3, transportAbsentDateList.get(counter).getInOut());
                _ps2.setString(4, transportAbsentDateList.get(counter).getAbsenceDate());
                //   _ps2.setDouble(6, employeeAndTimeList.get(counter).getOverTimeFactor());
                _ps2.addBatch();
            }
            _ps2.executeBatch();
            _ps2.clearBatch();
            _ps2.close();
            return 1;

        } finally {
            releaseResources();
        }
    }

    public int deleteTransportAbsentDates(ArrayList<TransportAbsenceDatePaymentModel> transportAbsentDateList) throws SQLException {
        String _deleteEmployeesListQuery = "DELETE HR_TRANSPORT_ABSENCE_DATE " +
                " where ABSENCE_ID =? ";
        try {

            _con = getConnection();
            _ps = _con.prepareStatement(_deleteEmployeesListQuery);
            int lengthOfList = transportAbsentDateList.size();
            for (int counter = 0; counter < lengthOfList; counter++) {
                _ps.setInt(1, transportAbsentDateList.get(counter).getAbsenceId());
                _ps.addBatch();
            }
            _ps.executeBatch();
            _ps.clearBatch();
            return 1;
        } finally {
            releaseResources();
        }
    }

    public ResultSet selectTransportAbsenceDates() throws SQLException {
        String _selectQuery = " SELECT ABSENCE_ID, SERVICE_ID, SHIFT, INOROUT, ABSENCE_DATE " +
                //  " SELECT OVER_TIME_EMPLOYEE_ID, REQUEST_ID, EMPLOYEE_ID, START_DATE, START_TIME, END_DATE, END_TIME, OVER_TIME_FACTOR,STATUS, " +
                " FROM HR_TRANSPORT_ABSENCE_DATE  ";

        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_selectQuery);
            _rs = _ps.executeQuery();
            OracleCachedRowSet ocrs = new OracleCachedRowSet();
            ocrs.populate(_rs);
            return (ResultSet) ocrs;
        } finally {
            releaseResources();
        }
    }

    public ResultSet selectTransportAbsentDayList(String serviceId, String shift, String date) throws SQLException {
        String _selectQuery = " SELECT * " +
                " FROM HR_TRANSPORT_ABSENCE_DATE  "+
                " WHERE   SERVICE_ID= '"+ serviceId + "'"+
                " and SHIFT= '"+ shift + "'"+
                " and ABSENCE_DATE= '" + date+"'";
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_selectQuery);
            _rs = _ps.executeQuery();
            OracleCachedRowSet ocrs = new OracleCachedRowSet();
            ocrs.populate(_rs);
            return (ResultSet) ocrs;
        } finally {
            releaseResources();
        }
    }

    public ResultSet selectUNShiftWork(String empId, int actualShift, String date) throws SQLException {
        String _selectQuery = " SELECT * " +
                " FROM HR_LU_WORK_WITHOUT_SHIFT  "+
                " WHERE   EMP_ID= '"+ empId + "'"+
                " and ACTUAL_SHIFT= "+ actualShift + ""+
                " and WORK_DATE= '" + date+"'";
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_selectQuery);
            _rs = _ps.executeQuery();
            OracleCachedRowSet ocrs = new OracleCachedRowSet();
            ocrs.populate(_rs);
            return (ResultSet) ocrs;
        } finally {
            releaseResources();
        }
    }

    public ResultSet selectsundayOrHolyday(String empId, String date) throws SQLException {

        String _selectQuery = " SELECT * " +
                " FROM HR_OVER_TIME_ATTEND_EMPLOYEE  "+
                " WHERE   EMPLOYEE_ID= '"+ empId + "'"+
                " and ATTENDED LIKE 'YES' "+
                " and OT_APPROVED LIKE 'YES' "+
                " and OT_ATTENDANCE_ID IN " +
                "  (SELECT HR_OVER_TIME_ATTENDANCE_ID " +
                "  FROM HR_OVER_TIME_ATTENDANCE " +
                "  WHERE ATTENDANCE_DATE ='"+ date + "'"+
                "  )";
                
        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_selectQuery);
            _rs = _ps.executeQuery();
            OracleCachedRowSet ocrs = new OracleCachedRowSet();
            ocrs.populate(_rs);
            return (ResultSet) ocrs;
        } finally {
            releaseResources();
        }
    }

    public ResultSet selectDestnationName(String serviceId) throws SQLException {
        String _selectQuery = " SELECT SERVICE_DESTINATION " +
                //  " SELECT OVER_TIME_EMPLOYEE_ID, REQUEST_ID, EMPLOYEE_ID, START_DATE, START_TIME, END_DATE, END_TIME, OVER_TIME_FACTOR,STATUS, " +
                " FROM HR_LU_TRANSPORT_SERVIVE  " +
                " WHERE ID = "+ serviceId ;

        try {
            _con = getConnection();
            _ps = _con.prepareStatement(_selectQuery);
            _rs = _ps.executeQuery();
            OracleCachedRowSet ocrs = new OracleCachedRowSet();
            ocrs.populate(_rs);
            return (ResultSet) ocrs;
        } finally {
            releaseResources();
        }
    }

}
